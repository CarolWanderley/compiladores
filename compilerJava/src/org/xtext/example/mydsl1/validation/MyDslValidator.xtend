/*
 * generated by Xtext 2.13.0-SNAPSHOT
 */
package org.xtext.example.mydsl1.validation

import org.xtext.example.mydsl1.javaDsl.CompilationUnit;
import org.xtext.example.mydsl1.javaDsl.TypeDeclaration;
import org.xtext.example.mydsl1.javaDsl.ClassDeclaration;
import org.xtext.example.mydsl1.javaDsl.ClassBodyDeclaration;
import org.xtext.example.mydsl1.javaDsl.FieldDeclaration;
import org.xtext.example.mydsl1.javaDsl.VariableDeclarator;
import org.xtext.example.mydsl1.javaDsl.ClassMemberDeclaration;
import org.xtext.example.mydsl1.javaDsl.InterfaceDeclaration;
import org.xtext.example.mydsl1.javaDsl.JavaDslPackage;
import org.xtext.example.mydsl1.javaDsl.MethodDeclaration;

import org.xtext.example.mydsl1.exception.ValidationException;

import org.eclipse.xtext.validation.Check;

import java.util.List;
import java.util.ArrayList;

import org.xtext.example.mydsl1.validation.utils.IfThenElseValidator;
import org.xtext.example.mydsl1.validation.utils.ValidatorRepository;
import org.xtext.example.mydsl1.validation.utils.ClassValidator;
import org.xtext.example.mydsl1.validation.utils.ExtendsValidator;
import org.xtext.example.mydsl1.validation.utils.ClassAttributeValidator;
import org.xtext.example.mydsl1.javaDsl.IfStatement

/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
class MyDslValidator extends AbstractMyDslValidator {
	
	public ValidatorRepository validator = new ValidatorRepository();
	
	@Check
	def validateCompilation(CompilationUnit cmu) {
		validator = new ValidatorRepository();
		for (TypeDeclaration td : cmu.typeDeclarations) {
			mapAndValidateClasses(td);
		}
		
		for (TypeDeclaration td : cmu.typeDeclarations) {
			if (td.name !== null && td.name instanceof ClassDeclaration) {
				var ExtendsValidator extendsValidator = new ExtendsValidator(validator);
				var ClassDeclaration cd = td.name as ClassDeclaration;
				try {
					extendsValidator.validate(cd);	
				} catch (ValidationException e) {
					error(e.message, cd, JavaDslPackage.Literals.CLASS_DECLARATION__CLASS_NAME);
				}
				mapAndValidateAttributes(cd);
				validateMethods(cd);
			}
		}
		
		
	}  
	
	def mapAndValidateClasses(TypeDeclaration td) {
		if (td.name === null) {
			return;
		}
	
		var isInstance = (td.name instanceof ClassDeclaration);
		if (isInstance) {
			var ClassDeclaration cd = td.name as ClassDeclaration;
			validateClass(cd);
			validator.addClass(cd);
		} else {
			var InterfaceDeclaration id = td.name as InterfaceDeclaration;
			validator.addInterface(id);
		}
	}
	
	def validateClass(ClassDeclaration cd) {
		try {
			var ClassValidator classValidator = new ClassValidator(validator);
			classValidator.validate(cd);
		} catch (Exception e) {
			error(e.message, cd, JavaDslPackage.Literals.CLASS_DECLARATION__CLASS_NAME);
		}
	}
	
	def mapAndValidateAttributes(ClassDeclaration cd) {
		try {
			for (ClassBodyDeclaration cbd : cd.body.declarations) {
				if (cbd.member !== null && cbd.member instanceof ClassMemberDeclaration) {
					var ClassMemberDeclaration cmd = cbd.member as ClassMemberDeclaration;
					if (cmd.field !== null && cmd.field instanceof FieldDeclaration) {
						var FieldDeclaration fd = cmd.field as FieldDeclaration;
						var ClassAttributeValidator cav = new ClassAttributeValidator(validator);
						cav.validate(cd, fd);
						validator.classAttributes.get(cd.className).add(fd);
					}
				}
			}
			
			for (FieldDeclaration fd : validator.classAttributes.get(cd.className)) {
				if (fd.variables !== null) {
					for (VariableDeclarator vd : fd.variables) {
						// validateAttributeWithExpression(fd, vd, cd.className);
					}
				}
			}	
		} catch (ValidationException e) {
			if (e.argA instanceof FieldDeclaration) {
				var FieldDeclaration fd = e.argA as FieldDeclaration;
				error(e.message, fd, JavaDslPackage.Literals.FIELD_DECLARATION__TYPE);
			} else if (e.argA instanceof VariableDeclarator) {
				var VariableDeclarator vd = e.argA as VariableDeclarator;
				error(e.message, vd, JavaDslPackage.Literals.VARIABLE_DECLARATOR__NAME);
			}
		}
	}
	
	def validateMethods(ClassDeclaration cd) {
		var List<String> methods = new ArrayList<String>();
		for (ClassBodyDeclaration cbd : cd.body.declarations) {
			var ClassMemberDeclaration cmd = cbd.member;
			var MethodDeclaration md = cmd.method;
			if (md !== null) {
				if (methods.contains(md.signature.header.name)) {
					error("Method " + md.signature.header.name + " already exists.", md, JavaDslPackage.Literals.METHOD_DECLARATION__SIGNATURE);
				}
				methods.add(md.signature.header.name);
				validator.classMethods.get(cd.className).add(md);
				var ClassValidator cv = new ClassValidator(validator);
				try {
					cv.validateMethod(md);
				} catch (Exception e) {
					error(e.message, md, JavaDslPackage.Literals.METHOD_DECLARATION__SIGNATURE);
				}
			}
		}
	}
	
	@Check
	def validateIfStatement(IfStatement ifs) {
		System.out.println("AQUI OH");
		var IfThenElseValidator ift = new IfThenElseValidator(validator);
		try {
			ift.validate(ifs);
		} catch (Exception e) {
			error(e.message, ifs, JavaDslPackage.Literals.IF_STATEMENT__CONDITION);
		}
	}
	
	def hasMethod(String className, MethodDeclaration md) {
		for (MethodDeclaration mdAux : validator.classMethods.get(className)) {
			if (mdAux.signature.header.name === md.signature.header.name) {
				return true;
			}
		}
		return false;
	}
	
}
