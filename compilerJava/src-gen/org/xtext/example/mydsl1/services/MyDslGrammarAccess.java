/*
 * generated by Xtext 2.13.0-SNAPSHOT
 */
package org.xtext.example.mydsl1.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MyDslGrammarAccess extends AbstractGrammarElementFinder {
	
	public class HeadElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.Head");
		private final Assignment cProgramAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cProgramCompilationUnitParserRuleCall_0 = (RuleCall)cProgramAssignment.eContents().get(0);
		
		//Head:
		//	program=CompilationUnit;
		@Override public ParserRule getRule() { return rule; }
		
		//program=CompilationUnit
		public Assignment getProgramAssignment() { return cProgramAssignment; }
		
		//CompilationUnit
		public RuleCall getProgramCompilationUnitParserRuleCall_0() { return cProgramCompilationUnitParserRuleCall_0; }
	}
	public class CompilationUnitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.CompilationUnit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPackageAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPackagePackageStatementParserRuleCall_0_0 = (RuleCall)cPackageAssignment_0.eContents().get(0);
		private final Assignment cImportsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportsImportStatementParserRuleCall_1_0 = (RuleCall)cImportsAssignment_1.eContents().get(0);
		private final Assignment cTypeDeclarationsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeDeclarationsTypeDeclarationParserRuleCall_2_0 = (RuleCall)cTypeDeclarationsAssignment_2.eContents().get(0);
		
		//CompilationUnit:
		//	package=PackageStatement? imports+=ImportStatement* typeDeclarations+=TypeDeclaration*;
		@Override public ParserRule getRule() { return rule; }
		
		//package=PackageStatement? imports+=ImportStatement* typeDeclarations+=TypeDeclaration*
		public Group getGroup() { return cGroup; }
		
		//package=PackageStatement?
		public Assignment getPackageAssignment_0() { return cPackageAssignment_0; }
		
		//PackageStatement
		public RuleCall getPackagePackageStatementParserRuleCall_0_0() { return cPackagePackageStatementParserRuleCall_0_0; }
		
		//imports+=ImportStatement*
		public Assignment getImportsAssignment_1() { return cImportsAssignment_1; }
		
		//ImportStatement
		public RuleCall getImportsImportStatementParserRuleCall_1_0() { return cImportsImportStatementParserRuleCall_1_0; }
		
		//typeDeclarations+=TypeDeclaration*
		public Assignment getTypeDeclarationsAssignment_2() { return cTypeDeclarationsAssignment_2; }
		
		//TypeDeclaration
		public RuleCall getTypeDeclarationsTypeDeclarationParserRuleCall_2_0() { return cTypeDeclarationsTypeDeclarationParserRuleCall_2_0; }
	}
	public class PackageStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.PackageStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPACKAGETerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNamePackageNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//PackageStatement:
		//	=> PACKAGE name=PackageName ";";
		@Override public ParserRule getRule() { return rule; }
		
		//=> PACKAGE name=PackageName ";"
		public Group getGroup() { return cGroup; }
		
		//=> PACKAGE
		public RuleCall getPACKAGETerminalRuleCall_0() { return cPACKAGETerminalRuleCall_0; }
		
		//name=PackageName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//PackageName
		public RuleCall getNamePackageNameParserRuleCall_1_0() { return cNamePackageNameParserRuleCall_1_0; }
		
		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class ImportStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.ImportStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIMPORTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Assignment cPackageAssignment_1_0_0 = (Assignment)cGroup_1_0.eContents().get(0);
		private final RuleCall cPackagePackageNameParserRuleCall_1_0_0_0 = (RuleCall)cPackageAssignment_1_0_0.eContents().get(0);
		private final Keyword cFullStopAsteriskKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Assignment cObjectAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cObjectTypeNameParserRuleCall_1_1_0 = (RuleCall)cObjectAssignment_1_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ImportStatement:
		//	=> IMPORT (package=PackageName ".*" | object=TypeName) ";";
		@Override public ParserRule getRule() { return rule; }
		
		//=> IMPORT (package=PackageName ".*" | object=TypeName) ";"
		public Group getGroup() { return cGroup; }
		
		//=> IMPORT
		public RuleCall getIMPORTTerminalRuleCall_0() { return cIMPORTTerminalRuleCall_0; }
		
		//package=PackageName ".*" | object=TypeName
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//package=PackageName ".*"
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//package=PackageName
		public Assignment getPackageAssignment_1_0_0() { return cPackageAssignment_1_0_0; }
		
		//PackageName
		public RuleCall getPackagePackageNameParserRuleCall_1_0_0_0() { return cPackagePackageNameParserRuleCall_1_0_0_0; }
		
		//".*"
		public Keyword getFullStopAsteriskKeyword_1_0_1() { return cFullStopAsteriskKeyword_1_0_1; }
		
		//object=TypeName
		public Assignment getObjectAssignment_1_1() { return cObjectAssignment_1_1; }
		
		//TypeName
		public RuleCall getObjectTypeNameParserRuleCall_1_1_0() { return cObjectTypeNameParserRuleCall_1_1_0; }
		
		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class TypeDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.TypeDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDocAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDocDOC_COMMENTTerminalRuleCall_0_0 = (RuleCall)cDocAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cNameClassDeclarationParserRuleCall_1_0_0 = (RuleCall)cNameAssignment_1_0.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cNameInterfaceDeclarationParserRuleCall_1_1_0 = (RuleCall)cNameAssignment_1_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//TypeDeclaration:
		//	doc=DOC_COMMENT? (name=ClassDeclaration | name=InterfaceDeclaration) ";";
		@Override public ParserRule getRule() { return rule; }
		
		//doc=DOC_COMMENT? (name=ClassDeclaration | name=InterfaceDeclaration) ";"
		public Group getGroup() { return cGroup; }
		
		//doc=DOC_COMMENT?
		public Assignment getDocAssignment_0() { return cDocAssignment_0; }
		
		//DOC_COMMENT
		public RuleCall getDocDOC_COMMENTTerminalRuleCall_0_0() { return cDocDOC_COMMENTTerminalRuleCall_0_0; }
		
		//name=ClassDeclaration | name=InterfaceDeclaration
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//name=ClassDeclaration
		public Assignment getNameAssignment_1_0() { return cNameAssignment_1_0; }
		
		//ClassDeclaration
		public RuleCall getNameClassDeclarationParserRuleCall_1_0_0() { return cNameClassDeclarationParserRuleCall_1_0_0; }
		
		//name=InterfaceDeclaration
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }
		
		//InterfaceDeclaration
		public RuleCall getNameInterfaceDeclarationParserRuleCall_1_1_0() { return cNameInterfaceDeclarationParserRuleCall_1_1_0; }
		
		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class ClassDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.ClassDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cModifiersAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cModifiersClassModifierParserRuleCall_0_0 = (RuleCall)cModifiersAssignment_0.eContents().get(0);
		private final RuleCall cCLASSTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cClassNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cClassNameIDTerminalRuleCall_2_0 = (RuleCall)cClassNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final RuleCall cEXTENDSTerminalRuleCall_3_0 = (RuleCall)cGroup_3.eContents().get(0);
		private final Assignment cExtendAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cExtendClassTypeParserRuleCall_3_1_0 = (RuleCall)cExtendAssignment_3_1.eContents().get(0);
		private final Assignment cImplementsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cImplementsInterfacesParserRuleCall_4_0 = (RuleCall)cImplementsAssignment_4.eContents().get(0);
		private final Assignment cBodyAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cBodyClassBodyParserRuleCall_5_0 = (RuleCall)cBodyAssignment_5.eContents().get(0);
		
		//ClassDeclaration:
		//	modifiers+=ClassModifier*
		//	CLASS className=ID (EXTENDS extend=ClassType)? implements=Interfaces? body=ClassBody;
		@Override public ParserRule getRule() { return rule; }
		
		//modifiers+=ClassModifier* CLASS className=ID (EXTENDS extend=ClassType)? implements=Interfaces? body=ClassBody
		public Group getGroup() { return cGroup; }
		
		//modifiers+=ClassModifier*
		public Assignment getModifiersAssignment_0() { return cModifiersAssignment_0; }
		
		//ClassModifier
		public RuleCall getModifiersClassModifierParserRuleCall_0_0() { return cModifiersClassModifierParserRuleCall_0_0; }
		
		//CLASS
		public RuleCall getCLASSTerminalRuleCall_1() { return cCLASSTerminalRuleCall_1; }
		
		//className=ID
		public Assignment getClassNameAssignment_2() { return cClassNameAssignment_2; }
		
		//ID
		public RuleCall getClassNameIDTerminalRuleCall_2_0() { return cClassNameIDTerminalRuleCall_2_0; }
		
		//(EXTENDS extend=ClassType)?
		public Group getGroup_3() { return cGroup_3; }
		
		//EXTENDS
		public RuleCall getEXTENDSTerminalRuleCall_3_0() { return cEXTENDSTerminalRuleCall_3_0; }
		
		//extend=ClassType
		public Assignment getExtendAssignment_3_1() { return cExtendAssignment_3_1; }
		
		//ClassType
		public RuleCall getExtendClassTypeParserRuleCall_3_1_0() { return cExtendClassTypeParserRuleCall_3_1_0; }
		
		//implements=Interfaces?
		public Assignment getImplementsAssignment_4() { return cImplementsAssignment_4; }
		
		//Interfaces
		public RuleCall getImplementsInterfacesParserRuleCall_4_0() { return cImplementsInterfacesParserRuleCall_4_0; }
		
		//body=ClassBody
		public Assignment getBodyAssignment_5() { return cBodyAssignment_5; }
		
		//ClassBody
		public RuleCall getBodyClassBodyParserRuleCall_5_0() { return cBodyClassBodyParserRuleCall_5_0; }
	}
	public class ClassModifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.ClassModifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPUBLICTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cABSTRACTTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cFINALTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cPRIVATETerminalRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//ClassModifier:
		//	PUBLIC | ABSTRACT | FINAL | PRIVATE;
		@Override public ParserRule getRule() { return rule; }
		
		//PUBLIC | ABSTRACT | FINAL | PRIVATE
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PUBLIC
		public RuleCall getPUBLICTerminalRuleCall_0() { return cPUBLICTerminalRuleCall_0; }
		
		//ABSTRACT
		public RuleCall getABSTRACTTerminalRuleCall_1() { return cABSTRACTTerminalRuleCall_1; }
		
		//FINAL
		public RuleCall getFINALTerminalRuleCall_2() { return cFINALTerminalRuleCall_2; }
		
		//PRIVATE
		public RuleCall getPRIVATETerminalRuleCall_3() { return cPRIVATETerminalRuleCall_3; }
	}
	public class InterfacesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.Interfaces");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeywordAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cKeywordIMPLEMENTSTerminalRuleCall_0_0 = (RuleCall)cKeywordAssignment_0.eContents().get(0);
		private final Assignment cInterfacesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cInterfacesInterfaceTypeParserRuleCall_1_0 = (RuleCall)cInterfacesAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cInterfacesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cInterfacesIntegralTypeParserRuleCall_2_1_0 = (RuleCall)cInterfacesAssignment_2_1.eContents().get(0);
		
		//Interfaces:
		//	keyword=IMPLEMENTS interfaces+=InterfaceType (=> "," interfaces+=IntegralType)*;
		@Override public ParserRule getRule() { return rule; }
		
		//keyword=IMPLEMENTS interfaces+=InterfaceType (=> "," interfaces+=IntegralType)*
		public Group getGroup() { return cGroup; }
		
		//keyword=IMPLEMENTS
		public Assignment getKeywordAssignment_0() { return cKeywordAssignment_0; }
		
		//IMPLEMENTS
		public RuleCall getKeywordIMPLEMENTSTerminalRuleCall_0_0() { return cKeywordIMPLEMENTSTerminalRuleCall_0_0; }
		
		//interfaces+=InterfaceType
		public Assignment getInterfacesAssignment_1() { return cInterfacesAssignment_1; }
		
		//InterfaceType
		public RuleCall getInterfacesInterfaceTypeParserRuleCall_1_0() { return cInterfacesInterfaceTypeParserRuleCall_1_0; }
		
		//(=> "," interfaces+=IntegralType)*
		public Group getGroup_2() { return cGroup_2; }
		
		//=> ","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//interfaces+=IntegralType
		public Assignment getInterfacesAssignment_2_1() { return cInterfacesAssignment_2_1; }
		
		//IntegralType
		public RuleCall getInterfacesIntegralTypeParserRuleCall_2_1_0() { return cInterfacesIntegralTypeParserRuleCall_2_1_0; }
	}
	public class ClassBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.ClassBody");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDeclarationsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDeclarationsClassBodyDeclarationParserRuleCall_1_0 = (RuleCall)cDeclarationsAssignment_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ClassBody:
		//	"{" declarations+=ClassBodyDeclaration* "}";
		@Override public ParserRule getRule() { return rule; }
		
		//"{" declarations+=ClassBodyDeclaration* "}"
		public Group getGroup() { return cGroup; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }
		
		//declarations+=ClassBodyDeclaration*
		public Assignment getDeclarationsAssignment_1() { return cDeclarationsAssignment_1; }
		
		//ClassBodyDeclaration
		public RuleCall getDeclarationsClassBodyDeclarationParserRuleCall_1_0() { return cDeclarationsClassBodyDeclarationParserRuleCall_1_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_2() { return cRightCurlyBracketKeyword_2; }
	}
	public class ClassBodyDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.ClassBodyDeclaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cMemberAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cMemberClassMemberDeclarationParserRuleCall_0_0 = (RuleCall)cMemberAssignment_0.eContents().get(0);
		private final RuleCall cStaticInitializerParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cConstructorDeclarationParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//ClassBodyDeclaration:
		//	member=ClassMemberDeclaration | StaticInitializer | ConstructorDeclaration;
		@Override public ParserRule getRule() { return rule; }
		
		//member=ClassMemberDeclaration | StaticInitializer | ConstructorDeclaration
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//member=ClassMemberDeclaration
		public Assignment getMemberAssignment_0() { return cMemberAssignment_0; }
		
		//ClassMemberDeclaration
		public RuleCall getMemberClassMemberDeclarationParserRuleCall_0_0() { return cMemberClassMemberDeclarationParserRuleCall_0_0; }
		
		//StaticInitializer
		public RuleCall getStaticInitializerParserRuleCall_1() { return cStaticInitializerParserRuleCall_1; }
		
		//ConstructorDeclaration
		public RuleCall getConstructorDeclarationParserRuleCall_2() { return cConstructorDeclarationParserRuleCall_2; }
	}
	public class ClassMemberDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.ClassMemberDeclaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cFieldAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cFieldFieldDeclarationParserRuleCall_0_0 = (RuleCall)cFieldAssignment_0.eContents().get(0);
		private final RuleCall cMethodDeclarationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ClassMemberDeclaration:
		//	field=FieldDeclaration | MethodDeclaration;
		@Override public ParserRule getRule() { return rule; }
		
		//field=FieldDeclaration | MethodDeclaration
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//field=FieldDeclaration
		public Assignment getFieldAssignment_0() { return cFieldAssignment_0; }
		
		//FieldDeclaration
		public RuleCall getFieldFieldDeclarationParserRuleCall_0_0() { return cFieldFieldDeclarationParserRuleCall_0_0; }
		
		//MethodDeclaration
		public RuleCall getMethodDeclarationParserRuleCall_1() { return cMethodDeclarationParserRuleCall_1; }
	}
	public class StaticInitializerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.StaticInitializer");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cSTATICTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cCodeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCodeBlockParserRuleCall_1_0 = (RuleCall)cCodeAssignment_1.eContents().get(0);
		
		//StaticInitializer:
		//	STATIC code=Block;
		@Override public ParserRule getRule() { return rule; }
		
		//STATIC code=Block
		public Group getGroup() { return cGroup; }
		
		//STATIC
		public RuleCall getSTATICTerminalRuleCall_0() { return cSTATICTerminalRuleCall_0; }
		
		//code=Block
		public Assignment getCodeAssignment_1() { return cCodeAssignment_1; }
		
		//Block
		public RuleCall getCodeBlockParserRuleCall_1_0() { return cCodeBlockParserRuleCall_1_0; }
	}
	public class ConstructorDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.ConstructorDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cModifiersAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cModifiersConstructorModifierParserRuleCall_0_0 = (RuleCall)cModifiersAssignment_0.eContents().get(0);
		private final Assignment cHeaderAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cHeaderConstructorDeclaratorParserRuleCall_1_0 = (RuleCall)cHeaderAssignment_1.eContents().get(0);
		private final Assignment cThrowsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cThrowsExceptionsParserRuleCall_2_0 = (RuleCall)cThrowsAssignment_2.eContents().get(0);
		private final Assignment cBodyAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cBodyConstructorBodyParserRuleCall_3_0 = (RuleCall)cBodyAssignment_3.eContents().get(0);
		
		//ConstructorDeclaration:
		//	modifiers+=ConstructorModifier*
		//	header=ConstructorDeclarator throws=Exceptions? body=ConstructorBody;
		@Override public ParserRule getRule() { return rule; }
		
		//modifiers+=ConstructorModifier* header=ConstructorDeclarator throws=Exceptions? body=ConstructorBody
		public Group getGroup() { return cGroup; }
		
		//modifiers+=ConstructorModifier*
		public Assignment getModifiersAssignment_0() { return cModifiersAssignment_0; }
		
		//ConstructorModifier
		public RuleCall getModifiersConstructorModifierParserRuleCall_0_0() { return cModifiersConstructorModifierParserRuleCall_0_0; }
		
		//header=ConstructorDeclarator
		public Assignment getHeaderAssignment_1() { return cHeaderAssignment_1; }
		
		//ConstructorDeclarator
		public RuleCall getHeaderConstructorDeclaratorParserRuleCall_1_0() { return cHeaderConstructorDeclaratorParserRuleCall_1_0; }
		
		//throws=Exceptions?
		public Assignment getThrowsAssignment_2() { return cThrowsAssignment_2; }
		
		//Exceptions
		public RuleCall getThrowsExceptionsParserRuleCall_2_0() { return cThrowsExceptionsParserRuleCall_2_0; }
		
		//body=ConstructorBody
		public Assignment getBodyAssignment_3() { return cBodyAssignment_3; }
		
		//ConstructorBody
		public RuleCall getBodyConstructorBodyParserRuleCall_3_0() { return cBodyConstructorBodyParserRuleCall_3_0; }
	}
	public class ConstructorModifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.ConstructorModifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPUBLICTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPROTECTEDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cPRIVATETerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//ConstructorModifier:
		//	PUBLIC | PROTECTED | PRIVATE;
		@Override public ParserRule getRule() { return rule; }
		
		//PUBLIC | PROTECTED | PRIVATE
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PUBLIC
		public RuleCall getPUBLICTerminalRuleCall_0() { return cPUBLICTerminalRuleCall_0; }
		
		//PROTECTED
		public RuleCall getPROTECTEDTerminalRuleCall_1() { return cPROTECTEDTerminalRuleCall_1; }
		
		//PRIVATE
		public RuleCall getPRIVATETerminalRuleCall_2() { return cPRIVATETerminalRuleCall_2; }
	}
	public class ConstructorDeclaratorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.ConstructorDeclarator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameSimpleTypeNameParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cParamsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cParamsFormalParameterParserRuleCall_2_0_0 = (RuleCall)cParamsAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cParamsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cParamsFormalParameterParserRuleCall_2_1_1_0 = (RuleCall)cParamsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ConstructorDeclarator:
		//	name=SimpleTypeName
		//	"(" (params+=FormalParameter (=> "," params+=FormalParameter)*)? ")";
		@Override public ParserRule getRule() { return rule; }
		
		//name=SimpleTypeName "(" (params+=FormalParameter (=> "," params+=FormalParameter)*)? ")"
		public Group getGroup() { return cGroup; }
		
		//name=SimpleTypeName
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//SimpleTypeName
		public RuleCall getNameSimpleTypeNameParserRuleCall_0_0() { return cNameSimpleTypeNameParserRuleCall_0_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//(params+=FormalParameter (=> "," params+=FormalParameter)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//params+=FormalParameter
		public Assignment getParamsAssignment_2_0() { return cParamsAssignment_2_0; }
		
		//FormalParameter
		public RuleCall getParamsFormalParameterParserRuleCall_2_0_0() { return cParamsFormalParameterParserRuleCall_2_0_0; }
		
		//(=> "," params+=FormalParameter)*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//=> ","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }
		
		//params+=FormalParameter
		public Assignment getParamsAssignment_2_1_1() { return cParamsAssignment_2_1_1; }
		
		//FormalParameter
		public RuleCall getParamsFormalParameterParserRuleCall_2_1_1_0() { return cParamsFormalParameterParserRuleCall_2_1_1_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class FormalParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.FormalParameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeTypeParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cVariableAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVariableVariableDeclaratorIdParserRuleCall_1_0 = (RuleCall)cVariableAssignment_1.eContents().get(0);
		
		//FormalParameter:
		//	type=Type variable=VariableDeclaratorId;
		@Override public ParserRule getRule() { return rule; }
		
		//type=Type variable=VariableDeclaratorId
		public Group getGroup() { return cGroup; }
		
		//type=Type
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_0_0() { return cTypeTypeParserRuleCall_0_0; }
		
		//variable=VariableDeclaratorId
		public Assignment getVariableAssignment_1() { return cVariableAssignment_1; }
		
		//VariableDeclaratorId
		public RuleCall getVariableVariableDeclaratorIdParserRuleCall_1_0() { return cVariableVariableDeclaratorIdParserRuleCall_1_0; }
	}
	public class ExceptionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.Exceptions");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cTHROWSTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cExceptionsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExceptionsClassTypeParserRuleCall_1_0 = (RuleCall)cExceptionsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cExceptionsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cExceptionsClassTypeParserRuleCall_2_1_0 = (RuleCall)cExceptionsAssignment_2_1.eContents().get(0);
		
		//Exceptions:
		//	THROWS exceptions+=ClassType (=> "," exceptions+=ClassType)*;
		@Override public ParserRule getRule() { return rule; }
		
		//THROWS exceptions+=ClassType (=> "," exceptions+=ClassType)*
		public Group getGroup() { return cGroup; }
		
		//THROWS
		public RuleCall getTHROWSTerminalRuleCall_0() { return cTHROWSTerminalRuleCall_0; }
		
		//exceptions+=ClassType
		public Assignment getExceptionsAssignment_1() { return cExceptionsAssignment_1; }
		
		//ClassType
		public RuleCall getExceptionsClassTypeParserRuleCall_1_0() { return cExceptionsClassTypeParserRuleCall_1_0; }
		
		//(=> "," exceptions+=ClassType)*
		public Group getGroup_2() { return cGroup_2; }
		
		//=> ","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//exceptions+=ClassType
		public Assignment getExceptionsAssignment_2_1() { return cExceptionsAssignment_2_1; }
		
		//ClassType
		public RuleCall getExceptionsClassTypeParserRuleCall_2_1_0() { return cExceptionsClassTypeParserRuleCall_2_1_0; }
	}
	public class ConstructorBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.ConstructorBody");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cInvocationAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cInvocationExplicitConstructorInvocationParserRuleCall_1_0 = (RuleCall)cInvocationAssignment_1.eContents().get(0);
		private final Assignment cDeclarationsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDeclarationsBlockStatementParserRuleCall_2_0 = (RuleCall)cDeclarationsAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ConstructorBody:
		//	"{" invocation=ExplicitConstructorInvocation? declarations+=BlockStatement* "}";
		@Override public ParserRule getRule() { return rule; }
		
		//"{" invocation=ExplicitConstructorInvocation? declarations+=BlockStatement* "}"
		public Group getGroup() { return cGroup; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }
		
		//invocation=ExplicitConstructorInvocation?
		public Assignment getInvocationAssignment_1() { return cInvocationAssignment_1; }
		
		//ExplicitConstructorInvocation
		public RuleCall getInvocationExplicitConstructorInvocationParserRuleCall_1_0() { return cInvocationExplicitConstructorInvocationParserRuleCall_1_0; }
		
		//declarations+=BlockStatement*
		public Assignment getDeclarationsAssignment_2() { return cDeclarationsAssignment_2; }
		
		//BlockStatement
		public RuleCall getDeclarationsBlockStatementParserRuleCall_2_0() { return cDeclarationsBlockStatementParserRuleCall_2_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class ExplicitConstructorInvocationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.ExplicitConstructorInvocation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cKeywordAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cKeywordTHISTerminalRuleCall_0_0_0 = (RuleCall)cKeywordAssignment_0_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cArgsAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cArgsArgumentListParserRuleCall_0_2_0 = (RuleCall)cArgsAssignment_0_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cKeywordAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cKeywordSUPERTerminalRuleCall_1_0_0 = (RuleCall)cKeywordAssignment_1_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cArgsAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cArgsArgumentListParserRuleCall_1_2_0 = (RuleCall)cArgsAssignment_1_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//ExplicitConstructorInvocation:
		//	keyword=THIS "(" args=ArgumentList? ")" | keyword=SUPER "(" args=ArgumentList? ")";
		@Override public ParserRule getRule() { return rule; }
		
		//keyword=THIS "(" args=ArgumentList? ")" | keyword=SUPER "(" args=ArgumentList? ")"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//keyword=THIS "(" args=ArgumentList? ")"
		public Group getGroup_0() { return cGroup_0; }
		
		//keyword=THIS
		public Assignment getKeywordAssignment_0_0() { return cKeywordAssignment_0_0; }
		
		//THIS
		public RuleCall getKeywordTHISTerminalRuleCall_0_0_0() { return cKeywordTHISTerminalRuleCall_0_0_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_0_1() { return cLeftParenthesisKeyword_0_1; }
		
		//args=ArgumentList?
		public Assignment getArgsAssignment_0_2() { return cArgsAssignment_0_2; }
		
		//ArgumentList
		public RuleCall getArgsArgumentListParserRuleCall_0_2_0() { return cArgsArgumentListParserRuleCall_0_2_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_0_3() { return cRightParenthesisKeyword_0_3; }
		
		//keyword=SUPER "(" args=ArgumentList? ")"
		public Group getGroup_1() { return cGroup_1; }
		
		//keyword=SUPER
		public Assignment getKeywordAssignment_1_0() { return cKeywordAssignment_1_0; }
		
		//SUPER
		public RuleCall getKeywordSUPERTerminalRuleCall_1_0_0() { return cKeywordSUPERTerminalRuleCall_1_0_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1_1() { return cLeftParenthesisKeyword_1_1; }
		
		//args=ArgumentList?
		public Assignment getArgsAssignment_1_2() { return cArgsAssignment_1_2; }
		
		//ArgumentList
		public RuleCall getArgsArgumentListParserRuleCall_1_2_0() { return cArgsArgumentListParserRuleCall_1_2_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_1_3() { return cRightParenthesisKeyword_1_3; }
	}
	public class FieldDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.FieldDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cModifiersAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cModifiersFieldModifierParserRuleCall_0_0 = (RuleCall)cModifiersAssignment_0.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeTypeParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cVariablesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVariablesVariableDeclaratorParserRuleCall_2_0 = (RuleCall)cVariablesAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cVariablesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cVariablesVariableDeclaratorParserRuleCall_3_1_0 = (RuleCall)cVariablesAssignment_3_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//FieldDeclaration:
		//	modifiers+=FieldModifier*
		//	type=Type variables+=VariableDeclarator (=> "," variables+=VariableDeclarator)* ";";
		@Override public ParserRule getRule() { return rule; }
		
		//modifiers+=FieldModifier* type=Type variables+=VariableDeclarator (=> "," variables+=VariableDeclarator)* ";"
		public Group getGroup() { return cGroup; }
		
		//modifiers+=FieldModifier*
		public Assignment getModifiersAssignment_0() { return cModifiersAssignment_0; }
		
		//FieldModifier
		public RuleCall getModifiersFieldModifierParserRuleCall_0_0() { return cModifiersFieldModifierParserRuleCall_0_0; }
		
		//type=Type
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_1_0() { return cTypeTypeParserRuleCall_1_0; }
		
		//variables+=VariableDeclarator
		public Assignment getVariablesAssignment_2() { return cVariablesAssignment_2; }
		
		//VariableDeclarator
		public RuleCall getVariablesVariableDeclaratorParserRuleCall_2_0() { return cVariablesVariableDeclaratorParserRuleCall_2_0; }
		
		//(=> "," variables+=VariableDeclarator)*
		public Group getGroup_3() { return cGroup_3; }
		
		//=> ","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//variables+=VariableDeclarator
		public Assignment getVariablesAssignment_3_1() { return cVariablesAssignment_3_1; }
		
		//VariableDeclarator
		public RuleCall getVariablesVariableDeclaratorParserRuleCall_3_1_0() { return cVariablesVariableDeclaratorParserRuleCall_3_1_0; }
		
		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class FieldModifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.FieldModifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPUBLICTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPROTECTEDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cPRIVATETerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cSTATICTerminalRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cFINALTerminalRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cTRANSIENTTerminalRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cVOLATILETerminalRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		//FieldModifier:
		//	PUBLIC | PROTECTED | PRIVATE | STATIC | FINAL | TRANSIENT | VOLATILE;
		@Override public ParserRule getRule() { return rule; }
		
		//PUBLIC | PROTECTED | PRIVATE | STATIC | FINAL | TRANSIENT | VOLATILE
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PUBLIC
		public RuleCall getPUBLICTerminalRuleCall_0() { return cPUBLICTerminalRuleCall_0; }
		
		//PROTECTED
		public RuleCall getPROTECTEDTerminalRuleCall_1() { return cPROTECTEDTerminalRuleCall_1; }
		
		//PRIVATE
		public RuleCall getPRIVATETerminalRuleCall_2() { return cPRIVATETerminalRuleCall_2; }
		
		//STATIC
		public RuleCall getSTATICTerminalRuleCall_3() { return cSTATICTerminalRuleCall_3; }
		
		//FINAL
		public RuleCall getFINALTerminalRuleCall_4() { return cFINALTerminalRuleCall_4; }
		
		//TRANSIENT
		public RuleCall getTRANSIENTTerminalRuleCall_5() { return cTRANSIENTTerminalRuleCall_5; }
		
		//VOLATILE
		public RuleCall getVOLATILETerminalRuleCall_6() { return cVOLATILETerminalRuleCall_6; }
	}
	public class VariableDeclaratorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.VariableDeclarator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameVariableDeclaratorIdParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cValueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValueVariableInitializerParserRuleCall_1_1_0 = (RuleCall)cValueAssignment_1_1.eContents().get(0);
		
		//VariableDeclarator:
		//	name=VariableDeclaratorId ("=" value=VariableInitializer)?;
		@Override public ParserRule getRule() { return rule; }
		
		//name=VariableDeclaratorId ("=" value=VariableInitializer)?
		public Group getGroup() { return cGroup; }
		
		//name=VariableDeclaratorId
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//VariableDeclaratorId
		public RuleCall getNameVariableDeclaratorIdParserRuleCall_0_0() { return cNameVariableDeclaratorIdParserRuleCall_0_0; }
		
		//("=" value=VariableInitializer)?
		public Group getGroup_1() { return cGroup_1; }
		
		//"="
		public Keyword getEqualsSignKeyword_1_0() { return cEqualsSignKeyword_1_0; }
		
		//value=VariableInitializer
		public Assignment getValueAssignment_1_1() { return cValueAssignment_1_1; }
		
		//VariableInitializer
		public RuleCall getValueVariableInitializerParserRuleCall_1_1_0() { return cValueVariableInitializerParserRuleCall_1_1_0; }
	}
	public class VariableDeclaratorIdElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.VariableDeclaratorId");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketRightSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//VariableDeclaratorId:
		//	ID "[]"*;
		@Override public ParserRule getRule() { return rule; }
		
		//ID "[]"*
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//"[]"*
		public Keyword getLeftSquareBracketRightSquareBracketKeyword_1() { return cLeftSquareBracketRightSquareBracketKeyword_1; }
	}
	public class VariableInitializerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.VariableInitializer");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cArrayInitializerParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//VariableInitializer:
		//	Expression | ArrayInitializer;
		@Override public ParserRule getRule() { return rule; }
		
		//Expression | ArrayInitializer
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_0() { return cExpressionParserRuleCall_0; }
		
		//ArrayInitializer
		public RuleCall getArrayInitializerParserRuleCall_1() { return cArrayInitializerParserRuleCall_1; }
	}
	public class MethodDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.MethodDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSignatureAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSignatureMethodHeaderParserRuleCall_0_0 = (RuleCall)cSignatureAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cBodyAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cBodyBlockParserRuleCall_1_0_0 = (RuleCall)cBodyAssignment_1_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		
		//MethodDeclaration:
		//	signature=MethodHeader (body=Block | ";");
		@Override public ParserRule getRule() { return rule; }
		
		//signature=MethodHeader (body=Block | ";")
		public Group getGroup() { return cGroup; }
		
		//signature=MethodHeader
		public Assignment getSignatureAssignment_0() { return cSignatureAssignment_0; }
		
		//MethodHeader
		public RuleCall getSignatureMethodHeaderParserRuleCall_0_0() { return cSignatureMethodHeaderParserRuleCall_0_0; }
		
		//body=Block | ";"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//body=Block
		public Assignment getBodyAssignment_1_0() { return cBodyAssignment_1_0; }
		
		//Block
		public RuleCall getBodyBlockParserRuleCall_1_0_0() { return cBodyBlockParserRuleCall_1_0_0; }
		
		//";"
		public Keyword getSemicolonKeyword_1_1() { return cSemicolonKeyword_1_1; }
	}
	public class MethodHeaderElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.MethodHeader");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cModifiersAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cModifiersMethodModifierParserRuleCall_0_0 = (RuleCall)cModifiersAssignment_0.eContents().get(0);
		private final Assignment cReturnTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cReturnTypeResultTypeParserRuleCall_1_0 = (RuleCall)cReturnTypeAssignment_1.eContents().get(0);
		private final Assignment cHeaderAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cHeaderMethodDeclaratorParserRuleCall_2_0 = (RuleCall)cHeaderAssignment_2.eContents().get(0);
		private final Assignment cThrowsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cThrowsExceptionsParserRuleCall_3_0 = (RuleCall)cThrowsAssignment_3.eContents().get(0);
		
		//MethodHeader:
		//	modifiers+=MethodModifier*
		//	returnType=ResultType header=MethodDeclarator throws=Exceptions?;
		@Override public ParserRule getRule() { return rule; }
		
		//modifiers+=MethodModifier* returnType=ResultType header=MethodDeclarator throws=Exceptions?
		public Group getGroup() { return cGroup; }
		
		//modifiers+=MethodModifier*
		public Assignment getModifiersAssignment_0() { return cModifiersAssignment_0; }
		
		//MethodModifier
		public RuleCall getModifiersMethodModifierParserRuleCall_0_0() { return cModifiersMethodModifierParserRuleCall_0_0; }
		
		//returnType=ResultType
		public Assignment getReturnTypeAssignment_1() { return cReturnTypeAssignment_1; }
		
		//ResultType
		public RuleCall getReturnTypeResultTypeParserRuleCall_1_0() { return cReturnTypeResultTypeParserRuleCall_1_0; }
		
		//header=MethodDeclarator
		public Assignment getHeaderAssignment_2() { return cHeaderAssignment_2; }
		
		//MethodDeclarator
		public RuleCall getHeaderMethodDeclaratorParserRuleCall_2_0() { return cHeaderMethodDeclaratorParserRuleCall_2_0; }
		
		//throws=Exceptions?
		public Assignment getThrowsAssignment_3() { return cThrowsAssignment_3; }
		
		//Exceptions
		public RuleCall getThrowsExceptionsParserRuleCall_3_0() { return cThrowsExceptionsParserRuleCall_3_0; }
	}
	public class ResultTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.ResultType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cVOIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ResultType:
		//	Type | VOID;
		@Override public ParserRule getRule() { return rule; }
		
		//Type | VOID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Type
		public RuleCall getTypeParserRuleCall_0() { return cTypeParserRuleCall_0; }
		
		//VOID
		public RuleCall getVOIDTerminalRuleCall_1() { return cVOIDTerminalRuleCall_1; }
	}
	public class MethodModifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.MethodModifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPUBLICTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPROTECTEDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cPRIVATETerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cSTATICTerminalRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cABSTRACTTerminalRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cFINALTerminalRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cSYNCHRONIZEDTerminalRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cNATIVETerminalRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		
		//MethodModifier:
		//	PUBLIC | PROTECTED | PRIVATE | STATIC | ABSTRACT | FINAL | SYNCHRONIZED | NATIVE;
		@Override public ParserRule getRule() { return rule; }
		
		//PUBLIC | PROTECTED | PRIVATE | STATIC | ABSTRACT | FINAL | SYNCHRONIZED | NATIVE
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PUBLIC
		public RuleCall getPUBLICTerminalRuleCall_0() { return cPUBLICTerminalRuleCall_0; }
		
		//PROTECTED
		public RuleCall getPROTECTEDTerminalRuleCall_1() { return cPROTECTEDTerminalRuleCall_1; }
		
		//PRIVATE
		public RuleCall getPRIVATETerminalRuleCall_2() { return cPRIVATETerminalRuleCall_2; }
		
		//STATIC
		public RuleCall getSTATICTerminalRuleCall_3() { return cSTATICTerminalRuleCall_3; }
		
		//ABSTRACT
		public RuleCall getABSTRACTTerminalRuleCall_4() { return cABSTRACTTerminalRuleCall_4; }
		
		//FINAL
		public RuleCall getFINALTerminalRuleCall_5() { return cFINALTerminalRuleCall_5; }
		
		//SYNCHRONIZED
		public RuleCall getSYNCHRONIZEDTerminalRuleCall_6() { return cSYNCHRONIZEDTerminalRuleCall_6; }
		
		//NATIVE
		public RuleCall getNATIVETerminalRuleCall_7() { return cNATIVETerminalRuleCall_7; }
	}
	public class MethodDeclaratorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.MethodDeclarator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cParamsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cParamsFormalParameterParserRuleCall_2_0_0 = (RuleCall)cParamsAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cParamsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cParamsFormalParameterParserRuleCall_2_1_1_0 = (RuleCall)cParamsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//MethodDeclarator:
		//	name=ID
		//	"(" (params+=FormalParameter (=> "," params+=FormalParameter)*)? ")";
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID "(" (params+=FormalParameter (=> "," params+=FormalParameter)*)? ")"
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//(params+=FormalParameter (=> "," params+=FormalParameter)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//params+=FormalParameter
		public Assignment getParamsAssignment_2_0() { return cParamsAssignment_2_0; }
		
		//FormalParameter
		public RuleCall getParamsFormalParameterParserRuleCall_2_0_0() { return cParamsFormalParameterParserRuleCall_2_0_0; }
		
		//(=> "," params+=FormalParameter)*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//=> ","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }
		
		//params+=FormalParameter
		public Assignment getParamsAssignment_2_1_1() { return cParamsAssignment_2_1_1; }
		
		//FormalParameter
		public RuleCall getParamsFormalParameterParserRuleCall_2_1_1_0() { return cParamsFormalParameterParserRuleCall_2_1_1_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class InterfaceDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.InterfaceDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cModifiersAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cModifiersInterfaceModifierParserRuleCall_0_0 = (RuleCall)cModifiersAssignment_0.eContents().get(0);
		private final RuleCall cINTERFACETerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cExtendsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExtendsExtendsInterfacesParserRuleCall_3_0 = (RuleCall)cExtendsAssignment_3.eContents().get(0);
		private final Assignment cBodyAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cBodyInterfaceBodyParserRuleCall_4_0 = (RuleCall)cBodyAssignment_4.eContents().get(0);
		
		//InterfaceDeclaration:
		//	modifiers+=InterfaceModifier*
		//	INTERFACE name=ID extends=ExtendsInterfaces? body=InterfaceBody;
		@Override public ParserRule getRule() { return rule; }
		
		//modifiers+=InterfaceModifier* INTERFACE name=ID extends=ExtendsInterfaces? body=InterfaceBody
		public Group getGroup() { return cGroup; }
		
		//modifiers+=InterfaceModifier*
		public Assignment getModifiersAssignment_0() { return cModifiersAssignment_0; }
		
		//InterfaceModifier
		public RuleCall getModifiersInterfaceModifierParserRuleCall_0_0() { return cModifiersInterfaceModifierParserRuleCall_0_0; }
		
		//INTERFACE
		public RuleCall getINTERFACETerminalRuleCall_1() { return cINTERFACETerminalRuleCall_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//extends=ExtendsInterfaces?
		public Assignment getExtendsAssignment_3() { return cExtendsAssignment_3; }
		
		//ExtendsInterfaces
		public RuleCall getExtendsExtendsInterfacesParserRuleCall_3_0() { return cExtendsExtendsInterfacesParserRuleCall_3_0; }
		
		//body=InterfaceBody
		public Assignment getBodyAssignment_4() { return cBodyAssignment_4; }
		
		//InterfaceBody
		public RuleCall getBodyInterfaceBodyParserRuleCall_4_0() { return cBodyInterfaceBodyParserRuleCall_4_0; }
	}
	public class InterfaceModifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.InterfaceModifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPUBLICTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cABSTRACTTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//InterfaceModifier:
		//	PUBLIC | ABSTRACT;
		@Override public ParserRule getRule() { return rule; }
		
		//PUBLIC | ABSTRACT
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PUBLIC
		public RuleCall getPUBLICTerminalRuleCall_0() { return cPUBLICTerminalRuleCall_0; }
		
		//ABSTRACT
		public RuleCall getABSTRACTTerminalRuleCall_1() { return cABSTRACTTerminalRuleCall_1; }
	}
	public class ExtendsInterfacesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.ExtendsInterfaces");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeywordAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cKeywordEXTENDSTerminalRuleCall_0_0 = (RuleCall)cKeywordAssignment_0.eContents().get(0);
		private final Assignment cInterfacesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cInterfacesInterfaceTypeParserRuleCall_1_0 = (RuleCall)cInterfacesAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cInterfacesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cInterfacesInterfaceTypeParserRuleCall_2_1_0 = (RuleCall)cInterfacesAssignment_2_1.eContents().get(0);
		
		//ExtendsInterfaces:
		//	keyword=EXTENDS interfaces+=InterfaceType ("," interfaces+=InterfaceType)*;
		@Override public ParserRule getRule() { return rule; }
		
		//keyword=EXTENDS interfaces+=InterfaceType ("," interfaces+=InterfaceType)*
		public Group getGroup() { return cGroup; }
		
		//keyword=EXTENDS
		public Assignment getKeywordAssignment_0() { return cKeywordAssignment_0; }
		
		//EXTENDS
		public RuleCall getKeywordEXTENDSTerminalRuleCall_0_0() { return cKeywordEXTENDSTerminalRuleCall_0_0; }
		
		//interfaces+=InterfaceType
		public Assignment getInterfacesAssignment_1() { return cInterfacesAssignment_1; }
		
		//InterfaceType
		public RuleCall getInterfacesInterfaceTypeParserRuleCall_1_0() { return cInterfacesInterfaceTypeParserRuleCall_1_0; }
		
		//("," interfaces+=InterfaceType)*
		public Group getGroup_2() { return cGroup_2; }
		
		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//interfaces+=InterfaceType
		public Assignment getInterfacesAssignment_2_1() { return cInterfacesAssignment_2_1; }
		
		//InterfaceType
		public RuleCall getInterfacesInterfaceTypeParserRuleCall_2_1_0() { return cInterfacesInterfaceTypeParserRuleCall_2_1_0; }
	}
	public class InterfaceBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.InterfaceBody");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDeclarationsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDeclarationsInterfaceMemberDeclarationParserRuleCall_1_0 = (RuleCall)cDeclarationsAssignment_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//InterfaceBody:
		//	"{" declarations+=InterfaceMemberDeclaration* "}";
		@Override public ParserRule getRule() { return rule; }
		
		//"{" declarations+=InterfaceMemberDeclaration* "}"
		public Group getGroup() { return cGroup; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }
		
		//declarations+=InterfaceMemberDeclaration*
		public Assignment getDeclarationsAssignment_1() { return cDeclarationsAssignment_1; }
		
		//InterfaceMemberDeclaration
		public RuleCall getDeclarationsInterfaceMemberDeclarationParserRuleCall_1_0() { return cDeclarationsInterfaceMemberDeclarationParserRuleCall_1_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_2() { return cRightCurlyBracketKeyword_2; }
	}
	public class InterfaceMemberDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.InterfaceMemberDeclaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cConstantDeclarationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAbstractMethodDeclarationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//InterfaceMemberDeclaration:
		//	ConstantDeclaration | AbstractMethodDeclaration;
		@Override public ParserRule getRule() { return rule; }
		
		//ConstantDeclaration | AbstractMethodDeclaration
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ConstantDeclaration
		public RuleCall getConstantDeclarationParserRuleCall_0() { return cConstantDeclarationParserRuleCall_0; }
		
		//AbstractMethodDeclaration
		public RuleCall getAbstractMethodDeclarationParserRuleCall_1() { return cAbstractMethodDeclarationParserRuleCall_1; }
	}
	public class ConstantDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.ConstantDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cModifiersAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cModifiersConstantModifiersParserRuleCall_0_0 = (RuleCall)cModifiersAssignment_0.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeTypeParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cConstantAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConstantVariableDeclaratorParserRuleCall_2_0 = (RuleCall)cConstantAssignment_2.eContents().get(0);
		
		//ConstantDeclaration:
		//	modifiers+=ConstantModifiers* type=Type constant=VariableDeclarator;
		@Override public ParserRule getRule() { return rule; }
		
		//modifiers+=ConstantModifiers* type=Type constant=VariableDeclarator
		public Group getGroup() { return cGroup; }
		
		//modifiers+=ConstantModifiers*
		public Assignment getModifiersAssignment_0() { return cModifiersAssignment_0; }
		
		//ConstantModifiers
		public RuleCall getModifiersConstantModifiersParserRuleCall_0_0() { return cModifiersConstantModifiersParserRuleCall_0_0; }
		
		//type=Type
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_1_0() { return cTypeTypeParserRuleCall_1_0; }
		
		//constant=VariableDeclarator
		public Assignment getConstantAssignment_2() { return cConstantAssignment_2; }
		
		//VariableDeclarator
		public RuleCall getConstantVariableDeclaratorParserRuleCall_2_0() { return cConstantVariableDeclaratorParserRuleCall_2_0; }
	}
	public class ConstantModifiersElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.ConstantModifiers");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPUBLICTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSTATICTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cFINALTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//ConstantModifiers:
		//	PUBLIC | STATIC | FINAL;
		@Override public ParserRule getRule() { return rule; }
		
		//PUBLIC | STATIC | FINAL
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PUBLIC
		public RuleCall getPUBLICTerminalRuleCall_0() { return cPUBLICTerminalRuleCall_0; }
		
		//STATIC
		public RuleCall getSTATICTerminalRuleCall_1() { return cSTATICTerminalRuleCall_1; }
		
		//FINAL
		public RuleCall getFINALTerminalRuleCall_2() { return cFINALTerminalRuleCall_2; }
	}
	public class AbstractMethodDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.AbstractMethodDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cModifiersAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cModifiersAbstractMethodModifierParserRuleCall_0_0 = (RuleCall)cModifiersAssignment_0.eContents().get(0);
		private final Assignment cReturnTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cReturnTypeResultTypeParserRuleCall_1_0 = (RuleCall)cReturnTypeAssignment_1.eContents().get(0);
		private final Assignment cHeaderAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cHeaderMethodDeclaratorParserRuleCall_2_0 = (RuleCall)cHeaderAssignment_2.eContents().get(0);
		private final Assignment cThrowsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cThrowsExceptionsParserRuleCall_3_0 = (RuleCall)cThrowsAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//AbstractMethodDeclaration:
		//	modifiers+=AbstractMethodModifier*
		//	returnType=ResultType header=MethodDeclarator throws=Exceptions? ";";
		@Override public ParserRule getRule() { return rule; }
		
		//modifiers+=AbstractMethodModifier* returnType=ResultType header=MethodDeclarator throws=Exceptions? ";"
		public Group getGroup() { return cGroup; }
		
		//modifiers+=AbstractMethodModifier*
		public Assignment getModifiersAssignment_0() { return cModifiersAssignment_0; }
		
		//AbstractMethodModifier
		public RuleCall getModifiersAbstractMethodModifierParserRuleCall_0_0() { return cModifiersAbstractMethodModifierParserRuleCall_0_0; }
		
		//returnType=ResultType
		public Assignment getReturnTypeAssignment_1() { return cReturnTypeAssignment_1; }
		
		//ResultType
		public RuleCall getReturnTypeResultTypeParserRuleCall_1_0() { return cReturnTypeResultTypeParserRuleCall_1_0; }
		
		//header=MethodDeclarator
		public Assignment getHeaderAssignment_2() { return cHeaderAssignment_2; }
		
		//MethodDeclarator
		public RuleCall getHeaderMethodDeclaratorParserRuleCall_2_0() { return cHeaderMethodDeclaratorParserRuleCall_2_0; }
		
		//throws=Exceptions?
		public Assignment getThrowsAssignment_3() { return cThrowsAssignment_3; }
		
		//Exceptions
		public RuleCall getThrowsExceptionsParserRuleCall_3_0() { return cThrowsExceptionsParserRuleCall_3_0; }
		
		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class AbstractMethodModifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.AbstractMethodModifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPUBLICTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cABSTRACTTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//AbstractMethodModifier:
		//	PUBLIC | ABSTRACT;
		@Override public ParserRule getRule() { return rule; }
		
		//PUBLIC | ABSTRACT
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PUBLIC
		public RuleCall getPUBLICTerminalRuleCall_0() { return cPUBLICTerminalRuleCall_0; }
		
		//ABSTRACT
		public RuleCall getABSTRACTTerminalRuleCall_1() { return cABSTRACTTerminalRuleCall_1; }
	}
	public class ArrayInitializerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.ArrayInitializer");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cValuesAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cValuesVariableInitializerParserRuleCall_1_0_0 = (RuleCall)cValuesAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cValuesAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cValuesVariableInitializerParserRuleCall_1_1_1_0 = (RuleCall)cValuesAssignment_1_1_1.eContents().get(0);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ArrayInitializer:
		//	"{" (values+=VariableInitializer (=> "," values+=VariableInitializer)*)? ","? "}";
		@Override public ParserRule getRule() { return rule; }
		
		//"{" (values+=VariableInitializer (=> "," values+=VariableInitializer)*)? ","? "}"
		public Group getGroup() { return cGroup; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }
		
		//(values+=VariableInitializer (=> "," values+=VariableInitializer)*)?
		public Group getGroup_1() { return cGroup_1; }
		
		//values+=VariableInitializer
		public Assignment getValuesAssignment_1_0() { return cValuesAssignment_1_0; }
		
		//VariableInitializer
		public RuleCall getValuesVariableInitializerParserRuleCall_1_0_0() { return cValuesVariableInitializerParserRuleCall_1_0_0; }
		
		//(=> "," values+=VariableInitializer)*
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//=> ","
		public Keyword getCommaKeyword_1_1_0() { return cCommaKeyword_1_1_0; }
		
		//values+=VariableInitializer
		public Assignment getValuesAssignment_1_1_1() { return cValuesAssignment_1_1_1; }
		
		//VariableInitializer
		public RuleCall getValuesVariableInitializerParserRuleCall_1_1_1_0() { return cValuesVariableInitializerParserRuleCall_1_1_1_0; }
		
		//","?
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.Type");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cPrimitiveTypeParserRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cReferenceTypeParserRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final RuleCall cArrayTypeParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//Type:
		//	(PrimitiveType | ReferenceType) ArrayType*;
		@Override public ParserRule getRule() { return rule; }
		
		//(PrimitiveType | ReferenceType) ArrayType*
		public Group getGroup() { return cGroup; }
		
		//PrimitiveType | ReferenceType
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//PrimitiveType
		public RuleCall getPrimitiveTypeParserRuleCall_0_0() { return cPrimitiveTypeParserRuleCall_0_0; }
		
		//ReferenceType
		public RuleCall getReferenceTypeParserRuleCall_0_1() { return cReferenceTypeParserRuleCall_0_1; }
		
		//ArrayType*
		public RuleCall getArrayTypeParserRuleCall_1() { return cArrayTypeParserRuleCall_1; }
	}
	public class PrimitiveTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.PrimitiveType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNumericTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBOOLEANTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//PrimitiveType:
		//	NumericType | BOOLEAN;
		@Override public ParserRule getRule() { return rule; }
		
		//NumericType | BOOLEAN
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//NumericType
		public RuleCall getNumericTypeParserRuleCall_0() { return cNumericTypeParserRuleCall_0; }
		
		//BOOLEAN
		public RuleCall getBOOLEANTerminalRuleCall_1() { return cBOOLEANTerminalRuleCall_1; }
	}
	public class NumericTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.NumericType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIntegralTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFloatingTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//NumericType:
		//	IntegralType | FloatingType;
		@Override public ParserRule getRule() { return rule; }
		
		//IntegralType | FloatingType
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//IntegralType
		public RuleCall getIntegralTypeParserRuleCall_0() { return cIntegralTypeParserRuleCall_0; }
		
		//FloatingType
		public RuleCall getFloatingTypeParserRuleCall_1() { return cFloatingTypeParserRuleCall_1; }
	}
	public class IntegralTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.IntegralType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBYTETerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSHORTTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cLONGTerminalRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cCHARTerminalRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//IntegralType:
		//	BYTE | SHORT | INT | LONG | CHAR;
		@Override public ParserRule getRule() { return rule; }
		
		//BYTE | SHORT | INT | LONG | CHAR
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//BYTE
		public RuleCall getBYTETerminalRuleCall_0() { return cBYTETerminalRuleCall_0; }
		
		//SHORT
		public RuleCall getSHORTTerminalRuleCall_1() { return cSHORTTerminalRuleCall_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_2() { return cINTTerminalRuleCall_2; }
		
		//LONG
		public RuleCall getLONGTerminalRuleCall_3() { return cLONGTerminalRuleCall_3; }
		
		//CHAR
		public RuleCall getCHARTerminalRuleCall_4() { return cCHARTerminalRuleCall_4; }
	}
	public class FloatingTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.FloatingType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFLOATTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDOUBLETerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//FloatingType:
		//	FLOAT | DOUBLE;
		@Override public ParserRule getRule() { return rule; }
		
		//FLOAT | DOUBLE
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//FLOAT
		public RuleCall getFLOATTerminalRuleCall_0() { return cFLOATTerminalRuleCall_0; }
		
		//DOUBLE
		public RuleCall getDOUBLETerminalRuleCall_1() { return cDOUBLETerminalRuleCall_1; }
	}
	public class ReferenceTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.ReferenceType");
		private final RuleCall cTypeNameParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//ReferenceType:
		//	TypeName;
		@Override public ParserRule getRule() { return rule; }
		
		//TypeName
		public RuleCall getTypeNameParserRuleCall() { return cTypeNameParserRuleCall; }
	}
	public class ClassTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.ClassType");
		private final RuleCall cTypeNameParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//ClassType:
		//	TypeName;
		@Override public ParserRule getRule() { return rule; }
		
		//TypeName
		public RuleCall getTypeNameParserRuleCall() { return cTypeNameParserRuleCall; }
	}
	public class InterfaceTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.InterfaceType");
		private final RuleCall cTypeNameParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//InterfaceType:
		//	TypeName;
		@Override public ParserRule getRule() { return rule; }
		
		//TypeName
		public RuleCall getTypeNameParserRuleCall() { return cTypeNameParserRuleCall; }
	}
	public class ArrayTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.ArrayType");
		private final Keyword cLeftSquareBracketRightSquareBracketKeyword = (Keyword)rule.eContents().get(1);
		
		//ArrayType:
		//	"[]";
		@Override public ParserRule getRule() { return rule; }
		
		//"[]"
		public Keyword getLeftSquareBracketRightSquareBracketKeyword() { return cLeftSquareBracketRightSquareBracketKeyword; }
	}
	public class BlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.Block");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDeclarationsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDeclarationsBlockStatementParserRuleCall_1_0 = (RuleCall)cDeclarationsAssignment_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Block:
		//	"{" declarations+=BlockStatement* "}";
		@Override public ParserRule getRule() { return rule; }
		
		//"{" declarations+=BlockStatement* "}"
		public Group getGroup() { return cGroup; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }
		
		//declarations+=BlockStatement*
		public Assignment getDeclarationsAssignment_1() { return cDeclarationsAssignment_1; }
		
		//BlockStatement
		public RuleCall getDeclarationsBlockStatementParserRuleCall_1_0() { return cDeclarationsBlockStatementParserRuleCall_1_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_2() { return cRightCurlyBracketKeyword_2; }
	}
	public class BlockStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.BlockStatement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cLocalVariableDeclarationParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final RuleCall cStatementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//BlockStatement:
		//	LocalVariableDeclaration ";" | Statement;
		@Override public ParserRule getRule() { return rule; }
		
		//LocalVariableDeclaration ";" | Statement
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//LocalVariableDeclaration ";"
		public Group getGroup_0() { return cGroup_0; }
		
		//LocalVariableDeclaration
		public RuleCall getLocalVariableDeclarationParserRuleCall_0_0() { return cLocalVariableDeclarationParserRuleCall_0_0; }
		
		//";"
		public Keyword getSemicolonKeyword_0_1() { return cSemicolonKeyword_0_1; }
		
		//Statement
		public RuleCall getStatementParserRuleCall_1() { return cStatementParserRuleCall_1; }
	}
	public class LocalVariableDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.LocalVariableDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeTypeParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cVariablesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVariablesVariableDeclaratorParserRuleCall_1_0 = (RuleCall)cVariablesAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cVariablesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cVariablesVariableDeclaratorParserRuleCall_2_1_0 = (RuleCall)cVariablesAssignment_2_1.eContents().get(0);
		
		//LocalVariableDeclaration:
		//	type=Type variables+=VariableDeclarator (=> "," variables+=VariableDeclarator)*;
		@Override public ParserRule getRule() { return rule; }
		
		//type=Type variables+=VariableDeclarator (=> "," variables+=VariableDeclarator)*
		public Group getGroup() { return cGroup; }
		
		//type=Type
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_0_0() { return cTypeTypeParserRuleCall_0_0; }
		
		//variables+=VariableDeclarator
		public Assignment getVariablesAssignment_1() { return cVariablesAssignment_1; }
		
		//VariableDeclarator
		public RuleCall getVariablesVariableDeclaratorParserRuleCall_1_0() { return cVariablesVariableDeclaratorParserRuleCall_1_0; }
		
		//(=> "," variables+=VariableDeclarator)*
		public Group getGroup_2() { return cGroup_2; }
		
		//=> ","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//variables+=VariableDeclarator
		public Assignment getVariablesAssignment_2_1() { return cVariablesAssignment_2_1; }
		
		//VariableDeclarator
		public RuleCall getVariablesVariableDeclaratorParserRuleCall_2_1_0() { return cVariablesVariableDeclaratorParserRuleCall_2_1_0; }
	}
	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.Statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEmptyStatementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLabeledStatementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cIfStatementParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cWhileStatementParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cForStatementParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cBlockParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final RuleCall cStatementExpressionParserRuleCall_6_0 = (RuleCall)cGroup_6.eContents().get(0);
		private final Keyword cSemicolonKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final RuleCall cSwitchStatementParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cDoStatementParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cBreakStatementParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cContinueStatementParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cReturnStatementParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		private final RuleCall cSynchronizedStatementParserRuleCall_12 = (RuleCall)cAlternatives.eContents().get(12);
		private final RuleCall cThrowsStatementParserRuleCall_13 = (RuleCall)cAlternatives.eContents().get(13);
		private final RuleCall cTryStatementParserRuleCall_14 = (RuleCall)cAlternatives.eContents().get(14);
		
		//Statement:
		//	EmptyStatement
		//	| LabeledStatement
		//	| IfStatement
		//	| WhileStatement
		//	| ForStatement
		//	| Block
		//	| StatementExpression ";" | SwitchStatement
		//	| DoStatement
		//	| BreakStatement
		//	| ContinueStatement
		//	| ReturnStatement
		//	| SynchronizedStatement
		//	| ThrowsStatement
		//	| TryStatement;
		@Override public ParserRule getRule() { return rule; }
		
		//EmptyStatement | LabeledStatement | IfStatement | WhileStatement | ForStatement | Block | StatementExpression ";" |
		//SwitchStatement | DoStatement | BreakStatement | ContinueStatement | ReturnStatement | SynchronizedStatement |
		//ThrowsStatement | TryStatement
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//EmptyStatement
		public RuleCall getEmptyStatementParserRuleCall_0() { return cEmptyStatementParserRuleCall_0; }
		
		//LabeledStatement
		public RuleCall getLabeledStatementParserRuleCall_1() { return cLabeledStatementParserRuleCall_1; }
		
		//IfStatement
		public RuleCall getIfStatementParserRuleCall_2() { return cIfStatementParserRuleCall_2; }
		
		//WhileStatement
		public RuleCall getWhileStatementParserRuleCall_3() { return cWhileStatementParserRuleCall_3; }
		
		//ForStatement
		public RuleCall getForStatementParserRuleCall_4() { return cForStatementParserRuleCall_4; }
		
		//Block
		public RuleCall getBlockParserRuleCall_5() { return cBlockParserRuleCall_5; }
		
		//StatementExpression ";"
		public Group getGroup_6() { return cGroup_6; }
		
		//StatementExpression
		public RuleCall getStatementExpressionParserRuleCall_6_0() { return cStatementExpressionParserRuleCall_6_0; }
		
		//";"
		public Keyword getSemicolonKeyword_6_1() { return cSemicolonKeyword_6_1; }
		
		//SwitchStatement
		public RuleCall getSwitchStatementParserRuleCall_7() { return cSwitchStatementParserRuleCall_7; }
		
		//DoStatement
		public RuleCall getDoStatementParserRuleCall_8() { return cDoStatementParserRuleCall_8; }
		
		//BreakStatement
		public RuleCall getBreakStatementParserRuleCall_9() { return cBreakStatementParserRuleCall_9; }
		
		//ContinueStatement
		public RuleCall getContinueStatementParserRuleCall_10() { return cContinueStatementParserRuleCall_10; }
		
		//ReturnStatement
		public RuleCall getReturnStatementParserRuleCall_11() { return cReturnStatementParserRuleCall_11; }
		
		//SynchronizedStatement
		public RuleCall getSynchronizedStatementParserRuleCall_12() { return cSynchronizedStatementParserRuleCall_12; }
		
		//ThrowsStatement
		public RuleCall getThrowsStatementParserRuleCall_13() { return cThrowsStatementParserRuleCall_13; }
		
		//TryStatement
		public RuleCall getTryStatementParserRuleCall_14() { return cTryStatementParserRuleCall_14; }
	}
	public class EmptyStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.EmptyStatement");
		private final Keyword cSemicolonKeyword = (Keyword)rule.eContents().get(1);
		
		//EmptyStatement:
		//	";";
		@Override public ParserRule getRule() { return rule; }
		
		//";"
		public Keyword getSemicolonKeyword() { return cSemicolonKeyword; }
	}
	public class LabeledStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.LabeledStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLabelAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLabelIDTerminalRuleCall_0_0 = (RuleCall)cLabelAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStatementAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStatementStatementParserRuleCall_2_0 = (RuleCall)cStatementAssignment_2.eContents().get(0);
		
		//LabeledStatement:
		//	label=ID ":" statement=Statement;
		@Override public ParserRule getRule() { return rule; }
		
		//label=ID ":" statement=Statement
		public Group getGroup() { return cGroup; }
		
		//label=ID
		public Assignment getLabelAssignment_0() { return cLabelAssignment_0; }
		
		//ID
		public RuleCall getLabelIDTerminalRuleCall_0_0() { return cLabelIDTerminalRuleCall_0_0; }
		
		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//statement=Statement
		public Assignment getStatementAssignment_2() { return cStatementAssignment_2; }
		
		//Statement
		public RuleCall getStatementStatementParserRuleCall_2_0() { return cStatementStatementParserRuleCall_2_0; }
	}
	public class StatementExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.StatementExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAssignmentParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPreIncrementExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cPreDecrementExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cPostfixExpressionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cMethodInvocationParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cClassInstanceCreationExpressionParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//StatementExpression:
		//	=> Assignment
		//	| PreIncrementExpression
		//	| PreDecrementExpression
		//	| => PostfixExpression
		//	| => MethodInvocation
		//	| => ClassInstanceCreationExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//=> Assignment | PreIncrementExpression | PreDecrementExpression | => PostfixExpression | => MethodInvocation | =>
		//ClassInstanceCreationExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//=> Assignment
		public RuleCall getAssignmentParserRuleCall_0() { return cAssignmentParserRuleCall_0; }
		
		//PreIncrementExpression
		public RuleCall getPreIncrementExpressionParserRuleCall_1() { return cPreIncrementExpressionParserRuleCall_1; }
		
		//PreDecrementExpression
		public RuleCall getPreDecrementExpressionParserRuleCall_2() { return cPreDecrementExpressionParserRuleCall_2; }
		
		//=> PostfixExpression
		public RuleCall getPostfixExpressionParserRuleCall_3() { return cPostfixExpressionParserRuleCall_3; }
		
		//=> MethodInvocation
		public RuleCall getMethodInvocationParserRuleCall_4() { return cMethodInvocationParserRuleCall_4; }
		
		//=> ClassInstanceCreationExpression
		public RuleCall getClassInstanceCreationExpressionParserRuleCall_5() { return cClassInstanceCreationExpressionParserRuleCall_5; }
	}
	public class IfStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.IfStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIFTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cConditionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConditionExpressionParserRuleCall_2_0 = (RuleCall)cConditionAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cThenAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cThenStatementParserRuleCall_4_0 = (RuleCall)cThenAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final RuleCall cELSETerminalRuleCall_5_0 = (RuleCall)cGroup_5.eContents().get(0);
		private final Assignment cElseAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cElseStatementParserRuleCall_5_1_0 = (RuleCall)cElseAssignment_5_1.eContents().get(0);
		
		//IfStatement:
		//	IF "(" condition?=Expression ")" then=Statement (=> ELSE else=Statement)?;
		@Override public ParserRule getRule() { return rule; }
		
		//IF "(" condition?=Expression ")" then=Statement (=> ELSE else=Statement)?
		public Group getGroup() { return cGroup; }
		
		//IF
		public RuleCall getIFTerminalRuleCall_0() { return cIFTerminalRuleCall_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//condition?=Expression
		public Assignment getConditionAssignment_2() { return cConditionAssignment_2; }
		
		//Expression
		public RuleCall getConditionExpressionParserRuleCall_2_0() { return cConditionExpressionParserRuleCall_2_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//then=Statement
		public Assignment getThenAssignment_4() { return cThenAssignment_4; }
		
		//Statement
		public RuleCall getThenStatementParserRuleCall_4_0() { return cThenStatementParserRuleCall_4_0; }
		
		//(=> ELSE else=Statement)?
		public Group getGroup_5() { return cGroup_5; }
		
		//=> ELSE
		public RuleCall getELSETerminalRuleCall_5_0() { return cELSETerminalRuleCall_5_0; }
		
		//else=Statement
		public Assignment getElseAssignment_5_1() { return cElseAssignment_5_1; }
		
		//Statement
		public RuleCall getElseStatementParserRuleCall_5_1_0() { return cElseStatementParserRuleCall_5_1_0; }
	}
	public class SwitchStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.SwitchStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cSWITCHTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Group cGroup_5_0 = (Group)cAlternatives_5.eContents().get(0);
		private final RuleCall cCASETerminalRuleCall_5_0_0 = (RuleCall)cGroup_5_0.eContents().get(0);
		private final Assignment cConstantsAssignment_5_0_1 = (Assignment)cGroup_5_0.eContents().get(1);
		private final RuleCall cConstantsConstantExpressionParserRuleCall_5_0_1_0 = (RuleCall)cConstantsAssignment_5_0_1.eContents().get(0);
		private final Keyword cColonKeyword_5_0_2 = (Keyword)cGroup_5_0.eContents().get(2);
		private final Group cGroup_5_1 = (Group)cAlternatives_5.eContents().get(1);
		private final RuleCall cDEFAULTTerminalRuleCall_5_1_0 = (RuleCall)cGroup_5_1.eContents().get(0);
		private final Keyword cColonKeyword_5_1_1 = (Keyword)cGroup_5_1.eContents().get(1);
		private final Assignment cStatementsAssignment_5_2 = (Assignment)cAlternatives_5.eContents().get(2);
		private final RuleCall cStatementsBlockStatementParserRuleCall_5_2_0 = (RuleCall)cStatementsAssignment_5_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//SwitchStatement:
		//	SWITCH "(" expression=Expression ")" "{" (CASE constants+=ConstantExpression ":" | DEFAULT ":" |
		//	statements+=BlockStatement)* "}";
		@Override public ParserRule getRule() { return rule; }
		
		//SWITCH "(" expression=Expression ")" "{" (CASE constants+=ConstantExpression ":" | DEFAULT ":" |
		//statements+=BlockStatement)* "}"
		public Group getGroup() { return cGroup; }
		
		//SWITCH
		public RuleCall getSWITCHTerminalRuleCall_0() { return cSWITCHTerminalRuleCall_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_2_0() { return cExpressionExpressionParserRuleCall_2_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//(CASE constants+=ConstantExpression ":" | DEFAULT ":" | statements+=BlockStatement)*
		public Alternatives getAlternatives_5() { return cAlternatives_5; }
		
		//CASE constants+=ConstantExpression ":"
		public Group getGroup_5_0() { return cGroup_5_0; }
		
		//CASE
		public RuleCall getCASETerminalRuleCall_5_0_0() { return cCASETerminalRuleCall_5_0_0; }
		
		//constants+=ConstantExpression
		public Assignment getConstantsAssignment_5_0_1() { return cConstantsAssignment_5_0_1; }
		
		//ConstantExpression
		public RuleCall getConstantsConstantExpressionParserRuleCall_5_0_1_0() { return cConstantsConstantExpressionParserRuleCall_5_0_1_0; }
		
		//":"
		public Keyword getColonKeyword_5_0_2() { return cColonKeyword_5_0_2; }
		
		//DEFAULT ":"
		public Group getGroup_5_1() { return cGroup_5_1; }
		
		//DEFAULT
		public RuleCall getDEFAULTTerminalRuleCall_5_1_0() { return cDEFAULTTerminalRuleCall_5_1_0; }
		
		//":"
		public Keyword getColonKeyword_5_1_1() { return cColonKeyword_5_1_1; }
		
		//statements+=BlockStatement
		public Assignment getStatementsAssignment_5_2() { return cStatementsAssignment_5_2; }
		
		//BlockStatement
		public RuleCall getStatementsBlockStatementParserRuleCall_5_2_0() { return cStatementsBlockStatementParserRuleCall_5_2_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class WhileStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.WhileStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cWHILETerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cConditionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConditionExpressionParserRuleCall_2_0 = (RuleCall)cConditionAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cStatementAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cStatementStatementParserRuleCall_4_0 = (RuleCall)cStatementAssignment_4.eContents().get(0);
		
		//WhileStatement:
		//	WHILE "(" condition?=Expression ")" statement=Statement;
		@Override public ParserRule getRule() { return rule; }
		
		//WHILE "(" condition?=Expression ")" statement=Statement
		public Group getGroup() { return cGroup; }
		
		//WHILE
		public RuleCall getWHILETerminalRuleCall_0() { return cWHILETerminalRuleCall_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//condition?=Expression
		public Assignment getConditionAssignment_2() { return cConditionAssignment_2; }
		
		//Expression
		public RuleCall getConditionExpressionParserRuleCall_2_0() { return cConditionExpressionParserRuleCall_2_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//statement=Statement
		public Assignment getStatementAssignment_4() { return cStatementAssignment_4; }
		
		//Statement
		public RuleCall getStatementStatementParserRuleCall_4_0() { return cStatementStatementParserRuleCall_4_0; }
	}
	public class DoStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.DoStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cDOTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cStatementAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStatementStatementParserRuleCall_1_0 = (RuleCall)cStatementAssignment_1.eContents().get(0);
		private final RuleCall cWHILETerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cConditionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cConditionExpressionParserRuleCall_4_0 = (RuleCall)cConditionAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//DoStatement:
		//	DO statement=Statement WHILE "(" condition?=Expression ")" ";";
		@Override public ParserRule getRule() { return rule; }
		
		//DO statement=Statement WHILE "(" condition?=Expression ")" ";"
		public Group getGroup() { return cGroup; }
		
		//DO
		public RuleCall getDOTerminalRuleCall_0() { return cDOTerminalRuleCall_0; }
		
		//statement=Statement
		public Assignment getStatementAssignment_1() { return cStatementAssignment_1; }
		
		//Statement
		public RuleCall getStatementStatementParserRuleCall_1_0() { return cStatementStatementParserRuleCall_1_0; }
		
		//WHILE
		public RuleCall getWHILETerminalRuleCall_2() { return cWHILETerminalRuleCall_2; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//condition?=Expression
		public Assignment getConditionAssignment_4() { return cConditionAssignment_4; }
		
		//Expression
		public RuleCall getConditionExpressionParserRuleCall_4_0() { return cConditionExpressionParserRuleCall_4_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
		
		//";"
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }
	}
	public class ForStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.ForStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cFORTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cInitExprAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cInitExprForInitParserRuleCall_2_0 = (RuleCall)cInitExprAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cConditionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cConditionExpressionParserRuleCall_4_0 = (RuleCall)cConditionAssignment_4.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cUpdateExprAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cUpdateExprForUpdateParserRuleCall_6_0 = (RuleCall)cUpdateExprAssignment_6.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cStatementAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cStatementStatementParserRuleCall_8_0 = (RuleCall)cStatementAssignment_8.eContents().get(0);
		
		//ForStatement:
		//	FOR "(" initExpr=ForInit? ";" condition?=Expression? ";" updateExpr=ForUpdate? ")"
		//	statement=Statement;
		@Override public ParserRule getRule() { return rule; }
		
		//FOR "(" initExpr=ForInit? ";" condition?=Expression? ";" updateExpr=ForUpdate? ")" statement=Statement
		public Group getGroup() { return cGroup; }
		
		//FOR
		public RuleCall getFORTerminalRuleCall_0() { return cFORTerminalRuleCall_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//initExpr=ForInit?
		public Assignment getInitExprAssignment_2() { return cInitExprAssignment_2; }
		
		//ForInit
		public RuleCall getInitExprForInitParserRuleCall_2_0() { return cInitExprForInitParserRuleCall_2_0; }
		
		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
		
		//condition?=Expression?
		public Assignment getConditionAssignment_4() { return cConditionAssignment_4; }
		
		//Expression
		public RuleCall getConditionExpressionParserRuleCall_4_0() { return cConditionExpressionParserRuleCall_4_0; }
		
		//";"
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
		
		//updateExpr=ForUpdate?
		public Assignment getUpdateExprAssignment_6() { return cUpdateExprAssignment_6; }
		
		//ForUpdate
		public RuleCall getUpdateExprForUpdateParserRuleCall_6_0() { return cUpdateExprForUpdateParserRuleCall_6_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
		
		//statement=Statement
		public Assignment getStatementAssignment_8() { return cStatementAssignment_8; }
		
		//Statement
		public RuleCall getStatementStatementParserRuleCall_8_0() { return cStatementStatementParserRuleCall_8_0; }
	}
	public class ForInitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.ForInit");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cExpressionsAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cExpressionsStatementExpressionParserRuleCall_0_0_0 = (RuleCall)cExpressionsAssignment_0_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Keyword cCommaKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final Assignment cExpressionsAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final RuleCall cExpressionsStatementExpressionParserRuleCall_0_1_1_0 = (RuleCall)cExpressionsAssignment_0_1_1.eContents().get(0);
		private final Assignment cLocalVariableAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cLocalVariableLocalVariableDeclarationParserRuleCall_1_0 = (RuleCall)cLocalVariableAssignment_1.eContents().get(0);
		
		//ForInit:
		//	expressions+=StatementExpression (=> "," expressions+=StatementExpression)* | localVariable=LocalVariableDeclaration;
		@Override public ParserRule getRule() { return rule; }
		
		//expressions+=StatementExpression (=> "," expressions+=StatementExpression)* | localVariable=LocalVariableDeclaration
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//expressions+=StatementExpression (=> "," expressions+=StatementExpression)*
		public Group getGroup_0() { return cGroup_0; }
		
		//expressions+=StatementExpression
		public Assignment getExpressionsAssignment_0_0() { return cExpressionsAssignment_0_0; }
		
		//StatementExpression
		public RuleCall getExpressionsStatementExpressionParserRuleCall_0_0_0() { return cExpressionsStatementExpressionParserRuleCall_0_0_0; }
		
		//(=> "," expressions+=StatementExpression)*
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//=> ","
		public Keyword getCommaKeyword_0_1_0() { return cCommaKeyword_0_1_0; }
		
		//expressions+=StatementExpression
		public Assignment getExpressionsAssignment_0_1_1() { return cExpressionsAssignment_0_1_1; }
		
		//StatementExpression
		public RuleCall getExpressionsStatementExpressionParserRuleCall_0_1_1_0() { return cExpressionsStatementExpressionParserRuleCall_0_1_1_0; }
		
		//localVariable=LocalVariableDeclaration
		public Assignment getLocalVariableAssignment_1() { return cLocalVariableAssignment_1; }
		
		//LocalVariableDeclaration
		public RuleCall getLocalVariableLocalVariableDeclarationParserRuleCall_1_0() { return cLocalVariableLocalVariableDeclarationParserRuleCall_1_0; }
	}
	public class ForUpdateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.ForUpdate");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExpressionsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cExpressionsStatementExpressionParserRuleCall_0_0 = (RuleCall)cExpressionsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cExpressionsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExpressionsStatementExpressionParserRuleCall_1_1_0 = (RuleCall)cExpressionsAssignment_1_1.eContents().get(0);
		
		//ForUpdate:
		//	expressions+=StatementExpression (=> "," expressions+=StatementExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//expressions+=StatementExpression (=> "," expressions+=StatementExpression)*
		public Group getGroup() { return cGroup; }
		
		//expressions+=StatementExpression
		public Assignment getExpressionsAssignment_0() { return cExpressionsAssignment_0; }
		
		//StatementExpression
		public RuleCall getExpressionsStatementExpressionParserRuleCall_0_0() { return cExpressionsStatementExpressionParserRuleCall_0_0; }
		
		//(=> "," expressions+=StatementExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//=> ","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//expressions+=StatementExpression
		public Assignment getExpressionsAssignment_1_1() { return cExpressionsAssignment_1_1; }
		
		//StatementExpression
		public RuleCall getExpressionsStatementExpressionParserRuleCall_1_1_0() { return cExpressionsStatementExpressionParserRuleCall_1_1_0; }
	}
	public class BreakStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.BreakStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cBREAKTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cReferenceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cReferenceIDTerminalRuleCall_1_0 = (RuleCall)cReferenceAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//BreakStatement:
		//	BREAK reference=ID? ";";
		@Override public ParserRule getRule() { return rule; }
		
		//BREAK reference=ID? ";"
		public Group getGroup() { return cGroup; }
		
		//BREAK
		public RuleCall getBREAKTerminalRuleCall_0() { return cBREAKTerminalRuleCall_0; }
		
		//reference=ID?
		public Assignment getReferenceAssignment_1() { return cReferenceAssignment_1; }
		
		//ID
		public RuleCall getReferenceIDTerminalRuleCall_1_0() { return cReferenceIDTerminalRuleCall_1_0; }
		
		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class ContinueStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.ContinueStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cCONTINUETerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cReferenceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cReferenceIDTerminalRuleCall_1_0 = (RuleCall)cReferenceAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ContinueStatement:
		//	CONTINUE reference=ID? ";";
		@Override public ParserRule getRule() { return rule; }
		
		//CONTINUE reference=ID? ";"
		public Group getGroup() { return cGroup; }
		
		//CONTINUE
		public RuleCall getCONTINUETerminalRuleCall_0() { return cCONTINUETerminalRuleCall_0; }
		
		//reference=ID?
		public Assignment getReferenceAssignment_1() { return cReferenceAssignment_1; }
		
		//ID
		public RuleCall getReferenceIDTerminalRuleCall_1_0() { return cReferenceIDTerminalRuleCall_1_0; }
		
		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class ReturnStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.ReturnStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cRETURNTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ReturnStatement:
		//	RETURN expression=Expression? ";";
		@Override public ParserRule getRule() { return rule; }
		
		//RETURN expression=Expression? ";"
		public Group getGroup() { return cGroup; }
		
		//RETURN
		public RuleCall getRETURNTerminalRuleCall_0() { return cRETURNTerminalRuleCall_0; }
		
		//expression=Expression?
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_0() { return cExpressionExpressionParserRuleCall_1_0; }
		
		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class ThrowsStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.ThrowsStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cTHROWTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ThrowsStatement:
		//	THROW expression=Expression ";";
		@Override public ParserRule getRule() { return rule; }
		
		//THROW expression=Expression ";"
		public Group getGroup() { return cGroup; }
		
		//THROW
		public RuleCall getTHROWTerminalRuleCall_0() { return cTHROWTerminalRuleCall_0; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_0() { return cExpressionExpressionParserRuleCall_1_0; }
		
		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class SynchronizedStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.SynchronizedStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cSYNCHRONIZEDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cBodyAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cBodyBlockParserRuleCall_4_0 = (RuleCall)cBodyAssignment_4.eContents().get(0);
		
		//SynchronizedStatement:
		//	SYNCHRONIZED "(" expression=Expression ")" body=Block;
		@Override public ParserRule getRule() { return rule; }
		
		//SYNCHRONIZED "(" expression=Expression ")" body=Block
		public Group getGroup() { return cGroup; }
		
		//SYNCHRONIZED
		public RuleCall getSYNCHRONIZEDTerminalRuleCall_0() { return cSYNCHRONIZEDTerminalRuleCall_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_2_0() { return cExpressionExpressionParserRuleCall_2_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//body=Block
		public Assignment getBodyAssignment_4() { return cBodyAssignment_4; }
		
		//Block
		public RuleCall getBodyBlockParserRuleCall_4_0() { return cBodyBlockParserRuleCall_4_0; }
	}
	public class TryStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.TryStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cTRYTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cTryBodyAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTryBodyBlockParserRuleCall_1_0 = (RuleCall)cTryBodyAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final RuleCall cCATCHTerminalRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cParamsAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cParamsFormalParameterParserRuleCall_2_2_0 = (RuleCall)cParamsAssignment_2_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Assignment cCatchesBodyAssignment_2_4 = (Assignment)cGroup_2.eContents().get(4);
		private final RuleCall cCatchesBodyBlockParserRuleCall_2_4_0 = (RuleCall)cCatchesBodyAssignment_2_4.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final RuleCall cFINALLYTerminalRuleCall_3_0 = (RuleCall)cGroup_3.eContents().get(0);
		private final Assignment cFinallyBodyAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cFinallyBodyBlockParserRuleCall_3_1_0 = (RuleCall)cFinallyBodyAssignment_3_1.eContents().get(0);
		
		//TryStatement:
		//	TRY tryBody=Block (=> CATCH "(" params+=FormalParameter ")" catchesBody+=Block)* (=> FINALLY finallyBody=Block)?;
		@Override public ParserRule getRule() { return rule; }
		
		//TRY tryBody=Block (=> CATCH "(" params+=FormalParameter ")" catchesBody+=Block)* (=> FINALLY finallyBody=Block)?
		public Group getGroup() { return cGroup; }
		
		//TRY
		public RuleCall getTRYTerminalRuleCall_0() { return cTRYTerminalRuleCall_0; }
		
		//tryBody=Block
		public Assignment getTryBodyAssignment_1() { return cTryBodyAssignment_1; }
		
		//Block
		public RuleCall getTryBodyBlockParserRuleCall_1_0() { return cTryBodyBlockParserRuleCall_1_0; }
		
		//(=> CATCH "(" params+=FormalParameter ")" catchesBody+=Block)*
		public Group getGroup_2() { return cGroup_2; }
		
		//=> CATCH
		public RuleCall getCATCHTerminalRuleCall_2_0() { return cCATCHTerminalRuleCall_2_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_2_1() { return cLeftParenthesisKeyword_2_1; }
		
		//params+=FormalParameter
		public Assignment getParamsAssignment_2_2() { return cParamsAssignment_2_2; }
		
		//FormalParameter
		public RuleCall getParamsFormalParameterParserRuleCall_2_2_0() { return cParamsFormalParameterParserRuleCall_2_2_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_2_3() { return cRightParenthesisKeyword_2_3; }
		
		//catchesBody+=Block
		public Assignment getCatchesBodyAssignment_2_4() { return cCatchesBodyAssignment_2_4; }
		
		//Block
		public RuleCall getCatchesBodyBlockParserRuleCall_2_4_0() { return cCatchesBodyBlockParserRuleCall_2_4_0; }
		
		//(=> FINALLY finallyBody=Block)?
		public Group getGroup_3() { return cGroup_3; }
		
		//=> FINALLY
		public RuleCall getFINALLYTerminalRuleCall_3_0() { return cFINALLYTerminalRuleCall_3_0; }
		
		//finallyBody=Block
		public Assignment getFinallyBodyAssignment_3_1() { return cFinallyBodyAssignment_3_1; }
		
		//Block
		public RuleCall getFinallyBodyBlockParserRuleCall_3_1_0() { return cFinallyBodyBlockParserRuleCall_3_1_0; }
	}
	public class ConstantExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.ConstantExpression");
		private final RuleCall cExpressionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//ConstantExpression:
		//	Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall() { return cExpressionParserRuleCall; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.Expression");
		private final RuleCall cAssignmentExpressionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Expression:
		//	AssignmentExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//AssignmentExpression
		public RuleCall getAssignmentExpressionParserRuleCall() { return cAssignmentExpressionParserRuleCall; }
	}
	public class AssignmentExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.AssignmentExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cConditionalExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAssignmentParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//AssignmentExpression:
		//	=> ConditionalExpression | Assignment;
		@Override public ParserRule getRule() { return rule; }
		
		//=> ConditionalExpression | Assignment
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//=> ConditionalExpression
		public RuleCall getConditionalExpressionParserRuleCall_0() { return cConditionalExpressionParserRuleCall_0; }
		
		//Assignment
		public RuleCall getAssignmentParserRuleCall_1() { return cAssignmentParserRuleCall_1; }
	}
	public class AssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.Assignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cObjectAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cObjectLeftHandSideParserRuleCall_0_0 = (RuleCall)cObjectAssignment_0.eContents().get(0);
		private final Assignment cOperatorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOperatorAssignmentOperatorParserRuleCall_1_0 = (RuleCall)cOperatorAssignment_1.eContents().get(0);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueAssignmentExpressionParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//Assignment:
		//	object=LeftHandSide operator=AssignmentOperator value=AssignmentExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//object=LeftHandSide operator=AssignmentOperator value=AssignmentExpression
		public Group getGroup() { return cGroup; }
		
		//object=LeftHandSide
		public Assignment getObjectAssignment_0() { return cObjectAssignment_0; }
		
		//LeftHandSide
		public RuleCall getObjectLeftHandSideParserRuleCall_0_0() { return cObjectLeftHandSideParserRuleCall_0_0; }
		
		//operator=AssignmentOperator
		public Assignment getOperatorAssignment_1() { return cOperatorAssignment_1; }
		
		//AssignmentOperator
		public RuleCall getOperatorAssignmentOperatorParserRuleCall_1_0() { return cOperatorAssignmentOperatorParserRuleCall_1_0; }
		
		//value=AssignmentExpression
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//AssignmentExpression
		public RuleCall getValueAssignmentExpressionParserRuleCall_2_0() { return cValueAssignmentExpressionParserRuleCall_2_0; }
	}
	public class LeftHandSideElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.LeftHandSide");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cExpressionNameParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFieldAccessParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cArrayAccessParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//LeftHandSide:
		//	=> ExpressionName | => FieldAccess | => ArrayAccess;
		@Override public ParserRule getRule() { return rule; }
		
		//=> ExpressionName | => FieldAccess | => ArrayAccess
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//=> ExpressionName
		public RuleCall getExpressionNameParserRuleCall_0() { return cExpressionNameParserRuleCall_0; }
		
		//=> FieldAccess
		public RuleCall getFieldAccessParserRuleCall_1() { return cFieldAccessParserRuleCall_1; }
		
		//=> ArrayAccess
		public RuleCall getArrayAccessParserRuleCall_2() { return cArrayAccessParserRuleCall_2; }
	}
	public class AssignmentOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.AssignmentOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cEqualsSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cAsteriskEqualsSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cSolidusEqualsSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cPercentSignEqualsSignKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cPlusSignEqualsSignKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cHyphenMinusEqualsSignKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cLessThanSignLessThanSignEqualsSignKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cGreaterThanSignGreaterThanSignEqualsSignKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cGreaterThanSignGreaterThanSignGreaterThanSignEqualsSignKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cAmpersandEqualsSignKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		private final Keyword cCircumflexAccentEqualsSignKeyword_10 = (Keyword)cAlternatives.eContents().get(10);
		private final Keyword cVerticalLineEqualsSignKeyword_11 = (Keyword)cAlternatives.eContents().get(11);
		
		//AssignmentOperator:
		//	"=" | "*=" | "/=" | "%=" | "+=" | "-=" | "<<=" | ">>=" | ">>>=" | "&=" | "^=" | "|=";
		@Override public ParserRule getRule() { return rule; }
		
		//"=" | "*=" | "/=" | "%=" | "+=" | "-=" | "<<=" | ">>=" | ">>>=" | "&=" | "^=" | "|="
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"="
		public Keyword getEqualsSignKeyword_0() { return cEqualsSignKeyword_0; }
		
		//"*="
		public Keyword getAsteriskEqualsSignKeyword_1() { return cAsteriskEqualsSignKeyword_1; }
		
		//"/="
		public Keyword getSolidusEqualsSignKeyword_2() { return cSolidusEqualsSignKeyword_2; }
		
		//"%="
		public Keyword getPercentSignEqualsSignKeyword_3() { return cPercentSignEqualsSignKeyword_3; }
		
		//"+="
		public Keyword getPlusSignEqualsSignKeyword_4() { return cPlusSignEqualsSignKeyword_4; }
		
		//"-="
		public Keyword getHyphenMinusEqualsSignKeyword_5() { return cHyphenMinusEqualsSignKeyword_5; }
		
		//"<<="
		public Keyword getLessThanSignLessThanSignEqualsSignKeyword_6() { return cLessThanSignLessThanSignEqualsSignKeyword_6; }
		
		//">>="
		public Keyword getGreaterThanSignGreaterThanSignEqualsSignKeyword_7() { return cGreaterThanSignGreaterThanSignEqualsSignKeyword_7; }
		
		//">>>="
		public Keyword getGreaterThanSignGreaterThanSignGreaterThanSignEqualsSignKeyword_8() { return cGreaterThanSignGreaterThanSignGreaterThanSignEqualsSignKeyword_8; }
		
		//"&="
		public Keyword getAmpersandEqualsSignKeyword_9() { return cAmpersandEqualsSignKeyword_9; }
		
		//"^="
		public Keyword getCircumflexAccentEqualsSignKeyword_10() { return cCircumflexAccentEqualsSignKeyword_10; }
		
		//"|="
		public Keyword getVerticalLineEqualsSignKeyword_11() { return cVerticalLineEqualsSignKeyword_11; }
	}
	public class ConditionalExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.ConditionalExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cConditionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cConditionConditionalOrExpressionParserRuleCall_0_0 = (RuleCall)cConditionAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cQuestionMarkKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cThenAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cThenExpressionParserRuleCall_1_1_0 = (RuleCall)cThenAssignment_1_1.eContents().get(0);
		private final Keyword cColonKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cElseAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cElseConditionalExpressionParserRuleCall_1_3_0 = (RuleCall)cElseAssignment_1_3.eContents().get(0);
		
		//ConditionalExpression:
		//	condition=ConditionalOrExpression (=> "?" then=Expression ":" else=ConditionalExpression)?;
		@Override public ParserRule getRule() { return rule; }
		
		//condition=ConditionalOrExpression (=> "?" then=Expression ":" else=ConditionalExpression)?
		public Group getGroup() { return cGroup; }
		
		//condition=ConditionalOrExpression
		public Assignment getConditionAssignment_0() { return cConditionAssignment_0; }
		
		//ConditionalOrExpression
		public RuleCall getConditionConditionalOrExpressionParserRuleCall_0_0() { return cConditionConditionalOrExpressionParserRuleCall_0_0; }
		
		//(=> "?" then=Expression ":" else=ConditionalExpression)?
		public Group getGroup_1() { return cGroup_1; }
		
		//=> "?"
		public Keyword getQuestionMarkKeyword_1_0() { return cQuestionMarkKeyword_1_0; }
		
		//then=Expression
		public Assignment getThenAssignment_1_1() { return cThenAssignment_1_1; }
		
		//Expression
		public RuleCall getThenExpressionParserRuleCall_1_1_0() { return cThenExpressionParserRuleCall_1_1_0; }
		
		//":"
		public Keyword getColonKeyword_1_2() { return cColonKeyword_1_2; }
		
		//else=ConditionalExpression
		public Assignment getElseAssignment_1_3() { return cElseAssignment_1_3; }
		
		//ConditionalExpression
		public RuleCall getElseConditionalExpressionParserRuleCall_1_3_0() { return cElseConditionalExpressionParserRuleCall_1_3_0; }
	}
	public class ConditionalOrExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.ConditionalOrExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOperandsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOperandsConditionalAndExpressionParserRuleCall_0_0 = (RuleCall)cOperandsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cOperatorsAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cOperatorsVerticalLineVerticalLineKeyword_1_0_0 = (Keyword)cOperatorsAssignment_1_0.eContents().get(0);
		private final Assignment cOperandsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperandsConditionalAndExpressionParserRuleCall_1_1_0 = (RuleCall)cOperandsAssignment_1_1.eContents().get(0);
		
		//ConditionalOrExpression:
		//	operands+=ConditionalAndExpression (=> operators+="||" operands+=ConditionalAndExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//operands+=ConditionalAndExpression (=> operators+="||" operands+=ConditionalAndExpression)*
		public Group getGroup() { return cGroup; }
		
		//operands+=ConditionalAndExpression
		public Assignment getOperandsAssignment_0() { return cOperandsAssignment_0; }
		
		//ConditionalAndExpression
		public RuleCall getOperandsConditionalAndExpressionParserRuleCall_0_0() { return cOperandsConditionalAndExpressionParserRuleCall_0_0; }
		
		//(=> operators+="||" operands+=ConditionalAndExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//=> operators+="||"
		public Assignment getOperatorsAssignment_1_0() { return cOperatorsAssignment_1_0; }
		
		//"||"
		public Keyword getOperatorsVerticalLineVerticalLineKeyword_1_0_0() { return cOperatorsVerticalLineVerticalLineKeyword_1_0_0; }
		
		//operands+=ConditionalAndExpression
		public Assignment getOperandsAssignment_1_1() { return cOperandsAssignment_1_1; }
		
		//ConditionalAndExpression
		public RuleCall getOperandsConditionalAndExpressionParserRuleCall_1_1_0() { return cOperandsConditionalAndExpressionParserRuleCall_1_1_0; }
	}
	public class ConditionalAndExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.ConditionalAndExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOperandsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOperandsInclusiveOrExpressionParserRuleCall_0_0 = (RuleCall)cOperandsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cOperatorsAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cOperatorsAmpersandAmpersandKeyword_1_0_0 = (Keyword)cOperatorsAssignment_1_0.eContents().get(0);
		private final Assignment cOperandsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperandsInclusiveOrExpressionParserRuleCall_1_1_0 = (RuleCall)cOperandsAssignment_1_1.eContents().get(0);
		
		//ConditionalAndExpression:
		//	operands+=InclusiveOrExpression (=> operators+="&&" operands+=InclusiveOrExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//operands+=InclusiveOrExpression (=> operators+="&&" operands+=InclusiveOrExpression)*
		public Group getGroup() { return cGroup; }
		
		//operands+=InclusiveOrExpression
		public Assignment getOperandsAssignment_0() { return cOperandsAssignment_0; }
		
		//InclusiveOrExpression
		public RuleCall getOperandsInclusiveOrExpressionParserRuleCall_0_0() { return cOperandsInclusiveOrExpressionParserRuleCall_0_0; }
		
		//(=> operators+="&&" operands+=InclusiveOrExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//=> operators+="&&"
		public Assignment getOperatorsAssignment_1_0() { return cOperatorsAssignment_1_0; }
		
		//"&&"
		public Keyword getOperatorsAmpersandAmpersandKeyword_1_0_0() { return cOperatorsAmpersandAmpersandKeyword_1_0_0; }
		
		//operands+=InclusiveOrExpression
		public Assignment getOperandsAssignment_1_1() { return cOperandsAssignment_1_1; }
		
		//InclusiveOrExpression
		public RuleCall getOperandsInclusiveOrExpressionParserRuleCall_1_1_0() { return cOperandsInclusiveOrExpressionParserRuleCall_1_1_0; }
	}
	public class InclusiveOrExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.InclusiveOrExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOperandsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOperandsExclusiveOrExpressionParserRuleCall_0_0 = (RuleCall)cOperandsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cOperatorsAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cOperatorsVerticalLineKeyword_1_0_0 = (Keyword)cOperatorsAssignment_1_0.eContents().get(0);
		private final Assignment cOperandsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperandsExclusiveOrExpressionParserRuleCall_1_1_0 = (RuleCall)cOperandsAssignment_1_1.eContents().get(0);
		
		//InclusiveOrExpression:
		//	operands+=ExclusiveOrExpression (=> operators+="|" operands+=ExclusiveOrExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//operands+=ExclusiveOrExpression (=> operators+="|" operands+=ExclusiveOrExpression)*
		public Group getGroup() { return cGroup; }
		
		//operands+=ExclusiveOrExpression
		public Assignment getOperandsAssignment_0() { return cOperandsAssignment_0; }
		
		//ExclusiveOrExpression
		public RuleCall getOperandsExclusiveOrExpressionParserRuleCall_0_0() { return cOperandsExclusiveOrExpressionParserRuleCall_0_0; }
		
		//(=> operators+="|" operands+=ExclusiveOrExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//=> operators+="|"
		public Assignment getOperatorsAssignment_1_0() { return cOperatorsAssignment_1_0; }
		
		//"|"
		public Keyword getOperatorsVerticalLineKeyword_1_0_0() { return cOperatorsVerticalLineKeyword_1_0_0; }
		
		//operands+=ExclusiveOrExpression
		public Assignment getOperandsAssignment_1_1() { return cOperandsAssignment_1_1; }
		
		//ExclusiveOrExpression
		public RuleCall getOperandsExclusiveOrExpressionParserRuleCall_1_1_0() { return cOperandsExclusiveOrExpressionParserRuleCall_1_1_0; }
	}
	public class ExclusiveOrExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.ExclusiveOrExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOperandsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOperandsAndExpressionParserRuleCall_0_0 = (RuleCall)cOperandsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cOperatorsAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cOperatorsCircumflexAccentKeyword_1_0_0 = (Keyword)cOperatorsAssignment_1_0.eContents().get(0);
		private final Assignment cOperandsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperandsAndExpressionParserRuleCall_1_1_0 = (RuleCall)cOperandsAssignment_1_1.eContents().get(0);
		
		//ExclusiveOrExpression:
		//	operands+=AndExpression (=> operators+="^" operands+=AndExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//operands+=AndExpression (=> operators+="^" operands+=AndExpression)*
		public Group getGroup() { return cGroup; }
		
		//operands+=AndExpression
		public Assignment getOperandsAssignment_0() { return cOperandsAssignment_0; }
		
		//AndExpression
		public RuleCall getOperandsAndExpressionParserRuleCall_0_0() { return cOperandsAndExpressionParserRuleCall_0_0; }
		
		//(=> operators+="^" operands+=AndExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//=> operators+="^"
		public Assignment getOperatorsAssignment_1_0() { return cOperatorsAssignment_1_0; }
		
		//"^"
		public Keyword getOperatorsCircumflexAccentKeyword_1_0_0() { return cOperatorsCircumflexAccentKeyword_1_0_0; }
		
		//operands+=AndExpression
		public Assignment getOperandsAssignment_1_1() { return cOperandsAssignment_1_1; }
		
		//AndExpression
		public RuleCall getOperandsAndExpressionParserRuleCall_1_1_0() { return cOperandsAndExpressionParserRuleCall_1_1_0; }
	}
	public class AndExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.AndExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOperandsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOperandsEqualityExpressionParserRuleCall_0_0 = (RuleCall)cOperandsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cOperatorsAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cOperatorsAmpersandKeyword_1_0_0 = (Keyword)cOperatorsAssignment_1_0.eContents().get(0);
		private final Assignment cOperandsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperandsEqualityExpressionParserRuleCall_1_1_0 = (RuleCall)cOperandsAssignment_1_1.eContents().get(0);
		
		//AndExpression:
		//	operands+=EqualityExpression (=> operators+="&" operands+=EqualityExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//operands+=EqualityExpression (=> operators+="&" operands+=EqualityExpression)*
		public Group getGroup() { return cGroup; }
		
		//operands+=EqualityExpression
		public Assignment getOperandsAssignment_0() { return cOperandsAssignment_0; }
		
		//EqualityExpression
		public RuleCall getOperandsEqualityExpressionParserRuleCall_0_0() { return cOperandsEqualityExpressionParserRuleCall_0_0; }
		
		//(=> operators+="&" operands+=EqualityExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//=> operators+="&"
		public Assignment getOperatorsAssignment_1_0() { return cOperatorsAssignment_1_0; }
		
		//"&"
		public Keyword getOperatorsAmpersandKeyword_1_0_0() { return cOperatorsAmpersandKeyword_1_0_0; }
		
		//operands+=EqualityExpression
		public Assignment getOperandsAssignment_1_1() { return cOperandsAssignment_1_1; }
		
		//EqualityExpression
		public RuleCall getOperandsEqualityExpressionParserRuleCall_1_1_0() { return cOperandsEqualityExpressionParserRuleCall_1_1_0; }
	}
	public class EqualityExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.EqualityExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOperandsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOperandsRelationalExpressionParserRuleCall_0_0 = (RuleCall)cOperandsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cOperatorsAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Alternatives cOperatorsAlternatives_1_0_0 = (Alternatives)cOperatorsAssignment_1_0.eContents().get(0);
		private final Keyword cOperatorsEqualsSignEqualsSignKeyword_1_0_0_0 = (Keyword)cOperatorsAlternatives_1_0_0.eContents().get(0);
		private final Keyword cOperatorsExclamationMarkEqualsSignKeyword_1_0_0_1 = (Keyword)cOperatorsAlternatives_1_0_0.eContents().get(1);
		private final Assignment cOperandsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperandsRelationalExpressionParserRuleCall_1_1_0 = (RuleCall)cOperandsAssignment_1_1.eContents().get(0);
		
		//EqualityExpression:
		//	operands+=RelationalExpression (=> operators+=("==" | "!=") operands+=RelationalExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//operands+=RelationalExpression (=> operators+=("==" | "!=") operands+=RelationalExpression)*
		public Group getGroup() { return cGroup; }
		
		//operands+=RelationalExpression
		public Assignment getOperandsAssignment_0() { return cOperandsAssignment_0; }
		
		//RelationalExpression
		public RuleCall getOperandsRelationalExpressionParserRuleCall_0_0() { return cOperandsRelationalExpressionParserRuleCall_0_0; }
		
		//(=> operators+=("==" | "!=") operands+=RelationalExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//=> operators+=("==" | "!=")
		public Assignment getOperatorsAssignment_1_0() { return cOperatorsAssignment_1_0; }
		
		//("==" | "!=")
		public Alternatives getOperatorsAlternatives_1_0_0() { return cOperatorsAlternatives_1_0_0; }
		
		//"=="
		public Keyword getOperatorsEqualsSignEqualsSignKeyword_1_0_0_0() { return cOperatorsEqualsSignEqualsSignKeyword_1_0_0_0; }
		
		//"!="
		public Keyword getOperatorsExclamationMarkEqualsSignKeyword_1_0_0_1() { return cOperatorsExclamationMarkEqualsSignKeyword_1_0_0_1; }
		
		//operands+=RelationalExpression
		public Assignment getOperandsAssignment_1_1() { return cOperandsAssignment_1_1; }
		
		//RelationalExpression
		public RuleCall getOperandsRelationalExpressionParserRuleCall_1_1_0() { return cOperandsRelationalExpressionParserRuleCall_1_1_0; }
	}
	public class RelationalExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.RelationalExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOperandsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOperandsShiftExpressionParserRuleCall_0_0 = (RuleCall)cOperandsAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Assignment cOperatorsAssignment_1_0_0_0 = (Assignment)cGroup_1_0_0.eContents().get(0);
		private final Alternatives cOperatorsAlternatives_1_0_0_0_0 = (Alternatives)cOperatorsAssignment_1_0_0_0.eContents().get(0);
		private final Keyword cOperatorsLessThanSignKeyword_1_0_0_0_0_0 = (Keyword)cOperatorsAlternatives_1_0_0_0_0.eContents().get(0);
		private final Keyword cOperatorsGreaterThanSignKeyword_1_0_0_0_0_1 = (Keyword)cOperatorsAlternatives_1_0_0_0_0.eContents().get(1);
		private final Keyword cOperatorsLessThanSignEqualsSignKeyword_1_0_0_0_0_2 = (Keyword)cOperatorsAlternatives_1_0_0_0_0.eContents().get(2);
		private final Keyword cOperatorsGreaterThanSignEqualsSignKeyword_1_0_0_0_0_3 = (Keyword)cOperatorsAlternatives_1_0_0_0_0.eContents().get(3);
		private final Assignment cOperandsAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final RuleCall cOperandsShiftExpressionParserRuleCall_1_0_0_1_0 = (RuleCall)cOperandsAssignment_1_0_0_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Group cGroup_1_1_0 = (Group)cGroup_1_1.eContents().get(0);
		private final Assignment cOperatorsAssignment_1_1_0_0 = (Assignment)cGroup_1_1_0.eContents().get(0);
		private final RuleCall cOperatorsINSTANCEOFTerminalRuleCall_1_1_0_0_0 = (RuleCall)cOperatorsAssignment_1_1_0_0.eContents().get(0);
		private final Assignment cClassesAssignment_1_1_0_1 = (Assignment)cGroup_1_1_0.eContents().get(1);
		private final RuleCall cClassesReferenceTypeParserRuleCall_1_1_0_1_0 = (RuleCall)cClassesAssignment_1_1_0_1.eContents().get(0);
		
		//RelationalExpression:
		//	operands+=ShiftExpression (=> (operators+=("<" | ">" | "<=" | ">=") operands+=ShiftExpression) | =>
		//	(operators+=INSTANCEOF classes+=ReferenceType))*;
		@Override public ParserRule getRule() { return rule; }
		
		//operands+=ShiftExpression (=> (operators+=("<" | ">" | "<=" | ">=") operands+=ShiftExpression) | =>
		//(operators+=INSTANCEOF classes+=ReferenceType))*
		public Group getGroup() { return cGroup; }
		
		//operands+=ShiftExpression
		public Assignment getOperandsAssignment_0() { return cOperandsAssignment_0; }
		
		//ShiftExpression
		public RuleCall getOperandsShiftExpressionParserRuleCall_0_0() { return cOperandsShiftExpressionParserRuleCall_0_0; }
		
		//(=> (operators+=("<" | ">" | "<=" | ">=") operands+=ShiftExpression) | => (operators+=INSTANCEOF
		//classes+=ReferenceType))*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//=> (operators+=("<" | ">" | "<=" | ">=") operands+=ShiftExpression)
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//operators+=("<" | ">" | "<=" | ">=") operands+=ShiftExpression
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//operators+=("<" | ">" | "<=" | ">=")
		public Assignment getOperatorsAssignment_1_0_0_0() { return cOperatorsAssignment_1_0_0_0; }
		
		//("<" | ">" | "<=" | ">=")
		public Alternatives getOperatorsAlternatives_1_0_0_0_0() { return cOperatorsAlternatives_1_0_0_0_0; }
		
		//"<"
		public Keyword getOperatorsLessThanSignKeyword_1_0_0_0_0_0() { return cOperatorsLessThanSignKeyword_1_0_0_0_0_0; }
		
		//">"
		public Keyword getOperatorsGreaterThanSignKeyword_1_0_0_0_0_1() { return cOperatorsGreaterThanSignKeyword_1_0_0_0_0_1; }
		
		//"<="
		public Keyword getOperatorsLessThanSignEqualsSignKeyword_1_0_0_0_0_2() { return cOperatorsLessThanSignEqualsSignKeyword_1_0_0_0_0_2; }
		
		//">="
		public Keyword getOperatorsGreaterThanSignEqualsSignKeyword_1_0_0_0_0_3() { return cOperatorsGreaterThanSignEqualsSignKeyword_1_0_0_0_0_3; }
		
		//operands+=ShiftExpression
		public Assignment getOperandsAssignment_1_0_0_1() { return cOperandsAssignment_1_0_0_1; }
		
		//ShiftExpression
		public RuleCall getOperandsShiftExpressionParserRuleCall_1_0_0_1_0() { return cOperandsShiftExpressionParserRuleCall_1_0_0_1_0; }
		
		//=> (operators+=INSTANCEOF classes+=ReferenceType)
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//operators+=INSTANCEOF classes+=ReferenceType
		public Group getGroup_1_1_0() { return cGroup_1_1_0; }
		
		//operators+=INSTANCEOF
		public Assignment getOperatorsAssignment_1_1_0_0() { return cOperatorsAssignment_1_1_0_0; }
		
		//INSTANCEOF
		public RuleCall getOperatorsINSTANCEOFTerminalRuleCall_1_1_0_0_0() { return cOperatorsINSTANCEOFTerminalRuleCall_1_1_0_0_0; }
		
		//classes+=ReferenceType
		public Assignment getClassesAssignment_1_1_0_1() { return cClassesAssignment_1_1_0_1; }
		
		//ReferenceType
		public RuleCall getClassesReferenceTypeParserRuleCall_1_1_0_1_0() { return cClassesReferenceTypeParserRuleCall_1_1_0_1_0; }
	}
	public class ShiftExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.ShiftExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOperandsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOperandsAdditiveExpressionParserRuleCall_0_0 = (RuleCall)cOperandsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cOperatorsAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Alternatives cOperatorsAlternatives_1_0_0 = (Alternatives)cOperatorsAssignment_1_0.eContents().get(0);
		private final Keyword cOperatorsLessThanSignLessThanSignKeyword_1_0_0_0 = (Keyword)cOperatorsAlternatives_1_0_0.eContents().get(0);
		private final Keyword cOperatorsGreaterThanSignGreaterThanSignKeyword_1_0_0_1 = (Keyword)cOperatorsAlternatives_1_0_0.eContents().get(1);
		private final Keyword cOperatorsGreaterThanSignGreaterThanSignGreaterThanSignKeyword_1_0_0_2 = (Keyword)cOperatorsAlternatives_1_0_0.eContents().get(2);
		private final Assignment cOperandsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperandsAdditiveExpressionParserRuleCall_1_1_0 = (RuleCall)cOperandsAssignment_1_1.eContents().get(0);
		
		//ShiftExpression:
		//	operands+=AdditiveExpression (=> operators+=("<<" | ">>" | ">>>") operands+=AdditiveExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//operands+=AdditiveExpression (=> operators+=("<<" | ">>" | ">>>") operands+=AdditiveExpression)*
		public Group getGroup() { return cGroup; }
		
		//operands+=AdditiveExpression
		public Assignment getOperandsAssignment_0() { return cOperandsAssignment_0; }
		
		//AdditiveExpression
		public RuleCall getOperandsAdditiveExpressionParserRuleCall_0_0() { return cOperandsAdditiveExpressionParserRuleCall_0_0; }
		
		//(=> operators+=("<<" | ">>" | ">>>") operands+=AdditiveExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//=> operators+=("<<" | ">>" | ">>>")
		public Assignment getOperatorsAssignment_1_0() { return cOperatorsAssignment_1_0; }
		
		//("<<" | ">>" | ">>>")
		public Alternatives getOperatorsAlternatives_1_0_0() { return cOperatorsAlternatives_1_0_0; }
		
		//"<<"
		public Keyword getOperatorsLessThanSignLessThanSignKeyword_1_0_0_0() { return cOperatorsLessThanSignLessThanSignKeyword_1_0_0_0; }
		
		//">>"
		public Keyword getOperatorsGreaterThanSignGreaterThanSignKeyword_1_0_0_1() { return cOperatorsGreaterThanSignGreaterThanSignKeyword_1_0_0_1; }
		
		//">>>"
		public Keyword getOperatorsGreaterThanSignGreaterThanSignGreaterThanSignKeyword_1_0_0_2() { return cOperatorsGreaterThanSignGreaterThanSignGreaterThanSignKeyword_1_0_0_2; }
		
		//operands+=AdditiveExpression
		public Assignment getOperandsAssignment_1_1() { return cOperandsAssignment_1_1; }
		
		//AdditiveExpression
		public RuleCall getOperandsAdditiveExpressionParserRuleCall_1_1_0() { return cOperandsAdditiveExpressionParserRuleCall_1_1_0; }
	}
	public class AdditiveExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.AdditiveExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOperandsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOperandsMultiplicativeExpressionParserRuleCall_0_0 = (RuleCall)cOperandsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cOperatorsAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Alternatives cOperatorsAlternatives_1_0_0 = (Alternatives)cOperatorsAssignment_1_0.eContents().get(0);
		private final Keyword cOperatorsPlusSignKeyword_1_0_0_0 = (Keyword)cOperatorsAlternatives_1_0_0.eContents().get(0);
		private final Keyword cOperatorsHyphenMinusKeyword_1_0_0_1 = (Keyword)cOperatorsAlternatives_1_0_0.eContents().get(1);
		private final Assignment cOperandsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperandsMultiplicativeExpressionParserRuleCall_1_1_0 = (RuleCall)cOperandsAssignment_1_1.eContents().get(0);
		
		//AdditiveExpression:
		//	operands+=MultiplicativeExpression (=> operators+=("+" | "-") operands+=MultiplicativeExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//operands+=MultiplicativeExpression (=> operators+=("+" | "-") operands+=MultiplicativeExpression)*
		public Group getGroup() { return cGroup; }
		
		//operands+=MultiplicativeExpression
		public Assignment getOperandsAssignment_0() { return cOperandsAssignment_0; }
		
		//MultiplicativeExpression
		public RuleCall getOperandsMultiplicativeExpressionParserRuleCall_0_0() { return cOperandsMultiplicativeExpressionParserRuleCall_0_0; }
		
		//(=> operators+=("+" | "-") operands+=MultiplicativeExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//=> operators+=("+" | "-")
		public Assignment getOperatorsAssignment_1_0() { return cOperatorsAssignment_1_0; }
		
		//("+" | "-")
		public Alternatives getOperatorsAlternatives_1_0_0() { return cOperatorsAlternatives_1_0_0; }
		
		//"+"
		public Keyword getOperatorsPlusSignKeyword_1_0_0_0() { return cOperatorsPlusSignKeyword_1_0_0_0; }
		
		//"-"
		public Keyword getOperatorsHyphenMinusKeyword_1_0_0_1() { return cOperatorsHyphenMinusKeyword_1_0_0_1; }
		
		//operands+=MultiplicativeExpression
		public Assignment getOperandsAssignment_1_1() { return cOperandsAssignment_1_1; }
		
		//MultiplicativeExpression
		public RuleCall getOperandsMultiplicativeExpressionParserRuleCall_1_1_0() { return cOperandsMultiplicativeExpressionParserRuleCall_1_1_0; }
	}
	public class MultiplicativeExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.MultiplicativeExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOperandsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOperandsNoArrayExpressionParserRuleCall_0_0 = (RuleCall)cOperandsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cOperatorsAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Alternatives cOperatorsAlternatives_1_0_0 = (Alternatives)cOperatorsAssignment_1_0.eContents().get(0);
		private final Keyword cOperatorsAsteriskKeyword_1_0_0_0 = (Keyword)cOperatorsAlternatives_1_0_0.eContents().get(0);
		private final Keyword cOperatorsSolidusKeyword_1_0_0_1 = (Keyword)cOperatorsAlternatives_1_0_0.eContents().get(1);
		private final Keyword cOperatorsPercentSignKeyword_1_0_0_2 = (Keyword)cOperatorsAlternatives_1_0_0.eContents().get(2);
		private final Assignment cOperandsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperandsNoArrayExpressionParserRuleCall_1_1_0 = (RuleCall)cOperandsAssignment_1_1.eContents().get(0);
		
		//MultiplicativeExpression:
		//	operands+=NoArrayExpression (=> operators+=("*" | "/" | "%") operands+=NoArrayExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//operands+=NoArrayExpression (=> operators+=("*" | "/" | "%") operands+=NoArrayExpression)*
		public Group getGroup() { return cGroup; }
		
		//operands+=NoArrayExpression
		public Assignment getOperandsAssignment_0() { return cOperandsAssignment_0; }
		
		//NoArrayExpression
		public RuleCall getOperandsNoArrayExpressionParserRuleCall_0_0() { return cOperandsNoArrayExpressionParserRuleCall_0_0; }
		
		//(=> operators+=("*" | "/" | "%") operands+=NoArrayExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//=> operators+=("*" | "/" | "%")
		public Assignment getOperatorsAssignment_1_0() { return cOperatorsAssignment_1_0; }
		
		//("*" | "/" | "%")
		public Alternatives getOperatorsAlternatives_1_0_0() { return cOperatorsAlternatives_1_0_0; }
		
		//"*"
		public Keyword getOperatorsAsteriskKeyword_1_0_0_0() { return cOperatorsAsteriskKeyword_1_0_0_0; }
		
		//"/"
		public Keyword getOperatorsSolidusKeyword_1_0_0_1() { return cOperatorsSolidusKeyword_1_0_0_1; }
		
		//"%"
		public Keyword getOperatorsPercentSignKeyword_1_0_0_2() { return cOperatorsPercentSignKeyword_1_0_0_2; }
		
		//operands+=NoArrayExpression
		public Assignment getOperandsAssignment_1_1() { return cOperandsAssignment_1_1; }
		
		//NoArrayExpression
		public RuleCall getOperandsNoArrayExpressionParserRuleCall_1_1_0() { return cOperandsNoArrayExpressionParserRuleCall_1_1_0; }
	}
	public class CastExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.CastExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cTypeAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cTypePrimitiveTypeParserRuleCall_0_1_0 = (RuleCall)cTypeAssignment_0_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cOperandAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cOperandNoArrayExpressionParserRuleCall_0_3_0 = (RuleCall)cOperandAssignment_0_3.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cTypeAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cTypeReferenceTypeParserRuleCall_1_1_0 = (RuleCall)cTypeAssignment_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cOperandAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cOperandNoArrayExpressionWithoutMinusParserRuleCall_1_3_0 = (RuleCall)cOperandAssignment_1_3.eContents().get(0);
		
		//CastExpression:
		//	=> "(" type=PrimitiveType ")" operand=NoArrayExpression
		//	| => "(" type=ReferenceType ")" operand=NoArrayExpressionWithoutMinus;
		@Override public ParserRule getRule() { return rule; }
		
		//=> "(" type=PrimitiveType ")" operand=NoArrayExpression | => "(" type=ReferenceType ")"
		//operand=NoArrayExpressionWithoutMinus
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//=> "(" type=PrimitiveType ")" operand=NoArrayExpression
		public Group getGroup_0() { return cGroup_0; }
		
		//=> "("
		public Keyword getLeftParenthesisKeyword_0_0() { return cLeftParenthesisKeyword_0_0; }
		
		//type=PrimitiveType
		public Assignment getTypeAssignment_0_1() { return cTypeAssignment_0_1; }
		
		//PrimitiveType
		public RuleCall getTypePrimitiveTypeParserRuleCall_0_1_0() { return cTypePrimitiveTypeParserRuleCall_0_1_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_0_2() { return cRightParenthesisKeyword_0_2; }
		
		//operand=NoArrayExpression
		public Assignment getOperandAssignment_0_3() { return cOperandAssignment_0_3; }
		
		//NoArrayExpression
		public RuleCall getOperandNoArrayExpressionParserRuleCall_0_3_0() { return cOperandNoArrayExpressionParserRuleCall_0_3_0; }
		
		//=> "(" type=ReferenceType ")" operand=NoArrayExpressionWithoutMinus
		public Group getGroup_1() { return cGroup_1; }
		
		//=> "("
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }
		
		//type=ReferenceType
		public Assignment getTypeAssignment_1_1() { return cTypeAssignment_1_1; }
		
		//ReferenceType
		public RuleCall getTypeReferenceTypeParserRuleCall_1_1_0() { return cTypeReferenceTypeParserRuleCall_1_1_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
		
		//operand=NoArrayExpressionWithoutMinus
		public Assignment getOperandAssignment_1_3() { return cOperandAssignment_1_3; }
		
		//NoArrayExpressionWithoutMinus
		public RuleCall getOperandNoArrayExpressionWithoutMinusParserRuleCall_1_3_0() { return cOperandNoArrayExpressionWithoutMinusParserRuleCall_1_3_0; }
	}
	public class NoArrayExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.NoArrayExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPreIncrementExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPreDecrementExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cOperatorAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final Keyword cOperatorPlusSignKeyword_2_0_0 = (Keyword)cOperatorAssignment_2_0.eContents().get(0);
		private final Assignment cOperandAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cOperandNoArrayExpressionParserRuleCall_2_1_0 = (RuleCall)cOperandAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Assignment cOperatorAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final Keyword cOperatorHyphenMinusKeyword_3_0_0 = (Keyword)cOperatorAssignment_3_0.eContents().get(0);
		private final Assignment cOperandAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cOperandNoArrayExpressionParserRuleCall_3_1_0 = (RuleCall)cOperandAssignment_3_1.eContents().get(0);
		private final RuleCall cNoArrayExpressionWithoutMinusParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//NoArrayExpression:
		//	PreIncrementExpression
		//	| PreDecrementExpression
		//	| operator="+" operand=NoArrayExpression
		//	| operator="-" operand=NoArrayExpression
		//	| NoArrayExpressionWithoutMinus;
		@Override public ParserRule getRule() { return rule; }
		
		//PreIncrementExpression | PreDecrementExpression | operator="+" operand=NoArrayExpression | operator="-"
		//operand=NoArrayExpression | NoArrayExpressionWithoutMinus
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PreIncrementExpression
		public RuleCall getPreIncrementExpressionParserRuleCall_0() { return cPreIncrementExpressionParserRuleCall_0; }
		
		//PreDecrementExpression
		public RuleCall getPreDecrementExpressionParserRuleCall_1() { return cPreDecrementExpressionParserRuleCall_1; }
		
		//operator="+" operand=NoArrayExpression
		public Group getGroup_2() { return cGroup_2; }
		
		//operator="+"
		public Assignment getOperatorAssignment_2_0() { return cOperatorAssignment_2_0; }
		
		//"+"
		public Keyword getOperatorPlusSignKeyword_2_0_0() { return cOperatorPlusSignKeyword_2_0_0; }
		
		//operand=NoArrayExpression
		public Assignment getOperandAssignment_2_1() { return cOperandAssignment_2_1; }
		
		//NoArrayExpression
		public RuleCall getOperandNoArrayExpressionParserRuleCall_2_1_0() { return cOperandNoArrayExpressionParserRuleCall_2_1_0; }
		
		//operator="-" operand=NoArrayExpression
		public Group getGroup_3() { return cGroup_3; }
		
		//operator="-"
		public Assignment getOperatorAssignment_3_0() { return cOperatorAssignment_3_0; }
		
		//"-"
		public Keyword getOperatorHyphenMinusKeyword_3_0_0() { return cOperatorHyphenMinusKeyword_3_0_0; }
		
		//operand=NoArrayExpression
		public Assignment getOperandAssignment_3_1() { return cOperandAssignment_3_1; }
		
		//NoArrayExpression
		public RuleCall getOperandNoArrayExpressionParserRuleCall_3_1_0() { return cOperandNoArrayExpressionParserRuleCall_3_1_0; }
		
		//NoArrayExpressionWithoutMinus
		public RuleCall getNoArrayExpressionWithoutMinusParserRuleCall_4() { return cNoArrayExpressionWithoutMinusParserRuleCall_4; }
	}
	public class PreDecrementExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.PreDecrementExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOperatorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cOperatorHyphenMinusHyphenMinusKeyword_0_0 = (Keyword)cOperatorAssignment_0.eContents().get(0);
		private final Assignment cOperandAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOperandNoArrayExpressionParserRuleCall_1_0 = (RuleCall)cOperandAssignment_1.eContents().get(0);
		
		//PreDecrementExpression:
		//	operator="--" operand=NoArrayExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//operator="--" operand=NoArrayExpression
		public Group getGroup() { return cGroup; }
		
		//operator="--"
		public Assignment getOperatorAssignment_0() { return cOperatorAssignment_0; }
		
		//"--"
		public Keyword getOperatorHyphenMinusHyphenMinusKeyword_0_0() { return cOperatorHyphenMinusHyphenMinusKeyword_0_0; }
		
		//operand=NoArrayExpression
		public Assignment getOperandAssignment_1() { return cOperandAssignment_1; }
		
		//NoArrayExpression
		public RuleCall getOperandNoArrayExpressionParserRuleCall_1_0() { return cOperandNoArrayExpressionParserRuleCall_1_0; }
	}
	public class PreIncrementExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.PreIncrementExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOperatorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cOperatorPlusSignPlusSignKeyword_0_0 = (Keyword)cOperatorAssignment_0.eContents().get(0);
		private final Assignment cOperandAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOperandNoArrayExpressionParserRuleCall_1_0 = (RuleCall)cOperandAssignment_1.eContents().get(0);
		
		//PreIncrementExpression:
		//	operator="++" operand=NoArrayExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//operator="++" operand=NoArrayExpression
		public Group getGroup() { return cGroup; }
		
		//operator="++"
		public Assignment getOperatorAssignment_0() { return cOperatorAssignment_0; }
		
		//"++"
		public Keyword getOperatorPlusSignPlusSignKeyword_0_0() { return cOperatorPlusSignPlusSignKeyword_0_0; }
		
		//operand=NoArrayExpression
		public Assignment getOperandAssignment_1() { return cOperandAssignment_1; }
		
		//NoArrayExpression
		public RuleCall getOperandNoArrayExpressionParserRuleCall_1_0() { return cOperandNoArrayExpressionParserRuleCall_1_0; }
	}
	public class NoArrayExpressionWithoutMinusElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.NoArrayExpressionWithoutMinus");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPostfixExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cOperatorAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cOperatorTildeKeyword_1_0_0 = (Keyword)cOperatorAssignment_1_0.eContents().get(0);
		private final Assignment cOperandAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperandNoArrayExpressionParserRuleCall_1_1_0 = (RuleCall)cOperandAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cOperatorAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final Keyword cOperatorExclamationMarkKeyword_2_0_0 = (Keyword)cOperatorAssignment_2_0.eContents().get(0);
		private final Assignment cOperandAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cOperandNoArrayExpressionParserRuleCall_2_1_0 = (RuleCall)cOperandAssignment_2_1.eContents().get(0);
		private final RuleCall cCastExpressionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//NoArrayExpressionWithoutMinus:
		//	=> PostfixExpression
		//	| operator="~" operand=NoArrayExpression
		//	| operator="!" operand=NoArrayExpression
		//	| CastExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//=> PostfixExpression | operator="~" operand=NoArrayExpression | operator="!" operand=NoArrayExpression | CastExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//=> PostfixExpression
		public RuleCall getPostfixExpressionParserRuleCall_0() { return cPostfixExpressionParserRuleCall_0; }
		
		//operator="~" operand=NoArrayExpression
		public Group getGroup_1() { return cGroup_1; }
		
		//operator="~"
		public Assignment getOperatorAssignment_1_0() { return cOperatorAssignment_1_0; }
		
		//"~"
		public Keyword getOperatorTildeKeyword_1_0_0() { return cOperatorTildeKeyword_1_0_0; }
		
		//operand=NoArrayExpression
		public Assignment getOperandAssignment_1_1() { return cOperandAssignment_1_1; }
		
		//NoArrayExpression
		public RuleCall getOperandNoArrayExpressionParserRuleCall_1_1_0() { return cOperandNoArrayExpressionParserRuleCall_1_1_0; }
		
		//operator="!" operand=NoArrayExpression
		public Group getGroup_2() { return cGroup_2; }
		
		//operator="!"
		public Assignment getOperatorAssignment_2_0() { return cOperatorAssignment_2_0; }
		
		//"!"
		public Keyword getOperatorExclamationMarkKeyword_2_0_0() { return cOperatorExclamationMarkKeyword_2_0_0; }
		
		//operand=NoArrayExpression
		public Assignment getOperandAssignment_2_1() { return cOperandAssignment_2_1; }
		
		//NoArrayExpression
		public RuleCall getOperandNoArrayExpressionParserRuleCall_2_1_0() { return cOperandNoArrayExpressionParserRuleCall_2_1_0; }
		
		//CastExpression
		public RuleCall getCastExpressionParserRuleCall_3() { return cCastExpressionParserRuleCall_3; }
	}
	public class PostfixExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.PostfixExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cObjectAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final RuleCall cObjectPrimaryParserRuleCall_0_0_0 = (RuleCall)cObjectAssignment_0_0.eContents().get(0);
		private final Assignment cReferenceAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final RuleCall cReferenceExpressionNameParserRuleCall_0_1_0 = (RuleCall)cReferenceAssignment_0_1.eContents().get(0);
		private final Assignment cOperatorsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cOperatorsAlternatives_1_0 = (Alternatives)cOperatorsAssignment_1.eContents().get(0);
		private final Keyword cOperatorsHyphenMinusHyphenMinusKeyword_1_0_0 = (Keyword)cOperatorsAlternatives_1_0.eContents().get(0);
		private final Keyword cOperatorsPlusSignPlusSignKeyword_1_0_1 = (Keyword)cOperatorsAlternatives_1_0.eContents().get(1);
		
		//PostfixExpression:
		//	(=> object=Primary | reference=ExpressionName) operators+=("--" | "++")*;
		@Override public ParserRule getRule() { return rule; }
		
		//(=> object=Primary | reference=ExpressionName) operators+=("--" | "++")*
		public Group getGroup() { return cGroup; }
		
		//=> object=Primary | reference=ExpressionName
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//=> object=Primary
		public Assignment getObjectAssignment_0_0() { return cObjectAssignment_0_0; }
		
		//Primary
		public RuleCall getObjectPrimaryParserRuleCall_0_0_0() { return cObjectPrimaryParserRuleCall_0_0_0; }
		
		//reference=ExpressionName
		public Assignment getReferenceAssignment_0_1() { return cReferenceAssignment_0_1; }
		
		//ExpressionName
		public RuleCall getReferenceExpressionNameParserRuleCall_0_1_0() { return cReferenceExpressionNameParserRuleCall_0_1_0; }
		
		//operators+=("--" | "++")*
		public Assignment getOperatorsAssignment_1() { return cOperatorsAssignment_1; }
		
		//("--" | "++")
		public Alternatives getOperatorsAlternatives_1_0() { return cOperatorsAlternatives_1_0; }
		
		//"--"
		public Keyword getOperatorsHyphenMinusHyphenMinusKeyword_1_0_0() { return cOperatorsHyphenMinusHyphenMinusKeyword_1_0_0; }
		
		//"++"
		public Keyword getOperatorsPlusSignPlusSignKeyword_1_0_1() { return cOperatorsPlusSignPlusSignKeyword_1_0_1; }
	}
	public class MethodInvocationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.MethodInvocation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cMethodAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cMethodMethodNameParserRuleCall_0_0_0 = (RuleCall)cMethodAssignment_0_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cArgsAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cArgsArgumentListParserRuleCall_0_2_0 = (RuleCall)cArgsAssignment_0_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Assignment cObjectAssignment_1_0_0 = (Assignment)cGroup_1_0.eContents().get(0);
		private final RuleCall cObjectPrimaryParserRuleCall_1_0_0_0 = (RuleCall)cObjectAssignment_1_0_0.eContents().get(0);
		private final Keyword cFullStopKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Assignment cMethodAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cMethodIDTerminalRuleCall_1_0_2_0 = (RuleCall)cMethodAssignment_1_0_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_0_3 = (Keyword)cGroup_1_0.eContents().get(3);
		private final Assignment cArgsAssignment_1_0_4 = (Assignment)cGroup_1_0.eContents().get(4);
		private final RuleCall cArgsArgumentListParserRuleCall_1_0_4_0 = (RuleCall)cArgsAssignment_1_0_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_0_5 = (Keyword)cGroup_1_0.eContents().get(5);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cGroup_2.eContents().get(0);
		private final Assignment cKeywordAssignment_2_0_0 = (Assignment)cGroup_2_0.eContents().get(0);
		private final RuleCall cKeywordSUPERTerminalRuleCall_2_0_0_0 = (RuleCall)cKeywordAssignment_2_0_0.eContents().get(0);
		private final Keyword cFullStopKeyword_2_0_1 = (Keyword)cGroup_2_0.eContents().get(1);
		private final Assignment cMethodAssignment_2_0_2 = (Assignment)cGroup_2_0.eContents().get(2);
		private final RuleCall cMethodIDTerminalRuleCall_2_0_2_0 = (RuleCall)cMethodAssignment_2_0_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2_0_3 = (Keyword)cGroup_2_0.eContents().get(3);
		private final Assignment cArgsAssignment_2_0_4 = (Assignment)cGroup_2_0.eContents().get(4);
		private final RuleCall cArgsArgumentListParserRuleCall_2_0_4_0 = (RuleCall)cArgsAssignment_2_0_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_0_5 = (Keyword)cGroup_2_0.eContents().get(5);
		
		//MethodInvocation:
		//	method=MethodName "(" args=ArgumentList? ")" | => (object=Primary "." method=ID "(" args=ArgumentList? ")") | =>
		//	(keyword=SUPER "." method=ID "(" args=ArgumentList? ")");
		@Override public ParserRule getRule() { return rule; }
		
		//method=MethodName "(" args=ArgumentList? ")" | => (object=Primary "." method=ID "(" args=ArgumentList? ")") | =>
		//(keyword=SUPER "." method=ID "(" args=ArgumentList? ")")
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//method=MethodName "(" args=ArgumentList? ")"
		public Group getGroup_0() { return cGroup_0; }
		
		//method=MethodName
		public Assignment getMethodAssignment_0_0() { return cMethodAssignment_0_0; }
		
		//MethodName
		public RuleCall getMethodMethodNameParserRuleCall_0_0_0() { return cMethodMethodNameParserRuleCall_0_0_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_0_1() { return cLeftParenthesisKeyword_0_1; }
		
		//args=ArgumentList?
		public Assignment getArgsAssignment_0_2() { return cArgsAssignment_0_2; }
		
		//ArgumentList
		public RuleCall getArgsArgumentListParserRuleCall_0_2_0() { return cArgsArgumentListParserRuleCall_0_2_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_0_3() { return cRightParenthesisKeyword_0_3; }
		
		//=> (object=Primary "." method=ID "(" args=ArgumentList? ")")
		public Group getGroup_1() { return cGroup_1; }
		
		//object=Primary "." method=ID "(" args=ArgumentList? ")"
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//object=Primary
		public Assignment getObjectAssignment_1_0_0() { return cObjectAssignment_1_0_0; }
		
		//Primary
		public RuleCall getObjectPrimaryParserRuleCall_1_0_0_0() { return cObjectPrimaryParserRuleCall_1_0_0_0; }
		
		//"."
		public Keyword getFullStopKeyword_1_0_1() { return cFullStopKeyword_1_0_1; }
		
		//method=ID
		public Assignment getMethodAssignment_1_0_2() { return cMethodAssignment_1_0_2; }
		
		//ID
		public RuleCall getMethodIDTerminalRuleCall_1_0_2_0() { return cMethodIDTerminalRuleCall_1_0_2_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1_0_3() { return cLeftParenthesisKeyword_1_0_3; }
		
		//args=ArgumentList?
		public Assignment getArgsAssignment_1_0_4() { return cArgsAssignment_1_0_4; }
		
		//ArgumentList
		public RuleCall getArgsArgumentListParserRuleCall_1_0_4_0() { return cArgsArgumentListParserRuleCall_1_0_4_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_1_0_5() { return cRightParenthesisKeyword_1_0_5; }
		
		//=> (keyword=SUPER "." method=ID "(" args=ArgumentList? ")")
		public Group getGroup_2() { return cGroup_2; }
		
		//keyword=SUPER "." method=ID "(" args=ArgumentList? ")"
		public Group getGroup_2_0() { return cGroup_2_0; }
		
		//keyword=SUPER
		public Assignment getKeywordAssignment_2_0_0() { return cKeywordAssignment_2_0_0; }
		
		//SUPER
		public RuleCall getKeywordSUPERTerminalRuleCall_2_0_0_0() { return cKeywordSUPERTerminalRuleCall_2_0_0_0; }
		
		//"."
		public Keyword getFullStopKeyword_2_0_1() { return cFullStopKeyword_2_0_1; }
		
		//method=ID
		public Assignment getMethodAssignment_2_0_2() { return cMethodAssignment_2_0_2; }
		
		//ID
		public RuleCall getMethodIDTerminalRuleCall_2_0_2_0() { return cMethodIDTerminalRuleCall_2_0_2_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_2_0_3() { return cLeftParenthesisKeyword_2_0_3; }
		
		//args=ArgumentList?
		public Assignment getArgsAssignment_2_0_4() { return cArgsAssignment_2_0_4; }
		
		//ArgumentList
		public RuleCall getArgsArgumentListParserRuleCall_2_0_4_0() { return cArgsArgumentListParserRuleCall_2_0_4_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_2_0_5() { return cRightParenthesisKeyword_2_0_5; }
	}
	public class FieldAccessElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.FieldAccess");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cObjectAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cObjectPrimaryParserRuleCall_0_0_0 = (RuleCall)cObjectAssignment_0_0.eContents().get(0);
		private final Keyword cFullStopKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cFieldAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cFieldIDTerminalRuleCall_0_2_0 = (RuleCall)cFieldAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Assignment cKeywordAssignment_1_0_0 = (Assignment)cGroup_1_0.eContents().get(0);
		private final RuleCall cKeywordSUPERTerminalRuleCall_1_0_0_0 = (RuleCall)cKeywordAssignment_1_0_0.eContents().get(0);
		private final Keyword cFullStopKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Assignment cFieldAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cFieldIDTerminalRuleCall_1_0_2_0 = (RuleCall)cFieldAssignment_1_0_2.eContents().get(0);
		
		//FieldAccess:
		//	object=Primary "." field=ID | => (keyword=SUPER "." field=ID);
		@Override public ParserRule getRule() { return rule; }
		
		//object=Primary "." field=ID | => (keyword=SUPER "." field=ID)
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//object=Primary "." field=ID
		public Group getGroup_0() { return cGroup_0; }
		
		//object=Primary
		public Assignment getObjectAssignment_0_0() { return cObjectAssignment_0_0; }
		
		//Primary
		public RuleCall getObjectPrimaryParserRuleCall_0_0_0() { return cObjectPrimaryParserRuleCall_0_0_0; }
		
		//"."
		public Keyword getFullStopKeyword_0_1() { return cFullStopKeyword_0_1; }
		
		//field=ID
		public Assignment getFieldAssignment_0_2() { return cFieldAssignment_0_2; }
		
		//ID
		public RuleCall getFieldIDTerminalRuleCall_0_2_0() { return cFieldIDTerminalRuleCall_0_2_0; }
		
		//=> (keyword=SUPER "." field=ID)
		public Group getGroup_1() { return cGroup_1; }
		
		//keyword=SUPER "." field=ID
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//keyword=SUPER
		public Assignment getKeywordAssignment_1_0_0() { return cKeywordAssignment_1_0_0; }
		
		//SUPER
		public RuleCall getKeywordSUPERTerminalRuleCall_1_0_0_0() { return cKeywordSUPERTerminalRuleCall_1_0_0_0; }
		
		//"."
		public Keyword getFullStopKeyword_1_0_1() { return cFullStopKeyword_1_0_1; }
		
		//field=ID
		public Assignment getFieldAssignment_1_0_2() { return cFieldAssignment_1_0_2; }
		
		//ID
		public RuleCall getFieldIDTerminalRuleCall_1_0_2_0() { return cFieldIDTerminalRuleCall_1_0_2_0; }
	}
	public class PrimaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.Primary");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPrimaryNoNewArrayParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPrimaryNewArrayParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Primary:
		//	=> PrimaryNoNewArray | PrimaryNewArray;
		@Override public ParserRule getRule() { return rule; }
		
		//=> PrimaryNoNewArray | PrimaryNewArray
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//=> PrimaryNoNewArray
		public RuleCall getPrimaryNoNewArrayParserRuleCall_0() { return cPrimaryNoNewArrayParserRuleCall_0; }
		
		//PrimaryNewArray
		public RuleCall getPrimaryNewArrayParserRuleCall_1() { return cPrimaryNewArrayParserRuleCall_1; }
	}
	public class PrimaryNoNewArrayElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.PrimaryNoNewArray");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cLiteralAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final RuleCall cLiteralLiteralParserRuleCall_0_0_0 = (RuleCall)cLiteralAssignment_0_0.eContents().get(0);
		private final Assignment cKeywordAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final RuleCall cKeywordTHISTerminalRuleCall_0_1_0 = (RuleCall)cKeywordAssignment_0_1.eContents().get(0);
		private final Group cGroup_0_2 = (Group)cAlternatives_0.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_0_2_0 = (Keyword)cGroup_0_2.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_0_2_1 = (RuleCall)cGroup_0_2.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_0_2_2 = (Keyword)cGroup_0_2.eContents().get(2);
		private final Assignment cClassAssignment_0_3 = (Assignment)cAlternatives_0.eContents().get(3);
		private final RuleCall cClassClassInstanceCreationExpressionParserRuleCall_0_3_0 = (RuleCall)cClassAssignment_0_3.eContents().get(0);
		private final Assignment cKeywordAssignment_0_4 = (Assignment)cAlternatives_0.eContents().get(4);
		private final RuleCall cKeywordSUPERTerminalRuleCall_0_4_0 = (RuleCall)cKeywordAssignment_0_4.eContents().get(0);
		private final Group cGroup_0_5 = (Group)cAlternatives_0.eContents().get(5);
		private final Assignment cMethodAssignment_0_5_0 = (Assignment)cGroup_0_5.eContents().get(0);
		private final RuleCall cMethodMethodNameParserRuleCall_0_5_0_0 = (RuleCall)cMethodAssignment_0_5_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_5_1 = (Keyword)cGroup_0_5.eContents().get(1);
		private final Assignment cArgsAssignment_0_5_2 = (Assignment)cGroup_0_5.eContents().get(2);
		private final RuleCall cArgsArgumentListParserRuleCall_0_5_2_0 = (RuleCall)cArgsAssignment_0_5_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_5_3 = (Keyword)cGroup_0_5.eContents().get(3);
		private final Group cGroup_0_6 = (Group)cAlternatives_0.eContents().get(6);
		private final Assignment cReferenceAssignment_0_6_0 = (Assignment)cGroup_0_6.eContents().get(0);
		private final RuleCall cReferenceExpressionNameParserRuleCall_0_6_0_0 = (RuleCall)cReferenceAssignment_0_6_0.eContents().get(0);
		private final Assignment cDimensionsAssignment_0_6_1 = (Assignment)cGroup_0_6.eContents().get(1);
		private final RuleCall cDimensionsArrayExpressionParserRuleCall_0_6_1_0 = (RuleCall)cDimensionsAssignment_0_6_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Keyword cFullStopKeyword_1_0_0_0 = (Keyword)cGroup_1_0_0.eContents().get(0);
		private final Assignment cFieldsAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final RuleCall cFieldsIDTerminalRuleCall_1_0_0_1_0 = (RuleCall)cFieldsAssignment_1_0_0_1.eContents().get(0);
		private final Group cGroup_1_0_0_2 = (Group)cGroup_1_0_0.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_1_0_0_2_0 = (Keyword)cGroup_1_0_0_2.eContents().get(0);
		private final Assignment cArgsAssignment_1_0_0_2_1 = (Assignment)cGroup_1_0_0_2.eContents().get(1);
		private final RuleCall cArgsArgumentListParserRuleCall_1_0_0_2_1_0 = (RuleCall)cArgsAssignment_1_0_0_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_0_0_2_2 = (Keyword)cGroup_1_0_0_2.eContents().get(2);
		private final Assignment cDimensionsAssignment_1_0_1 = (Assignment)cAlternatives_1_0.eContents().get(1);
		private final RuleCall cDimensionsArrayExpressionParserRuleCall_1_0_1_0 = (RuleCall)cDimensionsAssignment_1_0_1.eContents().get(0);
		
		//PrimaryNoNewArray:
		//	(literal=Literal
		//	| keyword=THIS
		//	| "(" Expression ")" | class=ClassInstanceCreationExpression
		//	| keyword=SUPER
		//	| method=MethodName "(" args+=ArgumentList? ")" | reference=ExpressionName dimensions+=ArrayExpression)
		//	=> ("." fields+=ID ("(" args+=ArgumentList? ")")? | dimensions+=ArrayExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//(literal=Literal | keyword=THIS | "(" Expression ")" | class=ClassInstanceCreationExpression | keyword=SUPER |
		//method=MethodName "(" args+=ArgumentList? ")" | reference=ExpressionName dimensions+=ArrayExpression) => ("."
		//fields+=ID ("(" args+=ArgumentList? ")")? | dimensions+=ArrayExpression)*
		public Group getGroup() { return cGroup; }
		
		//literal=Literal | keyword=THIS | "(" Expression ")" | class=ClassInstanceCreationExpression | keyword=SUPER |
		//method=MethodName "(" args+=ArgumentList? ")" | reference=ExpressionName dimensions+=ArrayExpression
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//literal=Literal
		public Assignment getLiteralAssignment_0_0() { return cLiteralAssignment_0_0; }
		
		//Literal
		public RuleCall getLiteralLiteralParserRuleCall_0_0_0() { return cLiteralLiteralParserRuleCall_0_0_0; }
		
		//keyword=THIS
		public Assignment getKeywordAssignment_0_1() { return cKeywordAssignment_0_1; }
		
		//THIS
		public RuleCall getKeywordTHISTerminalRuleCall_0_1_0() { return cKeywordTHISTerminalRuleCall_0_1_0; }
		
		//"(" Expression ")"
		public Group getGroup_0_2() { return cGroup_0_2; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_0_2_0() { return cLeftParenthesisKeyword_0_2_0; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_0_2_1() { return cExpressionParserRuleCall_0_2_1; }
		
		//")"
		public Keyword getRightParenthesisKeyword_0_2_2() { return cRightParenthesisKeyword_0_2_2; }
		
		//class=ClassInstanceCreationExpression
		public Assignment getClassAssignment_0_3() { return cClassAssignment_0_3; }
		
		//ClassInstanceCreationExpression
		public RuleCall getClassClassInstanceCreationExpressionParserRuleCall_0_3_0() { return cClassClassInstanceCreationExpressionParserRuleCall_0_3_0; }
		
		//keyword=SUPER
		public Assignment getKeywordAssignment_0_4() { return cKeywordAssignment_0_4; }
		
		//SUPER
		public RuleCall getKeywordSUPERTerminalRuleCall_0_4_0() { return cKeywordSUPERTerminalRuleCall_0_4_0; }
		
		//method=MethodName "(" args+=ArgumentList? ")"
		public Group getGroup_0_5() { return cGroup_0_5; }
		
		//method=MethodName
		public Assignment getMethodAssignment_0_5_0() { return cMethodAssignment_0_5_0; }
		
		//MethodName
		public RuleCall getMethodMethodNameParserRuleCall_0_5_0_0() { return cMethodMethodNameParserRuleCall_0_5_0_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_0_5_1() { return cLeftParenthesisKeyword_0_5_1; }
		
		//args+=ArgumentList?
		public Assignment getArgsAssignment_0_5_2() { return cArgsAssignment_0_5_2; }
		
		//ArgumentList
		public RuleCall getArgsArgumentListParserRuleCall_0_5_2_0() { return cArgsArgumentListParserRuleCall_0_5_2_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_0_5_3() { return cRightParenthesisKeyword_0_5_3; }
		
		//reference=ExpressionName dimensions+=ArrayExpression
		public Group getGroup_0_6() { return cGroup_0_6; }
		
		//reference=ExpressionName
		public Assignment getReferenceAssignment_0_6_0() { return cReferenceAssignment_0_6_0; }
		
		//ExpressionName
		public RuleCall getReferenceExpressionNameParserRuleCall_0_6_0_0() { return cReferenceExpressionNameParserRuleCall_0_6_0_0; }
		
		//dimensions+=ArrayExpression
		public Assignment getDimensionsAssignment_0_6_1() { return cDimensionsAssignment_0_6_1; }
		
		//ArrayExpression
		public RuleCall getDimensionsArrayExpressionParserRuleCall_0_6_1_0() { return cDimensionsArrayExpressionParserRuleCall_0_6_1_0; }
		
		//=> ("." fields+=ID ("(" args+=ArgumentList? ")")? | dimensions+=ArrayExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//"." fields+=ID ("(" args+=ArgumentList? ")")? | dimensions+=ArrayExpression
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//"." fields+=ID ("(" args+=ArgumentList? ")")?
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//"."
		public Keyword getFullStopKeyword_1_0_0_0() { return cFullStopKeyword_1_0_0_0; }
		
		//fields+=ID
		public Assignment getFieldsAssignment_1_0_0_1() { return cFieldsAssignment_1_0_0_1; }
		
		//ID
		public RuleCall getFieldsIDTerminalRuleCall_1_0_0_1_0() { return cFieldsIDTerminalRuleCall_1_0_0_1_0; }
		
		//("(" args+=ArgumentList? ")")?
		public Group getGroup_1_0_0_2() { return cGroup_1_0_0_2; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1_0_0_2_0() { return cLeftParenthesisKeyword_1_0_0_2_0; }
		
		//args+=ArgumentList?
		public Assignment getArgsAssignment_1_0_0_2_1() { return cArgsAssignment_1_0_0_2_1; }
		
		//ArgumentList
		public RuleCall getArgsArgumentListParserRuleCall_1_0_0_2_1_0() { return cArgsArgumentListParserRuleCall_1_0_0_2_1_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_1_0_0_2_2() { return cRightParenthesisKeyword_1_0_0_2_2; }
		
		//dimensions+=ArrayExpression
		public Assignment getDimensionsAssignment_1_0_1() { return cDimensionsAssignment_1_0_1; }
		
		//ArrayExpression
		public RuleCall getDimensionsArrayExpressionParserRuleCall_1_0_1_0() { return cDimensionsArrayExpressionParserRuleCall_1_0_1_0; }
	}
	public class PrimaryNewArrayElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.PrimaryNewArray");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cArrayAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cArrayArrayCreationExpressionParserRuleCall_0_0 = (RuleCall)cArrayAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Keyword cFullStopKeyword_1_0_0_0 = (Keyword)cGroup_1_0_0.eContents().get(0);
		private final Assignment cFieldsAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final RuleCall cFieldsIDTerminalRuleCall_1_0_0_1_0 = (RuleCall)cFieldsAssignment_1_0_0_1.eContents().get(0);
		private final Group cGroup_1_0_0_2 = (Group)cGroup_1_0_0.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_1_0_0_2_0 = (Keyword)cGroup_1_0_0_2.eContents().get(0);
		private final Assignment cArgsAssignment_1_0_0_2_1 = (Assignment)cGroup_1_0_0_2.eContents().get(1);
		private final RuleCall cArgsArgumentListParserRuleCall_1_0_0_2_1_0 = (RuleCall)cArgsAssignment_1_0_0_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_0_0_2_2 = (Keyword)cGroup_1_0_0_2.eContents().get(2);
		private final Assignment cDimensionsAssignment_1_0_1 = (Assignment)cAlternatives_1_0.eContents().get(1);
		private final RuleCall cDimensionsArrayExpressionParserRuleCall_1_0_1_0 = (RuleCall)cDimensionsAssignment_1_0_1.eContents().get(0);
		
		//PrimaryNewArray:
		//	array=ArrayCreationExpression
		//	=> ("." fields+=ID ("(" args+=ArgumentList? ")")? | dimensions+=ArrayExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//array=ArrayCreationExpression => ("." fields+=ID ("(" args+=ArgumentList? ")")? | dimensions+=ArrayExpression)*
		public Group getGroup() { return cGroup; }
		
		//array=ArrayCreationExpression
		public Assignment getArrayAssignment_0() { return cArrayAssignment_0; }
		
		//ArrayCreationExpression
		public RuleCall getArrayArrayCreationExpressionParserRuleCall_0_0() { return cArrayArrayCreationExpressionParserRuleCall_0_0; }
		
		//=> ("." fields+=ID ("(" args+=ArgumentList? ")")? | dimensions+=ArrayExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//"." fields+=ID ("(" args+=ArgumentList? ")")? | dimensions+=ArrayExpression
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//"." fields+=ID ("(" args+=ArgumentList? ")")?
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//"."
		public Keyword getFullStopKeyword_1_0_0_0() { return cFullStopKeyword_1_0_0_0; }
		
		//fields+=ID
		public Assignment getFieldsAssignment_1_0_0_1() { return cFieldsAssignment_1_0_0_1; }
		
		//ID
		public RuleCall getFieldsIDTerminalRuleCall_1_0_0_1_0() { return cFieldsIDTerminalRuleCall_1_0_0_1_0; }
		
		//("(" args+=ArgumentList? ")")?
		public Group getGroup_1_0_0_2() { return cGroup_1_0_0_2; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1_0_0_2_0() { return cLeftParenthesisKeyword_1_0_0_2_0; }
		
		//args+=ArgumentList?
		public Assignment getArgsAssignment_1_0_0_2_1() { return cArgsAssignment_1_0_0_2_1; }
		
		//ArgumentList
		public RuleCall getArgsArgumentListParserRuleCall_1_0_0_2_1_0() { return cArgsArgumentListParserRuleCall_1_0_0_2_1_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_1_0_0_2_2() { return cRightParenthesisKeyword_1_0_0_2_2; }
		
		//dimensions+=ArrayExpression
		public Assignment getDimensionsAssignment_1_0_1() { return cDimensionsAssignment_1_0_1; }
		
		//ArrayExpression
		public RuleCall getDimensionsArrayExpressionParserRuleCall_1_0_1_0() { return cDimensionsArrayExpressionParserRuleCall_1_0_1_0; }
	}
	public class ClassInstanceCreationExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.ClassInstanceCreationExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cNEWTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeClassTypeParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cArgsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cArgsArgumentListParserRuleCall_3_0 = (RuleCall)cArgsAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ClassInstanceCreationExpression:
		//	NEW type=ClassType "(" args=ArgumentList? ")";
		@Override public ParserRule getRule() { return rule; }
		
		//NEW type=ClassType "(" args=ArgumentList? ")"
		public Group getGroup() { return cGroup; }
		
		//NEW
		public RuleCall getNEWTerminalRuleCall_0() { return cNEWTerminalRuleCall_0; }
		
		//type=ClassType
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//ClassType
		public RuleCall getTypeClassTypeParserRuleCall_1_0() { return cTypeClassTypeParserRuleCall_1_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//args=ArgumentList?
		public Assignment getArgsAssignment_3() { return cArgsAssignment_3; }
		
		//ArgumentList
		public RuleCall getArgsArgumentListParserRuleCall_3_0() { return cArgsArgumentListParserRuleCall_3_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class ArgumentListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.ArgumentList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDeclarationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDeclarationsExpressionParserRuleCall_0_0 = (RuleCall)cDeclarationsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cDeclarationsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cDeclarationsExpressionParserRuleCall_1_1_0 = (RuleCall)cDeclarationsAssignment_1_1.eContents().get(0);
		
		//ArgumentList:
		//	declarations+=Expression (=> "," declarations+=Expression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//declarations+=Expression (=> "," declarations+=Expression)*
		public Group getGroup() { return cGroup; }
		
		//declarations+=Expression
		public Assignment getDeclarationsAssignment_0() { return cDeclarationsAssignment_0; }
		
		//Expression
		public RuleCall getDeclarationsExpressionParserRuleCall_0_0() { return cDeclarationsExpressionParserRuleCall_0_0; }
		
		//(=> "," declarations+=Expression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//=> ","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//declarations+=Expression
		public Assignment getDeclarationsAssignment_1_1() { return cDeclarationsAssignment_1_1; }
		
		//Expression
		public RuleCall getDeclarationsExpressionParserRuleCall_1_1_0() { return cDeclarationsExpressionParserRuleCall_1_1_0; }
	}
	public class ArrayCreationExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.ArrayCreationExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cNEWTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cTypePrimitiveTypeParserRuleCall_1_0_0 = (RuleCall)cTypeAssignment_1_0.eContents().get(0);
		private final Assignment cTypeAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cTypeTypeNameParserRuleCall_1_1_0 = (RuleCall)cTypeAssignment_1_1.eContents().get(0);
		private final Assignment cDimensionsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDimensionsArrayExpressionParserRuleCall_2_0 = (RuleCall)cDimensionsAssignment_2.eContents().get(0);
		private final Assignment cLayersAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cLayersArrayTypeParserRuleCall_3_0 = (RuleCall)cLayersAssignment_3.eContents().get(0);
		
		//ArrayCreationExpression:
		//	NEW (type=PrimitiveType | type=TypeName)
		//	=> dimensions+=ArrayExpression+ layers+=ArrayType*;
		@Override public ParserRule getRule() { return rule; }
		
		//NEW (type=PrimitiveType | type=TypeName) => dimensions+=ArrayExpression+ layers+=ArrayType*
		public Group getGroup() { return cGroup; }
		
		//NEW
		public RuleCall getNEWTerminalRuleCall_0() { return cNEWTerminalRuleCall_0; }
		
		//type=PrimitiveType | type=TypeName
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//type=PrimitiveType
		public Assignment getTypeAssignment_1_0() { return cTypeAssignment_1_0; }
		
		//PrimitiveType
		public RuleCall getTypePrimitiveTypeParserRuleCall_1_0_0() { return cTypePrimitiveTypeParserRuleCall_1_0_0; }
		
		//type=TypeName
		public Assignment getTypeAssignment_1_1() { return cTypeAssignment_1_1; }
		
		//TypeName
		public RuleCall getTypeTypeNameParserRuleCall_1_1_0() { return cTypeTypeNameParserRuleCall_1_1_0; }
		
		//=> dimensions+=ArrayExpression+
		public Assignment getDimensionsAssignment_2() { return cDimensionsAssignment_2; }
		
		//ArrayExpression
		public RuleCall getDimensionsArrayExpressionParserRuleCall_2_0() { return cDimensionsArrayExpressionParserRuleCall_2_0; }
		
		//layers+=ArrayType*
		public Assignment getLayersAssignment_3() { return cLayersAssignment_3; }
		
		//ArrayType
		public RuleCall getLayersArrayTypeParserRuleCall_3_0() { return cLayersArrayTypeParserRuleCall_3_0; }
	}
	public class ArrayExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.ArrayExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIndexAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIndexExpressionParserRuleCall_1_0 = (RuleCall)cIndexAssignment_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ArrayExpression:
		//	"[" index=Expression "]";
		@Override public ParserRule getRule() { return rule; }
		
		//"[" index=Expression "]"
		public Group getGroup() { return cGroup; }
		
		//"["
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }
		
		//index=Expression
		public Assignment getIndexAssignment_1() { return cIndexAssignment_1; }
		
		//Expression
		public RuleCall getIndexExpressionParserRuleCall_1_0() { return cIndexExpressionParserRuleCall_1_0; }
		
		//"]"
		public Keyword getRightSquareBracketKeyword_2() { return cRightSquareBracketKeyword_2; }
	}
	public class ArrayAccessElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.ArrayAccess");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cReferenceAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final RuleCall cReferenceExpressionNameParserRuleCall_0_0_0 = (RuleCall)cReferenceAssignment_0_0.eContents().get(0);
		private final Assignment cArrayAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final RuleCall cArrayPrimaryNoNewArrayParserRuleCall_0_1_0 = (RuleCall)cArrayAssignment_0_1.eContents().get(0);
		private final Assignment cFieldAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFieldArrayExpressionParserRuleCall_1_0 = (RuleCall)cFieldAssignment_1.eContents().get(0);
		
		//ArrayAccess:
		//	(=> reference=ExpressionName | array=PrimaryNoNewArray) field=ArrayExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//(=> reference=ExpressionName | array=PrimaryNoNewArray) field=ArrayExpression
		public Group getGroup() { return cGroup; }
		
		//=> reference=ExpressionName | array=PrimaryNoNewArray
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//=> reference=ExpressionName
		public Assignment getReferenceAssignment_0_0() { return cReferenceAssignment_0_0; }
		
		//ExpressionName
		public RuleCall getReferenceExpressionNameParserRuleCall_0_0_0() { return cReferenceExpressionNameParserRuleCall_0_0_0; }
		
		//array=PrimaryNoNewArray
		public Assignment getArrayAssignment_0_1() { return cArrayAssignment_0_1; }
		
		//PrimaryNoNewArray
		public RuleCall getArrayPrimaryNoNewArrayParserRuleCall_0_1_0() { return cArrayPrimaryNoNewArrayParserRuleCall_0_1_0; }
		
		//field=ArrayExpression
		public Assignment getFieldAssignment_1() { return cFieldAssignment_1; }
		
		//ArrayExpression
		public RuleCall getFieldArrayExpressionParserRuleCall_1_0() { return cFieldArrayExpressionParserRuleCall_1_0; }
	}
	public class PackageNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.PackageName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//PackageName:
		//	ID (=> "." ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ID (=> "." ID)*
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//(=> "." ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//=> "."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	public class TypeNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.TypeName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//TypeName:
		//	ID (=> "." ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ID (=> "." ID)*
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//(=> "." ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//=> "."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	public class SimpleTypeNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.SimpleTypeName");
		private final RuleCall cIDTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//SimpleTypeName:
		//	ID;
		@Override public ParserRule getRule() { return rule; }
		
		//ID
		public RuleCall getIDTerminalRuleCall() { return cIDTerminalRuleCall; }
	}
	public class ExpressionNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.ExpressionName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//ExpressionName:
		//	ID (=> "." ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ID (=> "." ID)*
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//(=> "." ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//=> "."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	public class MethodNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.MethodName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//MethodName:
		//	ID (=> "." ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ID (=> "." ID)*
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//(=> "." ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//=> "."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	public class AmbiguousNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.AmbiguousName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//AmbiguousName:
		//	ID (=> "." ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ID (=> "." ID)*
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//(=> "." ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//=> "."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	public class LiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.Literal");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIntegerLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFloatingLiteralParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cBooleanLiteralParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cCHARACTER_LITERALTerminalRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cSTRING_LITERALTerminalRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cNULLTerminalRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//Literal:
		//	IntegerLiteral | FloatingLiteral | BooleanLiteral | CHARACTER_LITERAL | STRING_LITERAL | NULL;
		@Override public ParserRule getRule() { return rule; }
		
		//IntegerLiteral | FloatingLiteral | BooleanLiteral | CHARACTER_LITERAL | STRING_LITERAL | NULL
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//IntegerLiteral
		public RuleCall getIntegerLiteralParserRuleCall_0() { return cIntegerLiteralParserRuleCall_0; }
		
		//FloatingLiteral
		public RuleCall getFloatingLiteralParserRuleCall_1() { return cFloatingLiteralParserRuleCall_1; }
		
		//BooleanLiteral
		public RuleCall getBooleanLiteralParserRuleCall_2() { return cBooleanLiteralParserRuleCall_2; }
		
		//CHARACTER_LITERAL
		public RuleCall getCHARACTER_LITERALTerminalRuleCall_3() { return cCHARACTER_LITERALTerminalRuleCall_3; }
		
		//STRING_LITERAL
		public RuleCall getSTRING_LITERALTerminalRuleCall_4() { return cSTRING_LITERALTerminalRuleCall_4; }
		
		//NULL
		public RuleCall getNULLTerminalRuleCall_5() { return cNULLTerminalRuleCall_5; }
	}
	public class IntegerLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.IntegerLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cDECIMAL_NUMERALTerminalRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cHEX_NUMERALTerminalRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final RuleCall cOCTAL_NUMERALTerminalRuleCall_0_2 = (RuleCall)cAlternatives_0.eContents().get(2);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cLKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cLKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		
		//IntegerLiteral:
		//	(DECIMAL_NUMERAL | HEX_NUMERAL | OCTAL_NUMERAL) ("l" | "L")?;
		@Override public ParserRule getRule() { return rule; }
		
		//(DECIMAL_NUMERAL | HEX_NUMERAL | OCTAL_NUMERAL) ("l" | "L")?
		public Group getGroup() { return cGroup; }
		
		//DECIMAL_NUMERAL | HEX_NUMERAL | OCTAL_NUMERAL
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//DECIMAL_NUMERAL
		public RuleCall getDECIMAL_NUMERALTerminalRuleCall_0_0() { return cDECIMAL_NUMERALTerminalRuleCall_0_0; }
		
		//HEX_NUMERAL
		public RuleCall getHEX_NUMERALTerminalRuleCall_0_1() { return cHEX_NUMERALTerminalRuleCall_0_1; }
		
		//OCTAL_NUMERAL
		public RuleCall getOCTAL_NUMERALTerminalRuleCall_0_2() { return cOCTAL_NUMERALTerminalRuleCall_0_2; }
		
		//("l" | "L")?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//"l"
		public Keyword getLKeyword_1_0() { return cLKeyword_1_0; }
		
		//"L"
		public Keyword getLKeyword_1_1() { return cLKeyword_1_1; }
	}
	public class FloatingLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.FloatingLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cAlternatives_0.eContents().get(0);
		private final RuleCall cDECIMAL_NUMERALTerminalRuleCall_0_0_0 = (RuleCall)cGroup_0_0.eContents().get(0);
		private final Keyword cFullStopKeyword_0_0_1 = (Keyword)cGroup_0_0.eContents().get(1);
		private final RuleCall cDECIMAL_NUMERALTerminalRuleCall_0_0_2 = (RuleCall)cGroup_0_0.eContents().get(2);
		private final Group cGroup_0_1 = (Group)cAlternatives_0.eContents().get(1);
		private final Keyword cFullStopKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final RuleCall cDECIMAL_NUMERALTerminalRuleCall_0_1_1 = (RuleCall)cGroup_0_1.eContents().get(1);
		private final RuleCall cDECIMAL_NUMERALTerminalRuleCall_0_2 = (RuleCall)cAlternatives_0.eContents().get(2);
		private final RuleCall cFLOAT_PART_COMPLEMENTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//FloatingLiteral:
		//	(DECIMAL_NUMERAL "." DECIMAL_NUMERAL* | "." DECIMAL_NUMERAL | DECIMAL_NUMERAL) FLOAT_PART_COMPLEMENT;
		@Override public ParserRule getRule() { return rule; }
		
		//(DECIMAL_NUMERAL "." DECIMAL_NUMERAL* | "." DECIMAL_NUMERAL | DECIMAL_NUMERAL) FLOAT_PART_COMPLEMENT
		public Group getGroup() { return cGroup; }
		
		//DECIMAL_NUMERAL "." DECIMAL_NUMERAL* | "." DECIMAL_NUMERAL | DECIMAL_NUMERAL
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//DECIMAL_NUMERAL "." DECIMAL_NUMERAL*
		public Group getGroup_0_0() { return cGroup_0_0; }
		
		//DECIMAL_NUMERAL
		public RuleCall getDECIMAL_NUMERALTerminalRuleCall_0_0_0() { return cDECIMAL_NUMERALTerminalRuleCall_0_0_0; }
		
		//"."
		public Keyword getFullStopKeyword_0_0_1() { return cFullStopKeyword_0_0_1; }
		
		//DECIMAL_NUMERAL*
		public RuleCall getDECIMAL_NUMERALTerminalRuleCall_0_0_2() { return cDECIMAL_NUMERALTerminalRuleCall_0_0_2; }
		
		//"." DECIMAL_NUMERAL
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//"."
		public Keyword getFullStopKeyword_0_1_0() { return cFullStopKeyword_0_1_0; }
		
		//DECIMAL_NUMERAL
		public RuleCall getDECIMAL_NUMERALTerminalRuleCall_0_1_1() { return cDECIMAL_NUMERALTerminalRuleCall_0_1_1; }
		
		//DECIMAL_NUMERAL
		public RuleCall getDECIMAL_NUMERALTerminalRuleCall_0_2() { return cDECIMAL_NUMERALTerminalRuleCall_0_2; }
		
		//FLOAT_PART_COMPLEMENT
		public RuleCall getFLOAT_PART_COMPLEMENTTerminalRuleCall_1() { return cFLOAT_PART_COMPLEMENTTerminalRuleCall_1; }
	}
	public class BooleanLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.BooleanLiteral");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTRUETerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFALSETerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//BooleanLiteral:
		//	TRUE | FALSE;
		@Override public ParserRule getRule() { return rule; }
		
		//TRUE | FALSE
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//TRUE
		public RuleCall getTRUETerminalRuleCall_0() { return cTRUETerminalRuleCall_0; }
		
		//FALSE
		public RuleCall getFALSETerminalRuleCall_1() { return cFALSETerminalRuleCall_1; }
	}
	
	
	private final HeadElements pHead;
	private final CompilationUnitElements pCompilationUnit;
	private final PackageStatementElements pPackageStatement;
	private final ImportStatementElements pImportStatement;
	private final TypeDeclarationElements pTypeDeclaration;
	private final ClassDeclarationElements pClassDeclaration;
	private final ClassModifierElements pClassModifier;
	private final InterfacesElements pInterfaces;
	private final ClassBodyElements pClassBody;
	private final ClassBodyDeclarationElements pClassBodyDeclaration;
	private final ClassMemberDeclarationElements pClassMemberDeclaration;
	private final StaticInitializerElements pStaticInitializer;
	private final ConstructorDeclarationElements pConstructorDeclaration;
	private final ConstructorModifierElements pConstructorModifier;
	private final ConstructorDeclaratorElements pConstructorDeclarator;
	private final FormalParameterElements pFormalParameter;
	private final ExceptionsElements pExceptions;
	private final ConstructorBodyElements pConstructorBody;
	private final ExplicitConstructorInvocationElements pExplicitConstructorInvocation;
	private final FieldDeclarationElements pFieldDeclaration;
	private final FieldModifierElements pFieldModifier;
	private final VariableDeclaratorElements pVariableDeclarator;
	private final VariableDeclaratorIdElements pVariableDeclaratorId;
	private final VariableInitializerElements pVariableInitializer;
	private final MethodDeclarationElements pMethodDeclaration;
	private final MethodHeaderElements pMethodHeader;
	private final ResultTypeElements pResultType;
	private final MethodModifierElements pMethodModifier;
	private final MethodDeclaratorElements pMethodDeclarator;
	private final InterfaceDeclarationElements pInterfaceDeclaration;
	private final InterfaceModifierElements pInterfaceModifier;
	private final ExtendsInterfacesElements pExtendsInterfaces;
	private final InterfaceBodyElements pInterfaceBody;
	private final InterfaceMemberDeclarationElements pInterfaceMemberDeclaration;
	private final ConstantDeclarationElements pConstantDeclaration;
	private final ConstantModifiersElements pConstantModifiers;
	private final AbstractMethodDeclarationElements pAbstractMethodDeclaration;
	private final AbstractMethodModifierElements pAbstractMethodModifier;
	private final ArrayInitializerElements pArrayInitializer;
	private final TypeElements pType;
	private final PrimitiveTypeElements pPrimitiveType;
	private final NumericTypeElements pNumericType;
	private final IntegralTypeElements pIntegralType;
	private final FloatingTypeElements pFloatingType;
	private final ReferenceTypeElements pReferenceType;
	private final ClassTypeElements pClassType;
	private final InterfaceTypeElements pInterfaceType;
	private final ArrayTypeElements pArrayType;
	private final BlockElements pBlock;
	private final BlockStatementElements pBlockStatement;
	private final LocalVariableDeclarationElements pLocalVariableDeclaration;
	private final StatementElements pStatement;
	private final EmptyStatementElements pEmptyStatement;
	private final LabeledStatementElements pLabeledStatement;
	private final StatementExpressionElements pStatementExpression;
	private final IfStatementElements pIfStatement;
	private final SwitchStatementElements pSwitchStatement;
	private final WhileStatementElements pWhileStatement;
	private final DoStatementElements pDoStatement;
	private final ForStatementElements pForStatement;
	private final ForInitElements pForInit;
	private final ForUpdateElements pForUpdate;
	private final BreakStatementElements pBreakStatement;
	private final ContinueStatementElements pContinueStatement;
	private final ReturnStatementElements pReturnStatement;
	private final ThrowsStatementElements pThrowsStatement;
	private final SynchronizedStatementElements pSynchronizedStatement;
	private final TryStatementElements pTryStatement;
	private final ConstantExpressionElements pConstantExpression;
	private final ExpressionElements pExpression;
	private final AssignmentExpressionElements pAssignmentExpression;
	private final AssignmentElements pAssignment;
	private final LeftHandSideElements pLeftHandSide;
	private final AssignmentOperatorElements pAssignmentOperator;
	private final ConditionalExpressionElements pConditionalExpression;
	private final ConditionalOrExpressionElements pConditionalOrExpression;
	private final ConditionalAndExpressionElements pConditionalAndExpression;
	private final InclusiveOrExpressionElements pInclusiveOrExpression;
	private final ExclusiveOrExpressionElements pExclusiveOrExpression;
	private final AndExpressionElements pAndExpression;
	private final EqualityExpressionElements pEqualityExpression;
	private final RelationalExpressionElements pRelationalExpression;
	private final ShiftExpressionElements pShiftExpression;
	private final AdditiveExpressionElements pAdditiveExpression;
	private final MultiplicativeExpressionElements pMultiplicativeExpression;
	private final CastExpressionElements pCastExpression;
	private final NoArrayExpressionElements pNoArrayExpression;
	private final PreDecrementExpressionElements pPreDecrementExpression;
	private final PreIncrementExpressionElements pPreIncrementExpression;
	private final NoArrayExpressionWithoutMinusElements pNoArrayExpressionWithoutMinus;
	private final PostfixExpressionElements pPostfixExpression;
	private final MethodInvocationElements pMethodInvocation;
	private final FieldAccessElements pFieldAccess;
	private final PrimaryElements pPrimary;
	private final PrimaryNoNewArrayElements pPrimaryNoNewArray;
	private final PrimaryNewArrayElements pPrimaryNewArray;
	private final ClassInstanceCreationExpressionElements pClassInstanceCreationExpression;
	private final ArgumentListElements pArgumentList;
	private final ArrayCreationExpressionElements pArrayCreationExpression;
	private final ArrayExpressionElements pArrayExpression;
	private final ArrayAccessElements pArrayAccess;
	private final PackageNameElements pPackageName;
	private final TypeNameElements pTypeName;
	private final SimpleTypeNameElements pSimpleTypeName;
	private final ExpressionNameElements pExpressionName;
	private final MethodNameElements pMethodName;
	private final AmbiguousNameElements pAmbiguousName;
	private final LiteralElements pLiteral;
	private final IntegerLiteralElements pIntegerLiteral;
	private final FloatingLiteralElements pFloatingLiteral;
	private final BooleanLiteralElements pBooleanLiteral;
	private final TerminalRule tDOC_COMMENT;
	private final TerminalRule tSL_COMMENT;
	private final TerminalRule tWS;
	private final TerminalRule tABSTRACT;
	private final TerminalRule tAMPERSAND;
	private final TerminalRule tBOOLEAN;
	private final TerminalRule tBREAK;
	private final TerminalRule tBYTE;
	private final TerminalRule tCASE;
	private final TerminalRule tCATCH;
	private final TerminalRule tCHAR;
	private final TerminalRule tCLASS;
	private final TerminalRule tCONST;
	private final TerminalRule tCONTINUE;
	private final TerminalRule tDEFAULT;
	private final TerminalRule tDO;
	private final TerminalRule tDOUBLE;
	private final TerminalRule tELSE;
	private final TerminalRule tEXTENDS;
	private final TerminalRule tFALSE;
	private final TerminalRule tFINAL;
	private final TerminalRule tFINALLY;
	private final TerminalRule tFLOAT;
	private final TerminalRule tFOR;
	private final TerminalRule tGOTO;
	private final TerminalRule tIF;
	private final TerminalRule tIMPLEMENTS;
	private final TerminalRule tIMPORT;
	private final TerminalRule tINSTANCEOF;
	private final TerminalRule tINT;
	private final TerminalRule tINTERFACE;
	private final TerminalRule tLONG;
	private final TerminalRule tNATIVE;
	private final TerminalRule tNEW;
	private final TerminalRule tNULL;
	private final TerminalRule tPACKAGE;
	private final TerminalRule tPRIVATE;
	private final TerminalRule tPROTECTED;
	private final TerminalRule tPUBLIC;
	private final TerminalRule tRETURN;
	private final TerminalRule tSHORT;
	private final TerminalRule tSTATIC;
	private final TerminalRule tSUPER;
	private final TerminalRule tSWITCH;
	private final TerminalRule tSYNCHRONIZED;
	private final TerminalRule tTHIS;
	private final TerminalRule tTHREADSAFE;
	private final TerminalRule tTHROW;
	private final TerminalRule tTHROWS;
	private final TerminalRule tTRANSIENT;
	private final TerminalRule tTRY;
	private final TerminalRule tTRUE;
	private final TerminalRule tVOID;
	private final TerminalRule tVOLATILE;
	private final TerminalRule tWHILE;
	private final TerminalRule tID;
	private final TerminalRule tDECIMAL_NUMERAL;
	private final TerminalRule tDIGIT;
	private final TerminalRule tNON_ZERO_DIGIT;
	private final TerminalRule tHEX_NUMERAL;
	private final TerminalRule tHEX_DIGIT;
	private final TerminalRule tOCTAL_NUMERAL;
	private final TerminalRule tOCTAL_DIGIT;
	private final TerminalRule tFLOAT_PART_COMPLEMENT;
	private final TerminalRule tEXPONENT_PART;
	private final TerminalRule tEXPONENT_INDICATOR;
	private final TerminalRule tSIGNED_INTEGER;
	private final TerminalRule tFLOAT_TYPE_SUFFIX;
	private final TerminalRule tCHARACTER_LITERAL;
	private final TerminalRule tSTRING_LITERAL;
	
	private final Grammar grammar;

	@Inject
	public MyDslGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.pHead = new HeadElements();
		this.pCompilationUnit = new CompilationUnitElements();
		this.pPackageStatement = new PackageStatementElements();
		this.pImportStatement = new ImportStatementElements();
		this.pTypeDeclaration = new TypeDeclarationElements();
		this.pClassDeclaration = new ClassDeclarationElements();
		this.pClassModifier = new ClassModifierElements();
		this.pInterfaces = new InterfacesElements();
		this.pClassBody = new ClassBodyElements();
		this.pClassBodyDeclaration = new ClassBodyDeclarationElements();
		this.pClassMemberDeclaration = new ClassMemberDeclarationElements();
		this.pStaticInitializer = new StaticInitializerElements();
		this.pConstructorDeclaration = new ConstructorDeclarationElements();
		this.pConstructorModifier = new ConstructorModifierElements();
		this.pConstructorDeclarator = new ConstructorDeclaratorElements();
		this.pFormalParameter = new FormalParameterElements();
		this.pExceptions = new ExceptionsElements();
		this.pConstructorBody = new ConstructorBodyElements();
		this.pExplicitConstructorInvocation = new ExplicitConstructorInvocationElements();
		this.pFieldDeclaration = new FieldDeclarationElements();
		this.pFieldModifier = new FieldModifierElements();
		this.pVariableDeclarator = new VariableDeclaratorElements();
		this.pVariableDeclaratorId = new VariableDeclaratorIdElements();
		this.pVariableInitializer = new VariableInitializerElements();
		this.pMethodDeclaration = new MethodDeclarationElements();
		this.pMethodHeader = new MethodHeaderElements();
		this.pResultType = new ResultTypeElements();
		this.pMethodModifier = new MethodModifierElements();
		this.pMethodDeclarator = new MethodDeclaratorElements();
		this.pInterfaceDeclaration = new InterfaceDeclarationElements();
		this.pInterfaceModifier = new InterfaceModifierElements();
		this.pExtendsInterfaces = new ExtendsInterfacesElements();
		this.pInterfaceBody = new InterfaceBodyElements();
		this.pInterfaceMemberDeclaration = new InterfaceMemberDeclarationElements();
		this.pConstantDeclaration = new ConstantDeclarationElements();
		this.pConstantModifiers = new ConstantModifiersElements();
		this.pAbstractMethodDeclaration = new AbstractMethodDeclarationElements();
		this.pAbstractMethodModifier = new AbstractMethodModifierElements();
		this.pArrayInitializer = new ArrayInitializerElements();
		this.pType = new TypeElements();
		this.pPrimitiveType = new PrimitiveTypeElements();
		this.pNumericType = new NumericTypeElements();
		this.pIntegralType = new IntegralTypeElements();
		this.pFloatingType = new FloatingTypeElements();
		this.pReferenceType = new ReferenceTypeElements();
		this.pClassType = new ClassTypeElements();
		this.pInterfaceType = new InterfaceTypeElements();
		this.pArrayType = new ArrayTypeElements();
		this.pBlock = new BlockElements();
		this.pBlockStatement = new BlockStatementElements();
		this.pLocalVariableDeclaration = new LocalVariableDeclarationElements();
		this.pStatement = new StatementElements();
		this.pEmptyStatement = new EmptyStatementElements();
		this.pLabeledStatement = new LabeledStatementElements();
		this.pStatementExpression = new StatementExpressionElements();
		this.pIfStatement = new IfStatementElements();
		this.pSwitchStatement = new SwitchStatementElements();
		this.pWhileStatement = new WhileStatementElements();
		this.pDoStatement = new DoStatementElements();
		this.pForStatement = new ForStatementElements();
		this.pForInit = new ForInitElements();
		this.pForUpdate = new ForUpdateElements();
		this.pBreakStatement = new BreakStatementElements();
		this.pContinueStatement = new ContinueStatementElements();
		this.pReturnStatement = new ReturnStatementElements();
		this.pThrowsStatement = new ThrowsStatementElements();
		this.pSynchronizedStatement = new SynchronizedStatementElements();
		this.pTryStatement = new TryStatementElements();
		this.pConstantExpression = new ConstantExpressionElements();
		this.pExpression = new ExpressionElements();
		this.pAssignmentExpression = new AssignmentExpressionElements();
		this.pAssignment = new AssignmentElements();
		this.pLeftHandSide = new LeftHandSideElements();
		this.pAssignmentOperator = new AssignmentOperatorElements();
		this.pConditionalExpression = new ConditionalExpressionElements();
		this.pConditionalOrExpression = new ConditionalOrExpressionElements();
		this.pConditionalAndExpression = new ConditionalAndExpressionElements();
		this.pInclusiveOrExpression = new InclusiveOrExpressionElements();
		this.pExclusiveOrExpression = new ExclusiveOrExpressionElements();
		this.pAndExpression = new AndExpressionElements();
		this.pEqualityExpression = new EqualityExpressionElements();
		this.pRelationalExpression = new RelationalExpressionElements();
		this.pShiftExpression = new ShiftExpressionElements();
		this.pAdditiveExpression = new AdditiveExpressionElements();
		this.pMultiplicativeExpression = new MultiplicativeExpressionElements();
		this.pCastExpression = new CastExpressionElements();
		this.pNoArrayExpression = new NoArrayExpressionElements();
		this.pPreDecrementExpression = new PreDecrementExpressionElements();
		this.pPreIncrementExpression = new PreIncrementExpressionElements();
		this.pNoArrayExpressionWithoutMinus = new NoArrayExpressionWithoutMinusElements();
		this.pPostfixExpression = new PostfixExpressionElements();
		this.pMethodInvocation = new MethodInvocationElements();
		this.pFieldAccess = new FieldAccessElements();
		this.pPrimary = new PrimaryElements();
		this.pPrimaryNoNewArray = new PrimaryNoNewArrayElements();
		this.pPrimaryNewArray = new PrimaryNewArrayElements();
		this.pClassInstanceCreationExpression = new ClassInstanceCreationExpressionElements();
		this.pArgumentList = new ArgumentListElements();
		this.pArrayCreationExpression = new ArrayCreationExpressionElements();
		this.pArrayExpression = new ArrayExpressionElements();
		this.pArrayAccess = new ArrayAccessElements();
		this.pPackageName = new PackageNameElements();
		this.pTypeName = new TypeNameElements();
		this.pSimpleTypeName = new SimpleTypeNameElements();
		this.pExpressionName = new ExpressionNameElements();
		this.pMethodName = new MethodNameElements();
		this.pAmbiguousName = new AmbiguousNameElements();
		this.pLiteral = new LiteralElements();
		this.pIntegerLiteral = new IntegerLiteralElements();
		this.pFloatingLiteral = new FloatingLiteralElements();
		this.pBooleanLiteral = new BooleanLiteralElements();
		this.tDOC_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.DOC_COMMENT");
		this.tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.SL_COMMENT");
		this.tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.WS");
		this.tABSTRACT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.ABSTRACT");
		this.tAMPERSAND = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.AMPERSAND");
		this.tBOOLEAN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.BOOLEAN");
		this.tBREAK = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.BREAK");
		this.tBYTE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.BYTE");
		this.tCASE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.CASE");
		this.tCATCH = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.CATCH");
		this.tCHAR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.CHAR");
		this.tCLASS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.CLASS");
		this.tCONST = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.CONST");
		this.tCONTINUE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.CONTINUE");
		this.tDEFAULT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.DEFAULT");
		this.tDO = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.DO");
		this.tDOUBLE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.DOUBLE");
		this.tELSE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.ELSE");
		this.tEXTENDS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.EXTENDS");
		this.tFALSE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.FALSE");
		this.tFINAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.FINAL");
		this.tFINALLY = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.FINALLY");
		this.tFLOAT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.FLOAT");
		this.tFOR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.FOR");
		this.tGOTO = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.GOTO");
		this.tIF = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.IF");
		this.tIMPLEMENTS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.IMPLEMENTS");
		this.tIMPORT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.IMPORT");
		this.tINSTANCEOF = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.INSTANCEOF");
		this.tINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.INT");
		this.tINTERFACE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.INTERFACE");
		this.tLONG = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.LONG");
		this.tNATIVE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.NATIVE");
		this.tNEW = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.NEW");
		this.tNULL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.NULL");
		this.tPACKAGE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.PACKAGE");
		this.tPRIVATE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.PRIVATE");
		this.tPROTECTED = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.PROTECTED");
		this.tPUBLIC = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.PUBLIC");
		this.tRETURN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.RETURN");
		this.tSHORT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.SHORT");
		this.tSTATIC = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.STATIC");
		this.tSUPER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.SUPER");
		this.tSWITCH = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.SWITCH");
		this.tSYNCHRONIZED = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.SYNCHRONIZED");
		this.tTHIS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.THIS");
		this.tTHREADSAFE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.THREADSAFE");
		this.tTHROW = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.THROW");
		this.tTHROWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.THROWS");
		this.tTRANSIENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.TRANSIENT");
		this.tTRY = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.TRY");
		this.tTRUE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.TRUE");
		this.tVOID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.VOID");
		this.tVOLATILE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.VOLATILE");
		this.tWHILE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.WHILE");
		this.tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.ID");
		this.tDECIMAL_NUMERAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.DECIMAL_NUMERAL");
		this.tDIGIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.DIGIT");
		this.tNON_ZERO_DIGIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.NON_ZERO_DIGIT");
		this.tHEX_NUMERAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.HEX_NUMERAL");
		this.tHEX_DIGIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.HEX_DIGIT");
		this.tOCTAL_NUMERAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.OCTAL_NUMERAL");
		this.tOCTAL_DIGIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.OCTAL_DIGIT");
		this.tFLOAT_PART_COMPLEMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.FLOAT_PART_COMPLEMENT");
		this.tEXPONENT_PART = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.EXPONENT_PART");
		this.tEXPONENT_INDICATOR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.EXPONENT_INDICATOR");
		this.tSIGNED_INTEGER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.SIGNED_INTEGER");
		this.tFLOAT_TYPE_SUFFIX = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.FLOAT_TYPE_SUFFIX");
		this.tCHARACTER_LITERAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.CHARACTER_LITERAL");
		this.tSTRING_LITERAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.STRING_LITERAL");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl1.MyDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	//Head:
	//	program=CompilationUnit;
	public HeadElements getHeadAccess() {
		return pHead;
	}
	
	public ParserRule getHeadRule() {
		return getHeadAccess().getRule();
	}
	
	//CompilationUnit:
	//	package=PackageStatement? imports+=ImportStatement* typeDeclarations+=TypeDeclaration*;
	public CompilationUnitElements getCompilationUnitAccess() {
		return pCompilationUnit;
	}
	
	public ParserRule getCompilationUnitRule() {
		return getCompilationUnitAccess().getRule();
	}
	
	//PackageStatement:
	//	=> PACKAGE name=PackageName ";";
	public PackageStatementElements getPackageStatementAccess() {
		return pPackageStatement;
	}
	
	public ParserRule getPackageStatementRule() {
		return getPackageStatementAccess().getRule();
	}
	
	//ImportStatement:
	//	=> IMPORT (package=PackageName ".*" | object=TypeName) ";";
	public ImportStatementElements getImportStatementAccess() {
		return pImportStatement;
	}
	
	public ParserRule getImportStatementRule() {
		return getImportStatementAccess().getRule();
	}
	
	//TypeDeclaration:
	//	doc=DOC_COMMENT? (name=ClassDeclaration | name=InterfaceDeclaration) ";";
	public TypeDeclarationElements getTypeDeclarationAccess() {
		return pTypeDeclaration;
	}
	
	public ParserRule getTypeDeclarationRule() {
		return getTypeDeclarationAccess().getRule();
	}
	
	//ClassDeclaration:
	//	modifiers+=ClassModifier*
	//	CLASS className=ID (EXTENDS extend=ClassType)? implements=Interfaces? body=ClassBody;
	public ClassDeclarationElements getClassDeclarationAccess() {
		return pClassDeclaration;
	}
	
	public ParserRule getClassDeclarationRule() {
		return getClassDeclarationAccess().getRule();
	}
	
	//ClassModifier:
	//	PUBLIC | ABSTRACT | FINAL | PRIVATE;
	public ClassModifierElements getClassModifierAccess() {
		return pClassModifier;
	}
	
	public ParserRule getClassModifierRule() {
		return getClassModifierAccess().getRule();
	}
	
	//Interfaces:
	//	keyword=IMPLEMENTS interfaces+=InterfaceType (=> "," interfaces+=IntegralType)*;
	public InterfacesElements getInterfacesAccess() {
		return pInterfaces;
	}
	
	public ParserRule getInterfacesRule() {
		return getInterfacesAccess().getRule();
	}
	
	//ClassBody:
	//	"{" declarations+=ClassBodyDeclaration* "}";
	public ClassBodyElements getClassBodyAccess() {
		return pClassBody;
	}
	
	public ParserRule getClassBodyRule() {
		return getClassBodyAccess().getRule();
	}
	
	//ClassBodyDeclaration:
	//	member=ClassMemberDeclaration | StaticInitializer | ConstructorDeclaration;
	public ClassBodyDeclarationElements getClassBodyDeclarationAccess() {
		return pClassBodyDeclaration;
	}
	
	public ParserRule getClassBodyDeclarationRule() {
		return getClassBodyDeclarationAccess().getRule();
	}
	
	//ClassMemberDeclaration:
	//	field=FieldDeclaration | MethodDeclaration;
	public ClassMemberDeclarationElements getClassMemberDeclarationAccess() {
		return pClassMemberDeclaration;
	}
	
	public ParserRule getClassMemberDeclarationRule() {
		return getClassMemberDeclarationAccess().getRule();
	}
	
	//StaticInitializer:
	//	STATIC code=Block;
	public StaticInitializerElements getStaticInitializerAccess() {
		return pStaticInitializer;
	}
	
	public ParserRule getStaticInitializerRule() {
		return getStaticInitializerAccess().getRule();
	}
	
	//ConstructorDeclaration:
	//	modifiers+=ConstructorModifier*
	//	header=ConstructorDeclarator throws=Exceptions? body=ConstructorBody;
	public ConstructorDeclarationElements getConstructorDeclarationAccess() {
		return pConstructorDeclaration;
	}
	
	public ParserRule getConstructorDeclarationRule() {
		return getConstructorDeclarationAccess().getRule();
	}
	
	//ConstructorModifier:
	//	PUBLIC | PROTECTED | PRIVATE;
	public ConstructorModifierElements getConstructorModifierAccess() {
		return pConstructorModifier;
	}
	
	public ParserRule getConstructorModifierRule() {
		return getConstructorModifierAccess().getRule();
	}
	
	//ConstructorDeclarator:
	//	name=SimpleTypeName
	//	"(" (params+=FormalParameter (=> "," params+=FormalParameter)*)? ")";
	public ConstructorDeclaratorElements getConstructorDeclaratorAccess() {
		return pConstructorDeclarator;
	}
	
	public ParserRule getConstructorDeclaratorRule() {
		return getConstructorDeclaratorAccess().getRule();
	}
	
	//FormalParameter:
	//	type=Type variable=VariableDeclaratorId;
	public FormalParameterElements getFormalParameterAccess() {
		return pFormalParameter;
	}
	
	public ParserRule getFormalParameterRule() {
		return getFormalParameterAccess().getRule();
	}
	
	//Exceptions:
	//	THROWS exceptions+=ClassType (=> "," exceptions+=ClassType)*;
	public ExceptionsElements getExceptionsAccess() {
		return pExceptions;
	}
	
	public ParserRule getExceptionsRule() {
		return getExceptionsAccess().getRule();
	}
	
	//ConstructorBody:
	//	"{" invocation=ExplicitConstructorInvocation? declarations+=BlockStatement* "}";
	public ConstructorBodyElements getConstructorBodyAccess() {
		return pConstructorBody;
	}
	
	public ParserRule getConstructorBodyRule() {
		return getConstructorBodyAccess().getRule();
	}
	
	//ExplicitConstructorInvocation:
	//	keyword=THIS "(" args=ArgumentList? ")" | keyword=SUPER "(" args=ArgumentList? ")";
	public ExplicitConstructorInvocationElements getExplicitConstructorInvocationAccess() {
		return pExplicitConstructorInvocation;
	}
	
	public ParserRule getExplicitConstructorInvocationRule() {
		return getExplicitConstructorInvocationAccess().getRule();
	}
	
	//FieldDeclaration:
	//	modifiers+=FieldModifier*
	//	type=Type variables+=VariableDeclarator (=> "," variables+=VariableDeclarator)* ";";
	public FieldDeclarationElements getFieldDeclarationAccess() {
		return pFieldDeclaration;
	}
	
	public ParserRule getFieldDeclarationRule() {
		return getFieldDeclarationAccess().getRule();
	}
	
	//FieldModifier:
	//	PUBLIC | PROTECTED | PRIVATE | STATIC | FINAL | TRANSIENT | VOLATILE;
	public FieldModifierElements getFieldModifierAccess() {
		return pFieldModifier;
	}
	
	public ParserRule getFieldModifierRule() {
		return getFieldModifierAccess().getRule();
	}
	
	//VariableDeclarator:
	//	name=VariableDeclaratorId ("=" value=VariableInitializer)?;
	public VariableDeclaratorElements getVariableDeclaratorAccess() {
		return pVariableDeclarator;
	}
	
	public ParserRule getVariableDeclaratorRule() {
		return getVariableDeclaratorAccess().getRule();
	}
	
	//VariableDeclaratorId:
	//	ID "[]"*;
	public VariableDeclaratorIdElements getVariableDeclaratorIdAccess() {
		return pVariableDeclaratorId;
	}
	
	public ParserRule getVariableDeclaratorIdRule() {
		return getVariableDeclaratorIdAccess().getRule();
	}
	
	//VariableInitializer:
	//	Expression | ArrayInitializer;
	public VariableInitializerElements getVariableInitializerAccess() {
		return pVariableInitializer;
	}
	
	public ParserRule getVariableInitializerRule() {
		return getVariableInitializerAccess().getRule();
	}
	
	//MethodDeclaration:
	//	signature=MethodHeader (body=Block | ";");
	public MethodDeclarationElements getMethodDeclarationAccess() {
		return pMethodDeclaration;
	}
	
	public ParserRule getMethodDeclarationRule() {
		return getMethodDeclarationAccess().getRule();
	}
	
	//MethodHeader:
	//	modifiers+=MethodModifier*
	//	returnType=ResultType header=MethodDeclarator throws=Exceptions?;
	public MethodHeaderElements getMethodHeaderAccess() {
		return pMethodHeader;
	}
	
	public ParserRule getMethodHeaderRule() {
		return getMethodHeaderAccess().getRule();
	}
	
	//ResultType:
	//	Type | VOID;
	public ResultTypeElements getResultTypeAccess() {
		return pResultType;
	}
	
	public ParserRule getResultTypeRule() {
		return getResultTypeAccess().getRule();
	}
	
	//MethodModifier:
	//	PUBLIC | PROTECTED | PRIVATE | STATIC | ABSTRACT | FINAL | SYNCHRONIZED | NATIVE;
	public MethodModifierElements getMethodModifierAccess() {
		return pMethodModifier;
	}
	
	public ParserRule getMethodModifierRule() {
		return getMethodModifierAccess().getRule();
	}
	
	//MethodDeclarator:
	//	name=ID
	//	"(" (params+=FormalParameter (=> "," params+=FormalParameter)*)? ")";
	public MethodDeclaratorElements getMethodDeclaratorAccess() {
		return pMethodDeclarator;
	}
	
	public ParserRule getMethodDeclaratorRule() {
		return getMethodDeclaratorAccess().getRule();
	}
	
	//InterfaceDeclaration:
	//	modifiers+=InterfaceModifier*
	//	INTERFACE name=ID extends=ExtendsInterfaces? body=InterfaceBody;
	public InterfaceDeclarationElements getInterfaceDeclarationAccess() {
		return pInterfaceDeclaration;
	}
	
	public ParserRule getInterfaceDeclarationRule() {
		return getInterfaceDeclarationAccess().getRule();
	}
	
	//InterfaceModifier:
	//	PUBLIC | ABSTRACT;
	public InterfaceModifierElements getInterfaceModifierAccess() {
		return pInterfaceModifier;
	}
	
	public ParserRule getInterfaceModifierRule() {
		return getInterfaceModifierAccess().getRule();
	}
	
	//ExtendsInterfaces:
	//	keyword=EXTENDS interfaces+=InterfaceType ("," interfaces+=InterfaceType)*;
	public ExtendsInterfacesElements getExtendsInterfacesAccess() {
		return pExtendsInterfaces;
	}
	
	public ParserRule getExtendsInterfacesRule() {
		return getExtendsInterfacesAccess().getRule();
	}
	
	//InterfaceBody:
	//	"{" declarations+=InterfaceMemberDeclaration* "}";
	public InterfaceBodyElements getInterfaceBodyAccess() {
		return pInterfaceBody;
	}
	
	public ParserRule getInterfaceBodyRule() {
		return getInterfaceBodyAccess().getRule();
	}
	
	//InterfaceMemberDeclaration:
	//	ConstantDeclaration | AbstractMethodDeclaration;
	public InterfaceMemberDeclarationElements getInterfaceMemberDeclarationAccess() {
		return pInterfaceMemberDeclaration;
	}
	
	public ParserRule getInterfaceMemberDeclarationRule() {
		return getInterfaceMemberDeclarationAccess().getRule();
	}
	
	//ConstantDeclaration:
	//	modifiers+=ConstantModifiers* type=Type constant=VariableDeclarator;
	public ConstantDeclarationElements getConstantDeclarationAccess() {
		return pConstantDeclaration;
	}
	
	public ParserRule getConstantDeclarationRule() {
		return getConstantDeclarationAccess().getRule();
	}
	
	//ConstantModifiers:
	//	PUBLIC | STATIC | FINAL;
	public ConstantModifiersElements getConstantModifiersAccess() {
		return pConstantModifiers;
	}
	
	public ParserRule getConstantModifiersRule() {
		return getConstantModifiersAccess().getRule();
	}
	
	//AbstractMethodDeclaration:
	//	modifiers+=AbstractMethodModifier*
	//	returnType=ResultType header=MethodDeclarator throws=Exceptions? ";";
	public AbstractMethodDeclarationElements getAbstractMethodDeclarationAccess() {
		return pAbstractMethodDeclaration;
	}
	
	public ParserRule getAbstractMethodDeclarationRule() {
		return getAbstractMethodDeclarationAccess().getRule();
	}
	
	//AbstractMethodModifier:
	//	PUBLIC | ABSTRACT;
	public AbstractMethodModifierElements getAbstractMethodModifierAccess() {
		return pAbstractMethodModifier;
	}
	
	public ParserRule getAbstractMethodModifierRule() {
		return getAbstractMethodModifierAccess().getRule();
	}
	
	//ArrayInitializer:
	//	"{" (values+=VariableInitializer (=> "," values+=VariableInitializer)*)? ","? "}";
	public ArrayInitializerElements getArrayInitializerAccess() {
		return pArrayInitializer;
	}
	
	public ParserRule getArrayInitializerRule() {
		return getArrayInitializerAccess().getRule();
	}
	
	//Type:
	//	(PrimitiveType | ReferenceType) ArrayType*;
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}
	
	//PrimitiveType:
	//	NumericType | BOOLEAN;
	public PrimitiveTypeElements getPrimitiveTypeAccess() {
		return pPrimitiveType;
	}
	
	public ParserRule getPrimitiveTypeRule() {
		return getPrimitiveTypeAccess().getRule();
	}
	
	//NumericType:
	//	IntegralType | FloatingType;
	public NumericTypeElements getNumericTypeAccess() {
		return pNumericType;
	}
	
	public ParserRule getNumericTypeRule() {
		return getNumericTypeAccess().getRule();
	}
	
	//IntegralType:
	//	BYTE | SHORT | INT | LONG | CHAR;
	public IntegralTypeElements getIntegralTypeAccess() {
		return pIntegralType;
	}
	
	public ParserRule getIntegralTypeRule() {
		return getIntegralTypeAccess().getRule();
	}
	
	//FloatingType:
	//	FLOAT | DOUBLE;
	public FloatingTypeElements getFloatingTypeAccess() {
		return pFloatingType;
	}
	
	public ParserRule getFloatingTypeRule() {
		return getFloatingTypeAccess().getRule();
	}
	
	//ReferenceType:
	//	TypeName;
	public ReferenceTypeElements getReferenceTypeAccess() {
		return pReferenceType;
	}
	
	public ParserRule getReferenceTypeRule() {
		return getReferenceTypeAccess().getRule();
	}
	
	//ClassType:
	//	TypeName;
	public ClassTypeElements getClassTypeAccess() {
		return pClassType;
	}
	
	public ParserRule getClassTypeRule() {
		return getClassTypeAccess().getRule();
	}
	
	//InterfaceType:
	//	TypeName;
	public InterfaceTypeElements getInterfaceTypeAccess() {
		return pInterfaceType;
	}
	
	public ParserRule getInterfaceTypeRule() {
		return getInterfaceTypeAccess().getRule();
	}
	
	//ArrayType:
	//	"[]";
	public ArrayTypeElements getArrayTypeAccess() {
		return pArrayType;
	}
	
	public ParserRule getArrayTypeRule() {
		return getArrayTypeAccess().getRule();
	}
	
	//Block:
	//	"{" declarations+=BlockStatement* "}";
	public BlockElements getBlockAccess() {
		return pBlock;
	}
	
	public ParserRule getBlockRule() {
		return getBlockAccess().getRule();
	}
	
	//BlockStatement:
	//	LocalVariableDeclaration ";" | Statement;
	public BlockStatementElements getBlockStatementAccess() {
		return pBlockStatement;
	}
	
	public ParserRule getBlockStatementRule() {
		return getBlockStatementAccess().getRule();
	}
	
	//LocalVariableDeclaration:
	//	type=Type variables+=VariableDeclarator (=> "," variables+=VariableDeclarator)*;
	public LocalVariableDeclarationElements getLocalVariableDeclarationAccess() {
		return pLocalVariableDeclaration;
	}
	
	public ParserRule getLocalVariableDeclarationRule() {
		return getLocalVariableDeclarationAccess().getRule();
	}
	
	//Statement:
	//	EmptyStatement
	//	| LabeledStatement
	//	| IfStatement
	//	| WhileStatement
	//	| ForStatement
	//	| Block
	//	| StatementExpression ";" | SwitchStatement
	//	| DoStatement
	//	| BreakStatement
	//	| ContinueStatement
	//	| ReturnStatement
	//	| SynchronizedStatement
	//	| ThrowsStatement
	//	| TryStatement;
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}
	
	//EmptyStatement:
	//	";";
	public EmptyStatementElements getEmptyStatementAccess() {
		return pEmptyStatement;
	}
	
	public ParserRule getEmptyStatementRule() {
		return getEmptyStatementAccess().getRule();
	}
	
	//LabeledStatement:
	//	label=ID ":" statement=Statement;
	public LabeledStatementElements getLabeledStatementAccess() {
		return pLabeledStatement;
	}
	
	public ParserRule getLabeledStatementRule() {
		return getLabeledStatementAccess().getRule();
	}
	
	//StatementExpression:
	//	=> Assignment
	//	| PreIncrementExpression
	//	| PreDecrementExpression
	//	| => PostfixExpression
	//	| => MethodInvocation
	//	| => ClassInstanceCreationExpression;
	public StatementExpressionElements getStatementExpressionAccess() {
		return pStatementExpression;
	}
	
	public ParserRule getStatementExpressionRule() {
		return getStatementExpressionAccess().getRule();
	}
	
	//IfStatement:
	//	IF "(" condition?=Expression ")" then=Statement (=> ELSE else=Statement)?;
	public IfStatementElements getIfStatementAccess() {
		return pIfStatement;
	}
	
	public ParserRule getIfStatementRule() {
		return getIfStatementAccess().getRule();
	}
	
	//SwitchStatement:
	//	SWITCH "(" expression=Expression ")" "{" (CASE constants+=ConstantExpression ":" | DEFAULT ":" |
	//	statements+=BlockStatement)* "}";
	public SwitchStatementElements getSwitchStatementAccess() {
		return pSwitchStatement;
	}
	
	public ParserRule getSwitchStatementRule() {
		return getSwitchStatementAccess().getRule();
	}
	
	//WhileStatement:
	//	WHILE "(" condition?=Expression ")" statement=Statement;
	public WhileStatementElements getWhileStatementAccess() {
		return pWhileStatement;
	}
	
	public ParserRule getWhileStatementRule() {
		return getWhileStatementAccess().getRule();
	}
	
	//DoStatement:
	//	DO statement=Statement WHILE "(" condition?=Expression ")" ";";
	public DoStatementElements getDoStatementAccess() {
		return pDoStatement;
	}
	
	public ParserRule getDoStatementRule() {
		return getDoStatementAccess().getRule();
	}
	
	//ForStatement:
	//	FOR "(" initExpr=ForInit? ";" condition?=Expression? ";" updateExpr=ForUpdate? ")"
	//	statement=Statement;
	public ForStatementElements getForStatementAccess() {
		return pForStatement;
	}
	
	public ParserRule getForStatementRule() {
		return getForStatementAccess().getRule();
	}
	
	//ForInit:
	//	expressions+=StatementExpression (=> "," expressions+=StatementExpression)* | localVariable=LocalVariableDeclaration;
	public ForInitElements getForInitAccess() {
		return pForInit;
	}
	
	public ParserRule getForInitRule() {
		return getForInitAccess().getRule();
	}
	
	//ForUpdate:
	//	expressions+=StatementExpression (=> "," expressions+=StatementExpression)*;
	public ForUpdateElements getForUpdateAccess() {
		return pForUpdate;
	}
	
	public ParserRule getForUpdateRule() {
		return getForUpdateAccess().getRule();
	}
	
	//BreakStatement:
	//	BREAK reference=ID? ";";
	public BreakStatementElements getBreakStatementAccess() {
		return pBreakStatement;
	}
	
	public ParserRule getBreakStatementRule() {
		return getBreakStatementAccess().getRule();
	}
	
	//ContinueStatement:
	//	CONTINUE reference=ID? ";";
	public ContinueStatementElements getContinueStatementAccess() {
		return pContinueStatement;
	}
	
	public ParserRule getContinueStatementRule() {
		return getContinueStatementAccess().getRule();
	}
	
	//ReturnStatement:
	//	RETURN expression=Expression? ";";
	public ReturnStatementElements getReturnStatementAccess() {
		return pReturnStatement;
	}
	
	public ParserRule getReturnStatementRule() {
		return getReturnStatementAccess().getRule();
	}
	
	//ThrowsStatement:
	//	THROW expression=Expression ";";
	public ThrowsStatementElements getThrowsStatementAccess() {
		return pThrowsStatement;
	}
	
	public ParserRule getThrowsStatementRule() {
		return getThrowsStatementAccess().getRule();
	}
	
	//SynchronizedStatement:
	//	SYNCHRONIZED "(" expression=Expression ")" body=Block;
	public SynchronizedStatementElements getSynchronizedStatementAccess() {
		return pSynchronizedStatement;
	}
	
	public ParserRule getSynchronizedStatementRule() {
		return getSynchronizedStatementAccess().getRule();
	}
	
	//TryStatement:
	//	TRY tryBody=Block (=> CATCH "(" params+=FormalParameter ")" catchesBody+=Block)* (=> FINALLY finallyBody=Block)?;
	public TryStatementElements getTryStatementAccess() {
		return pTryStatement;
	}
	
	public ParserRule getTryStatementRule() {
		return getTryStatementAccess().getRule();
	}
	
	//ConstantExpression:
	//	Expression;
	public ConstantExpressionElements getConstantExpressionAccess() {
		return pConstantExpression;
	}
	
	public ParserRule getConstantExpressionRule() {
		return getConstantExpressionAccess().getRule();
	}
	
	//Expression:
	//	AssignmentExpression;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//AssignmentExpression:
	//	=> ConditionalExpression | Assignment;
	public AssignmentExpressionElements getAssignmentExpressionAccess() {
		return pAssignmentExpression;
	}
	
	public ParserRule getAssignmentExpressionRule() {
		return getAssignmentExpressionAccess().getRule();
	}
	
	//Assignment:
	//	object=LeftHandSide operator=AssignmentOperator value=AssignmentExpression;
	public AssignmentElements getAssignmentAccess() {
		return pAssignment;
	}
	
	public ParserRule getAssignmentRule() {
		return getAssignmentAccess().getRule();
	}
	
	//LeftHandSide:
	//	=> ExpressionName | => FieldAccess | => ArrayAccess;
	public LeftHandSideElements getLeftHandSideAccess() {
		return pLeftHandSide;
	}
	
	public ParserRule getLeftHandSideRule() {
		return getLeftHandSideAccess().getRule();
	}
	
	//AssignmentOperator:
	//	"=" | "*=" | "/=" | "%=" | "+=" | "-=" | "<<=" | ">>=" | ">>>=" | "&=" | "^=" | "|=";
	public AssignmentOperatorElements getAssignmentOperatorAccess() {
		return pAssignmentOperator;
	}
	
	public ParserRule getAssignmentOperatorRule() {
		return getAssignmentOperatorAccess().getRule();
	}
	
	//ConditionalExpression:
	//	condition=ConditionalOrExpression (=> "?" then=Expression ":" else=ConditionalExpression)?;
	public ConditionalExpressionElements getConditionalExpressionAccess() {
		return pConditionalExpression;
	}
	
	public ParserRule getConditionalExpressionRule() {
		return getConditionalExpressionAccess().getRule();
	}
	
	//ConditionalOrExpression:
	//	operands+=ConditionalAndExpression (=> operators+="||" operands+=ConditionalAndExpression)*;
	public ConditionalOrExpressionElements getConditionalOrExpressionAccess() {
		return pConditionalOrExpression;
	}
	
	public ParserRule getConditionalOrExpressionRule() {
		return getConditionalOrExpressionAccess().getRule();
	}
	
	//ConditionalAndExpression:
	//	operands+=InclusiveOrExpression (=> operators+="&&" operands+=InclusiveOrExpression)*;
	public ConditionalAndExpressionElements getConditionalAndExpressionAccess() {
		return pConditionalAndExpression;
	}
	
	public ParserRule getConditionalAndExpressionRule() {
		return getConditionalAndExpressionAccess().getRule();
	}
	
	//InclusiveOrExpression:
	//	operands+=ExclusiveOrExpression (=> operators+="|" operands+=ExclusiveOrExpression)*;
	public InclusiveOrExpressionElements getInclusiveOrExpressionAccess() {
		return pInclusiveOrExpression;
	}
	
	public ParserRule getInclusiveOrExpressionRule() {
		return getInclusiveOrExpressionAccess().getRule();
	}
	
	//ExclusiveOrExpression:
	//	operands+=AndExpression (=> operators+="^" operands+=AndExpression)*;
	public ExclusiveOrExpressionElements getExclusiveOrExpressionAccess() {
		return pExclusiveOrExpression;
	}
	
	public ParserRule getExclusiveOrExpressionRule() {
		return getExclusiveOrExpressionAccess().getRule();
	}
	
	//AndExpression:
	//	operands+=EqualityExpression (=> operators+="&" operands+=EqualityExpression)*;
	public AndExpressionElements getAndExpressionAccess() {
		return pAndExpression;
	}
	
	public ParserRule getAndExpressionRule() {
		return getAndExpressionAccess().getRule();
	}
	
	//EqualityExpression:
	//	operands+=RelationalExpression (=> operators+=("==" | "!=") operands+=RelationalExpression)*;
	public EqualityExpressionElements getEqualityExpressionAccess() {
		return pEqualityExpression;
	}
	
	public ParserRule getEqualityExpressionRule() {
		return getEqualityExpressionAccess().getRule();
	}
	
	//RelationalExpression:
	//	operands+=ShiftExpression (=> (operators+=("<" | ">" | "<=" | ">=") operands+=ShiftExpression) | =>
	//	(operators+=INSTANCEOF classes+=ReferenceType))*;
	public RelationalExpressionElements getRelationalExpressionAccess() {
		return pRelationalExpression;
	}
	
	public ParserRule getRelationalExpressionRule() {
		return getRelationalExpressionAccess().getRule();
	}
	
	//ShiftExpression:
	//	operands+=AdditiveExpression (=> operators+=("<<" | ">>" | ">>>") operands+=AdditiveExpression)*;
	public ShiftExpressionElements getShiftExpressionAccess() {
		return pShiftExpression;
	}
	
	public ParserRule getShiftExpressionRule() {
		return getShiftExpressionAccess().getRule();
	}
	
	//AdditiveExpression:
	//	operands+=MultiplicativeExpression (=> operators+=("+" | "-") operands+=MultiplicativeExpression)*;
	public AdditiveExpressionElements getAdditiveExpressionAccess() {
		return pAdditiveExpression;
	}
	
	public ParserRule getAdditiveExpressionRule() {
		return getAdditiveExpressionAccess().getRule();
	}
	
	//MultiplicativeExpression:
	//	operands+=NoArrayExpression (=> operators+=("*" | "/" | "%") operands+=NoArrayExpression)*;
	public MultiplicativeExpressionElements getMultiplicativeExpressionAccess() {
		return pMultiplicativeExpression;
	}
	
	public ParserRule getMultiplicativeExpressionRule() {
		return getMultiplicativeExpressionAccess().getRule();
	}
	
	//CastExpression:
	//	=> "(" type=PrimitiveType ")" operand=NoArrayExpression
	//	| => "(" type=ReferenceType ")" operand=NoArrayExpressionWithoutMinus;
	public CastExpressionElements getCastExpressionAccess() {
		return pCastExpression;
	}
	
	public ParserRule getCastExpressionRule() {
		return getCastExpressionAccess().getRule();
	}
	
	//NoArrayExpression:
	//	PreIncrementExpression
	//	| PreDecrementExpression
	//	| operator="+" operand=NoArrayExpression
	//	| operator="-" operand=NoArrayExpression
	//	| NoArrayExpressionWithoutMinus;
	public NoArrayExpressionElements getNoArrayExpressionAccess() {
		return pNoArrayExpression;
	}
	
	public ParserRule getNoArrayExpressionRule() {
		return getNoArrayExpressionAccess().getRule();
	}
	
	//PreDecrementExpression:
	//	operator="--" operand=NoArrayExpression;
	public PreDecrementExpressionElements getPreDecrementExpressionAccess() {
		return pPreDecrementExpression;
	}
	
	public ParserRule getPreDecrementExpressionRule() {
		return getPreDecrementExpressionAccess().getRule();
	}
	
	//PreIncrementExpression:
	//	operator="++" operand=NoArrayExpression;
	public PreIncrementExpressionElements getPreIncrementExpressionAccess() {
		return pPreIncrementExpression;
	}
	
	public ParserRule getPreIncrementExpressionRule() {
		return getPreIncrementExpressionAccess().getRule();
	}
	
	//NoArrayExpressionWithoutMinus:
	//	=> PostfixExpression
	//	| operator="~" operand=NoArrayExpression
	//	| operator="!" operand=NoArrayExpression
	//	| CastExpression;
	public NoArrayExpressionWithoutMinusElements getNoArrayExpressionWithoutMinusAccess() {
		return pNoArrayExpressionWithoutMinus;
	}
	
	public ParserRule getNoArrayExpressionWithoutMinusRule() {
		return getNoArrayExpressionWithoutMinusAccess().getRule();
	}
	
	//PostfixExpression:
	//	(=> object=Primary | reference=ExpressionName) operators+=("--" | "++")*;
	public PostfixExpressionElements getPostfixExpressionAccess() {
		return pPostfixExpression;
	}
	
	public ParserRule getPostfixExpressionRule() {
		return getPostfixExpressionAccess().getRule();
	}
	
	//MethodInvocation:
	//	method=MethodName "(" args=ArgumentList? ")" | => (object=Primary "." method=ID "(" args=ArgumentList? ")") | =>
	//	(keyword=SUPER "." method=ID "(" args=ArgumentList? ")");
	public MethodInvocationElements getMethodInvocationAccess() {
		return pMethodInvocation;
	}
	
	public ParserRule getMethodInvocationRule() {
		return getMethodInvocationAccess().getRule();
	}
	
	//FieldAccess:
	//	object=Primary "." field=ID | => (keyword=SUPER "." field=ID);
	public FieldAccessElements getFieldAccessAccess() {
		return pFieldAccess;
	}
	
	public ParserRule getFieldAccessRule() {
		return getFieldAccessAccess().getRule();
	}
	
	//Primary:
	//	=> PrimaryNoNewArray | PrimaryNewArray;
	public PrimaryElements getPrimaryAccess() {
		return pPrimary;
	}
	
	public ParserRule getPrimaryRule() {
		return getPrimaryAccess().getRule();
	}
	
	//PrimaryNoNewArray:
	//	(literal=Literal
	//	| keyword=THIS
	//	| "(" Expression ")" | class=ClassInstanceCreationExpression
	//	| keyword=SUPER
	//	| method=MethodName "(" args+=ArgumentList? ")" | reference=ExpressionName dimensions+=ArrayExpression)
	//	=> ("." fields+=ID ("(" args+=ArgumentList? ")")? | dimensions+=ArrayExpression)*;
	public PrimaryNoNewArrayElements getPrimaryNoNewArrayAccess() {
		return pPrimaryNoNewArray;
	}
	
	public ParserRule getPrimaryNoNewArrayRule() {
		return getPrimaryNoNewArrayAccess().getRule();
	}
	
	//PrimaryNewArray:
	//	array=ArrayCreationExpression
	//	=> ("." fields+=ID ("(" args+=ArgumentList? ")")? | dimensions+=ArrayExpression)*;
	public PrimaryNewArrayElements getPrimaryNewArrayAccess() {
		return pPrimaryNewArray;
	}
	
	public ParserRule getPrimaryNewArrayRule() {
		return getPrimaryNewArrayAccess().getRule();
	}
	
	//ClassInstanceCreationExpression:
	//	NEW type=ClassType "(" args=ArgumentList? ")";
	public ClassInstanceCreationExpressionElements getClassInstanceCreationExpressionAccess() {
		return pClassInstanceCreationExpression;
	}
	
	public ParserRule getClassInstanceCreationExpressionRule() {
		return getClassInstanceCreationExpressionAccess().getRule();
	}
	
	//ArgumentList:
	//	declarations+=Expression (=> "," declarations+=Expression)*;
	public ArgumentListElements getArgumentListAccess() {
		return pArgumentList;
	}
	
	public ParserRule getArgumentListRule() {
		return getArgumentListAccess().getRule();
	}
	
	//ArrayCreationExpression:
	//	NEW (type=PrimitiveType | type=TypeName)
	//	=> dimensions+=ArrayExpression+ layers+=ArrayType*;
	public ArrayCreationExpressionElements getArrayCreationExpressionAccess() {
		return pArrayCreationExpression;
	}
	
	public ParserRule getArrayCreationExpressionRule() {
		return getArrayCreationExpressionAccess().getRule();
	}
	
	//ArrayExpression:
	//	"[" index=Expression "]";
	public ArrayExpressionElements getArrayExpressionAccess() {
		return pArrayExpression;
	}
	
	public ParserRule getArrayExpressionRule() {
		return getArrayExpressionAccess().getRule();
	}
	
	//ArrayAccess:
	//	(=> reference=ExpressionName | array=PrimaryNoNewArray) field=ArrayExpression;
	public ArrayAccessElements getArrayAccessAccess() {
		return pArrayAccess;
	}
	
	public ParserRule getArrayAccessRule() {
		return getArrayAccessAccess().getRule();
	}
	
	//PackageName:
	//	ID (=> "." ID)*;
	public PackageNameElements getPackageNameAccess() {
		return pPackageName;
	}
	
	public ParserRule getPackageNameRule() {
		return getPackageNameAccess().getRule();
	}
	
	//TypeName:
	//	ID (=> "." ID)*;
	public TypeNameElements getTypeNameAccess() {
		return pTypeName;
	}
	
	public ParserRule getTypeNameRule() {
		return getTypeNameAccess().getRule();
	}
	
	//SimpleTypeName:
	//	ID;
	public SimpleTypeNameElements getSimpleTypeNameAccess() {
		return pSimpleTypeName;
	}
	
	public ParserRule getSimpleTypeNameRule() {
		return getSimpleTypeNameAccess().getRule();
	}
	
	//ExpressionName:
	//	ID (=> "." ID)*;
	public ExpressionNameElements getExpressionNameAccess() {
		return pExpressionName;
	}
	
	public ParserRule getExpressionNameRule() {
		return getExpressionNameAccess().getRule();
	}
	
	//MethodName:
	//	ID (=> "." ID)*;
	public MethodNameElements getMethodNameAccess() {
		return pMethodName;
	}
	
	public ParserRule getMethodNameRule() {
		return getMethodNameAccess().getRule();
	}
	
	//AmbiguousName:
	//	ID (=> "." ID)*;
	public AmbiguousNameElements getAmbiguousNameAccess() {
		return pAmbiguousName;
	}
	
	public ParserRule getAmbiguousNameRule() {
		return getAmbiguousNameAccess().getRule();
	}
	
	//Literal:
	//	IntegerLiteral | FloatingLiteral | BooleanLiteral | CHARACTER_LITERAL | STRING_LITERAL | NULL;
	public LiteralElements getLiteralAccess() {
		return pLiteral;
	}
	
	public ParserRule getLiteralRule() {
		return getLiteralAccess().getRule();
	}
	
	//IntegerLiteral:
	//	(DECIMAL_NUMERAL | HEX_NUMERAL | OCTAL_NUMERAL) ("l" | "L")?;
	public IntegerLiteralElements getIntegerLiteralAccess() {
		return pIntegerLiteral;
	}
	
	public ParserRule getIntegerLiteralRule() {
		return getIntegerLiteralAccess().getRule();
	}
	
	//FloatingLiteral:
	//	(DECIMAL_NUMERAL "." DECIMAL_NUMERAL* | "." DECIMAL_NUMERAL | DECIMAL_NUMERAL) FLOAT_PART_COMPLEMENT;
	public FloatingLiteralElements getFloatingLiteralAccess() {
		return pFloatingLiteral;
	}
	
	public ParserRule getFloatingLiteralRule() {
		return getFloatingLiteralAccess().getRule();
	}
	
	//BooleanLiteral:
	//	TRUE | FALSE;
	public BooleanLiteralElements getBooleanLiteralAccess() {
		return pBooleanLiteral;
	}
	
	public ParserRule getBooleanLiteralRule() {
		return getBooleanLiteralAccess().getRule();
	}
	
	//terminal DOC_COMMENT:
	//	"/*"->"*/";
	public TerminalRule getDOC_COMMENTRule() {
		return tDOC_COMMENT;
	}
	
	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return tSL_COMMENT;
	}
	
	//terminal WS:
	//	" " | "\t" | "\r" | "\n"+;
	public TerminalRule getWSRule() {
		return tWS;
	}
	
	//terminal ABSTRACT:
	//	"abstract";
	public TerminalRule getABSTRACTRule() {
		return tABSTRACT;
	}
	
	//terminal AMPERSAND:
	//	"ampersand";
	public TerminalRule getAMPERSANDRule() {
		return tAMPERSAND;
	}
	
	//terminal BOOLEAN:
	//	"boolean";
	public TerminalRule getBOOLEANRule() {
		return tBOOLEAN;
	}
	
	//terminal BREAK:
	//	"break";
	public TerminalRule getBREAKRule() {
		return tBREAK;
	}
	
	//terminal BYTE:
	//	"byte";
	public TerminalRule getBYTERule() {
		return tBYTE;
	}
	
	//terminal CASE:
	//	"case";
	public TerminalRule getCASERule() {
		return tCASE;
	}
	
	//terminal CATCH:
	//	"catch";
	public TerminalRule getCATCHRule() {
		return tCATCH;
	}
	
	//terminal CHAR:
	//	"char";
	public TerminalRule getCHARRule() {
		return tCHAR;
	}
	
	//terminal CLASS:
	//	"class";
	public TerminalRule getCLASSRule() {
		return tCLASS;
	}
	
	//terminal CONST:
	//	"const";
	public TerminalRule getCONSTRule() {
		return tCONST;
	}
	
	//terminal CONTINUE:
	//	"continue";
	public TerminalRule getCONTINUERule() {
		return tCONTINUE;
	}
	
	//terminal DEFAULT:
	//	"default";
	public TerminalRule getDEFAULTRule() {
		return tDEFAULT;
	}
	
	//terminal DO:
	//	"do";
	public TerminalRule getDORule() {
		return tDO;
	}
	
	//terminal DOUBLE:
	//	"double";
	public TerminalRule getDOUBLERule() {
		return tDOUBLE;
	}
	
	//terminal ELSE:
	//	"else";
	public TerminalRule getELSERule() {
		return tELSE;
	}
	
	//terminal EXTENDS:
	//	"extends";
	public TerminalRule getEXTENDSRule() {
		return tEXTENDS;
	}
	
	//terminal FALSE:
	//	"false";
	public TerminalRule getFALSERule() {
		return tFALSE;
	}
	
	//terminal FINAL:
	//	"final";
	public TerminalRule getFINALRule() {
		return tFINAL;
	}
	
	//terminal FINALLY:
	//	"finally";
	public TerminalRule getFINALLYRule() {
		return tFINALLY;
	}
	
	//terminal FLOAT:
	//	"float";
	public TerminalRule getFLOATRule() {
		return tFLOAT;
	}
	
	//terminal FOR:
	//	"for";
	public TerminalRule getFORRule() {
		return tFOR;
	}
	
	//terminal GOTO:
	//	"goto";
	public TerminalRule getGOTORule() {
		return tGOTO;
	}
	
	//terminal IF:
	//	"if";
	public TerminalRule getIFRule() {
		return tIF;
	}
	
	//terminal IMPLEMENTS:
	//	"implements";
	public TerminalRule getIMPLEMENTSRule() {
		return tIMPLEMENTS;
	}
	
	//terminal IMPORT:
	//	"import";
	public TerminalRule getIMPORTRule() {
		return tIMPORT;
	}
	
	//terminal INSTANCEOF:
	//	"instanceof";
	public TerminalRule getINSTANCEOFRule() {
		return tINSTANCEOF;
	}
	
	//terminal INT:
	//	"int";
	public TerminalRule getINTRule() {
		return tINT;
	}
	
	//terminal INTERFACE:
	//	"interface";
	public TerminalRule getINTERFACERule() {
		return tINTERFACE;
	}
	
	//terminal LONG:
	//	"long";
	public TerminalRule getLONGRule() {
		return tLONG;
	}
	
	//terminal NATIVE:
	//	"native";
	public TerminalRule getNATIVERule() {
		return tNATIVE;
	}
	
	//terminal NEW:
	//	"new";
	public TerminalRule getNEWRule() {
		return tNEW;
	}
	
	//terminal NULL:
	//	"null";
	public TerminalRule getNULLRule() {
		return tNULL;
	}
	
	//terminal PACKAGE:
	//	"package";
	public TerminalRule getPACKAGERule() {
		return tPACKAGE;
	}
	
	//terminal PRIVATE:
	//	"private";
	public TerminalRule getPRIVATERule() {
		return tPRIVATE;
	}
	
	//terminal PROTECTED:
	//	"protected";
	public TerminalRule getPROTECTEDRule() {
		return tPROTECTED;
	}
	
	//terminal PUBLIC:
	//	"public";
	public TerminalRule getPUBLICRule() {
		return tPUBLIC;
	}
	
	//terminal RETURN:
	//	"return";
	public TerminalRule getRETURNRule() {
		return tRETURN;
	}
	
	//terminal SHORT:
	//	"short";
	public TerminalRule getSHORTRule() {
		return tSHORT;
	}
	
	//terminal STATIC:
	//	"static";
	public TerminalRule getSTATICRule() {
		return tSTATIC;
	}
	
	//terminal SUPER:
	//	"super";
	public TerminalRule getSUPERRule() {
		return tSUPER;
	}
	
	//terminal SWITCH:
	//	"switch";
	public TerminalRule getSWITCHRule() {
		return tSWITCH;
	}
	
	//terminal SYNCHRONIZED:
	//	"synchronized";
	public TerminalRule getSYNCHRONIZEDRule() {
		return tSYNCHRONIZED;
	}
	
	//terminal THIS:
	//	"this";
	public TerminalRule getTHISRule() {
		return tTHIS;
	}
	
	//terminal THREADSAFE:
	//	"threadsafe";
	public TerminalRule getTHREADSAFERule() {
		return tTHREADSAFE;
	}
	
	//terminal THROW:
	//	"throw";
	public TerminalRule getTHROWRule() {
		return tTHROW;
	}
	
	//terminal THROWS:
	//	"throws";
	public TerminalRule getTHROWSRule() {
		return tTHROWS;
	}
	
	//terminal TRANSIENT:
	//	"transient";
	public TerminalRule getTRANSIENTRule() {
		return tTRANSIENT;
	}
	
	//terminal TRY:
	//	"try";
	public TerminalRule getTRYRule() {
		return tTRY;
	}
	
	//terminal TRUE:
	//	"true";
	public TerminalRule getTRUERule() {
		return tTRUE;
	}
	
	//terminal VOID:
	//	"void";
	public TerminalRule getVOIDRule() {
		return tVOID;
	}
	
	//terminal VOLATILE:
	//	"volatile";
	public TerminalRule getVOLATILERule() {
		return tVOLATILE;
	}
	
	//terminal WHILE:
	//	"while";
	public TerminalRule getWHILERule() {
		return tWHILE;
	}
	
	//terminal ID:
	//	("a".."z" | "A".."Z" | "_" | "$") ("a".."z" | "A".."Z" | "_" | "$" | "0".."9")*;
	public TerminalRule getIDRule() {
		return tID;
	}
	
	//terminal DECIMAL_NUMERAL:
	//	"0" | NON_ZERO_DIGIT DIGIT*;
	public TerminalRule getDECIMAL_NUMERALRule() {
		return tDECIMAL_NUMERAL;
	}
	
	//terminal fragment DIGIT:
	//	"0" | NON_ZERO_DIGIT;
	public TerminalRule getDIGITRule() {
		return tDIGIT;
	}
	
	//terminal fragment NON_ZERO_DIGIT:
	//	"1".."9";
	public TerminalRule getNON_ZERO_DIGITRule() {
		return tNON_ZERO_DIGIT;
	}
	
	//terminal HEX_NUMERAL:
	//	("0x" | "0X") HEX_DIGIT+;
	public TerminalRule getHEX_NUMERALRule() {
		return tHEX_NUMERAL;
	}
	
	//terminal fragment HEX_DIGIT:
	//	"0".."9" | "a".."f" | "A".."F";
	public TerminalRule getHEX_DIGITRule() {
		return tHEX_DIGIT;
	}
	
	//terminal OCTAL_NUMERAL:
	//	"0" OCTAL_DIGIT+;
	public TerminalRule getOCTAL_NUMERALRule() {
		return tOCTAL_NUMERAL;
	}
	
	//terminal fragment OCTAL_DIGIT:
	//	"0".."7";
	public TerminalRule getOCTAL_DIGITRule() {
		return tOCTAL_DIGIT;
	}
	
	//terminal FLOAT_PART_COMPLEMENT:
	//	EXPONENT_PART? FLOAT_TYPE_SUFFIX?;
	public TerminalRule getFLOAT_PART_COMPLEMENTRule() {
		return tFLOAT_PART_COMPLEMENT;
	}
	
	//terminal fragment EXPONENT_PART:
	//	EXPONENT_INDICATOR SIGNED_INTEGER;
	public TerminalRule getEXPONENT_PARTRule() {
		return tEXPONENT_PART;
	}
	
	//terminal fragment EXPONENT_INDICATOR:
	//	"e" | "E";
	public TerminalRule getEXPONENT_INDICATORRule() {
		return tEXPONENT_INDICATOR;
	}
	
	//terminal fragment SIGNED_INTEGER:
	//	("+" | "-") DIGIT+;
	public TerminalRule getSIGNED_INTEGERRule() {
		return tSIGNED_INTEGER;
	}
	
	//terminal fragment FLOAT_TYPE_SUFFIX:
	//	"f" | "F" | "d" | "D";
	public TerminalRule getFLOAT_TYPE_SUFFIXRule() {
		return tFLOAT_TYPE_SUFFIX;
	}
	
	//terminal CHARACTER_LITERAL:
	//	"'" . | !("\\" | "'") "'";
	public TerminalRule getCHARACTER_LITERALRule() {
		return tCHARACTER_LITERAL;
	}
	
	//terminal STRING_LITERAL:
	//	'"' ("\\" . | !("\\" | '"'))* '"';
	public TerminalRule getSTRING_LITERALRule() {
		return tSTRING_LITERAL;
	}
}
