/**
 * generated by Xtext 2.13.0-SNAPSHOT
 */
package org.xtext.example.mydsl1.javaDsl.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.xtext.example.mydsl1.javaDsl.ForInit;
import org.xtext.example.mydsl1.javaDsl.ForStatement;
import org.xtext.example.mydsl1.javaDsl.ForUpdate;
import org.xtext.example.mydsl1.javaDsl.JavaDslPackage;
import org.xtext.example.mydsl1.javaDsl.Statement;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>For Statement</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.mydsl1.javaDsl.impl.ForStatementImpl#getInitExpr <em>Init Expr</em>}</li>
 *   <li>{@link org.xtext.example.mydsl1.javaDsl.impl.ForStatementImpl#isCondition <em>Condition</em>}</li>
 *   <li>{@link org.xtext.example.mydsl1.javaDsl.impl.ForStatementImpl#getUpdateExpr <em>Update Expr</em>}</li>
 *   <li>{@link org.xtext.example.mydsl1.javaDsl.impl.ForStatementImpl#getStatement <em>Statement</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ForStatementImpl extends StatementImpl implements ForStatement
{
  /**
   * The cached value of the '{@link #getInitExpr() <em>Init Expr</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getInitExpr()
   * @generated
   * @ordered
   */
  protected ForInit initExpr;

  /**
   * The default value of the '{@link #isCondition() <em>Condition</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isCondition()
   * @generated
   * @ordered
   */
  protected static final boolean CONDITION_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isCondition() <em>Condition</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isCondition()
   * @generated
   * @ordered
   */
  protected boolean condition = CONDITION_EDEFAULT;

  /**
   * The cached value of the '{@link #getUpdateExpr() <em>Update Expr</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getUpdateExpr()
   * @generated
   * @ordered
   */
  protected ForUpdate updateExpr;

  /**
   * The cached value of the '{@link #getStatement() <em>Statement</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getStatement()
   * @generated
   * @ordered
   */
  protected Statement statement;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ForStatementImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return JavaDslPackage.Literals.FOR_STATEMENT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ForInit getInitExpr()
  {
    return initExpr;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetInitExpr(ForInit newInitExpr, NotificationChain msgs)
  {
    ForInit oldInitExpr = initExpr;
    initExpr = newInitExpr;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, JavaDslPackage.FOR_STATEMENT__INIT_EXPR, oldInitExpr, newInitExpr);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setInitExpr(ForInit newInitExpr)
  {
    if (newInitExpr != initExpr)
    {
      NotificationChain msgs = null;
      if (initExpr != null)
        msgs = ((InternalEObject)initExpr).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - JavaDslPackage.FOR_STATEMENT__INIT_EXPR, null, msgs);
      if (newInitExpr != null)
        msgs = ((InternalEObject)newInitExpr).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - JavaDslPackage.FOR_STATEMENT__INIT_EXPR, null, msgs);
      msgs = basicSetInitExpr(newInitExpr, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, JavaDslPackage.FOR_STATEMENT__INIT_EXPR, newInitExpr, newInitExpr));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public boolean isCondition()
  {
    return condition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setCondition(boolean newCondition)
  {
    boolean oldCondition = condition;
    condition = newCondition;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, JavaDslPackage.FOR_STATEMENT__CONDITION, oldCondition, condition));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ForUpdate getUpdateExpr()
  {
    return updateExpr;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetUpdateExpr(ForUpdate newUpdateExpr, NotificationChain msgs)
  {
    ForUpdate oldUpdateExpr = updateExpr;
    updateExpr = newUpdateExpr;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, JavaDslPackage.FOR_STATEMENT__UPDATE_EXPR, oldUpdateExpr, newUpdateExpr);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setUpdateExpr(ForUpdate newUpdateExpr)
  {
    if (newUpdateExpr != updateExpr)
    {
      NotificationChain msgs = null;
      if (updateExpr != null)
        msgs = ((InternalEObject)updateExpr).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - JavaDslPackage.FOR_STATEMENT__UPDATE_EXPR, null, msgs);
      if (newUpdateExpr != null)
        msgs = ((InternalEObject)newUpdateExpr).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - JavaDslPackage.FOR_STATEMENT__UPDATE_EXPR, null, msgs);
      msgs = basicSetUpdateExpr(newUpdateExpr, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, JavaDslPackage.FOR_STATEMENT__UPDATE_EXPR, newUpdateExpr, newUpdateExpr));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Statement getStatement()
  {
    return statement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetStatement(Statement newStatement, NotificationChain msgs)
  {
    Statement oldStatement = statement;
    statement = newStatement;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, JavaDslPackage.FOR_STATEMENT__STATEMENT, oldStatement, newStatement);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setStatement(Statement newStatement)
  {
    if (newStatement != statement)
    {
      NotificationChain msgs = null;
      if (statement != null)
        msgs = ((InternalEObject)statement).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - JavaDslPackage.FOR_STATEMENT__STATEMENT, null, msgs);
      if (newStatement != null)
        msgs = ((InternalEObject)newStatement).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - JavaDslPackage.FOR_STATEMENT__STATEMENT, null, msgs);
      msgs = basicSetStatement(newStatement, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, JavaDslPackage.FOR_STATEMENT__STATEMENT, newStatement, newStatement));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case JavaDslPackage.FOR_STATEMENT__INIT_EXPR:
        return basicSetInitExpr(null, msgs);
      case JavaDslPackage.FOR_STATEMENT__UPDATE_EXPR:
        return basicSetUpdateExpr(null, msgs);
      case JavaDslPackage.FOR_STATEMENT__STATEMENT:
        return basicSetStatement(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case JavaDslPackage.FOR_STATEMENT__INIT_EXPR:
        return getInitExpr();
      case JavaDslPackage.FOR_STATEMENT__CONDITION:
        return isCondition();
      case JavaDslPackage.FOR_STATEMENT__UPDATE_EXPR:
        return getUpdateExpr();
      case JavaDslPackage.FOR_STATEMENT__STATEMENT:
        return getStatement();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case JavaDslPackage.FOR_STATEMENT__INIT_EXPR:
        setInitExpr((ForInit)newValue);
        return;
      case JavaDslPackage.FOR_STATEMENT__CONDITION:
        setCondition((Boolean)newValue);
        return;
      case JavaDslPackage.FOR_STATEMENT__UPDATE_EXPR:
        setUpdateExpr((ForUpdate)newValue);
        return;
      case JavaDslPackage.FOR_STATEMENT__STATEMENT:
        setStatement((Statement)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case JavaDslPackage.FOR_STATEMENT__INIT_EXPR:
        setInitExpr((ForInit)null);
        return;
      case JavaDslPackage.FOR_STATEMENT__CONDITION:
        setCondition(CONDITION_EDEFAULT);
        return;
      case JavaDslPackage.FOR_STATEMENT__UPDATE_EXPR:
        setUpdateExpr((ForUpdate)null);
        return;
      case JavaDslPackage.FOR_STATEMENT__STATEMENT:
        setStatement((Statement)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case JavaDslPackage.FOR_STATEMENT__INIT_EXPR:
        return initExpr != null;
      case JavaDslPackage.FOR_STATEMENT__CONDITION:
        return condition != CONDITION_EDEFAULT;
      case JavaDslPackage.FOR_STATEMENT__UPDATE_EXPR:
        return updateExpr != null;
      case JavaDslPackage.FOR_STATEMENT__STATEMENT:
        return statement != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (condition: ");
    result.append(condition);
    result.append(')');
    return result.toString();
  }

} //ForStatementImpl
