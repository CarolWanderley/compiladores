/**
 * generated by Xtext 2.13.0-SNAPSHOT
 */
package org.xtext.example.mydsl1.javaDsl.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EDataTypeEList;
import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.xtext.example.mydsl1.javaDsl.ArgumentList;
import org.xtext.example.mydsl1.javaDsl.ArrayExpression;
import org.xtext.example.mydsl1.javaDsl.ClassInstanceCreationExpression;
import org.xtext.example.mydsl1.javaDsl.Expression;
import org.xtext.example.mydsl1.javaDsl.JavaDslPackage;
import org.xtext.example.mydsl1.javaDsl.Primary;
import org.xtext.example.mydsl1.javaDsl.PrimaryNoNewArray;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Expression</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.mydsl1.javaDsl.impl.ExpressionImpl#getArgs <em>Args</em>}</li>
 *   <li>{@link org.xtext.example.mydsl1.javaDsl.impl.ExpressionImpl#getDimensions <em>Dimensions</em>}</li>
 *   <li>{@link org.xtext.example.mydsl1.javaDsl.impl.ExpressionImpl#getFields <em>Fields</em>}</li>
 *   <li>{@link org.xtext.example.mydsl1.javaDsl.impl.ExpressionImpl#getLiteral <em>Literal</em>}</li>
 *   <li>{@link org.xtext.example.mydsl1.javaDsl.impl.ExpressionImpl#getKeyword <em>Keyword</em>}</li>
 *   <li>{@link org.xtext.example.mydsl1.javaDsl.impl.ExpressionImpl#getClass_ <em>Class</em>}</li>
 *   <li>{@link org.xtext.example.mydsl1.javaDsl.impl.ExpressionImpl#getMethod <em>Method</em>}</li>
 *   <li>{@link org.xtext.example.mydsl1.javaDsl.impl.ExpressionImpl#getReference <em>Reference</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ExpressionImpl extends ConstantExpressionImpl implements Expression
{
  /**
   * The cached value of the '{@link #getArgs() <em>Args</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getArgs()
   * @generated
   * @ordered
   */
  protected EList<ArgumentList> args;

  /**
   * The cached value of the '{@link #getDimensions() <em>Dimensions</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDimensions()
   * @generated
   * @ordered
   */
  protected EList<ArrayExpression> dimensions;

  /**
   * The cached value of the '{@link #getFields() <em>Fields</em>}' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFields()
   * @generated
   * @ordered
   */
  protected EList<String> fields;

  /**
   * The default value of the '{@link #getLiteral() <em>Literal</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLiteral()
   * @generated
   * @ordered
   */
  protected static final String LITERAL_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getLiteral() <em>Literal</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLiteral()
   * @generated
   * @ordered
   */
  protected String literal = LITERAL_EDEFAULT;

  /**
   * The default value of the '{@link #getKeyword() <em>Keyword</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getKeyword()
   * @generated
   * @ordered
   */
  protected static final String KEYWORD_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getKeyword() <em>Keyword</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getKeyword()
   * @generated
   * @ordered
   */
  protected String keyword = KEYWORD_EDEFAULT;

  /**
   * The cached value of the '{@link #getClass_() <em>Class</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getClass_()
   * @generated
   * @ordered
   */
  protected ClassInstanceCreationExpression class_;

  /**
   * The default value of the '{@link #getMethod() <em>Method</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMethod()
   * @generated
   * @ordered
   */
  protected static final String METHOD_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getMethod() <em>Method</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMethod()
   * @generated
   * @ordered
   */
  protected String method = METHOD_EDEFAULT;

  /**
   * The default value of the '{@link #getReference() <em>Reference</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getReference()
   * @generated
   * @ordered
   */
  protected static final String REFERENCE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getReference() <em>Reference</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getReference()
   * @generated
   * @ordered
   */
  protected String reference = REFERENCE_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ExpressionImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return JavaDslPackage.Literals.EXPRESSION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<ArgumentList> getArgs()
  {
    if (args == null)
    {
      args = new EObjectContainmentEList<ArgumentList>(ArgumentList.class, this, JavaDslPackage.EXPRESSION__ARGS);
    }
    return args;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<ArrayExpression> getDimensions()
  {
    if (dimensions == null)
    {
      dimensions = new EObjectContainmentEList<ArrayExpression>(ArrayExpression.class, this, JavaDslPackage.EXPRESSION__DIMENSIONS);
    }
    return dimensions;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<String> getFields()
  {
    if (fields == null)
    {
      fields = new EDataTypeEList<String>(String.class, this, JavaDslPackage.EXPRESSION__FIELDS);
    }
    return fields;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getLiteral()
  {
    return literal;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setLiteral(String newLiteral)
  {
    String oldLiteral = literal;
    literal = newLiteral;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, JavaDslPackage.EXPRESSION__LITERAL, oldLiteral, literal));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getKeyword()
  {
    return keyword;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setKeyword(String newKeyword)
  {
    String oldKeyword = keyword;
    keyword = newKeyword;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, JavaDslPackage.EXPRESSION__KEYWORD, oldKeyword, keyword));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ClassInstanceCreationExpression getClass_()
  {
    return class_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetClass(ClassInstanceCreationExpression newClass, NotificationChain msgs)
  {
    ClassInstanceCreationExpression oldClass = class_;
    class_ = newClass;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, JavaDslPackage.EXPRESSION__CLASS, oldClass, newClass);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setClass(ClassInstanceCreationExpression newClass)
  {
    if (newClass != class_)
    {
      NotificationChain msgs = null;
      if (class_ != null)
        msgs = ((InternalEObject)class_).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - JavaDslPackage.EXPRESSION__CLASS, null, msgs);
      if (newClass != null)
        msgs = ((InternalEObject)newClass).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - JavaDslPackage.EXPRESSION__CLASS, null, msgs);
      msgs = basicSetClass(newClass, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, JavaDslPackage.EXPRESSION__CLASS, newClass, newClass));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getMethod()
  {
    return method;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setMethod(String newMethod)
  {
    String oldMethod = method;
    method = newMethod;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, JavaDslPackage.EXPRESSION__METHOD, oldMethod, method));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getReference()
  {
    return reference;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setReference(String newReference)
  {
    String oldReference = reference;
    reference = newReference;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, JavaDslPackage.EXPRESSION__REFERENCE, oldReference, reference));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case JavaDslPackage.EXPRESSION__ARGS:
        return ((InternalEList<?>)getArgs()).basicRemove(otherEnd, msgs);
      case JavaDslPackage.EXPRESSION__DIMENSIONS:
        return ((InternalEList<?>)getDimensions()).basicRemove(otherEnd, msgs);
      case JavaDslPackage.EXPRESSION__CLASS:
        return basicSetClass(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case JavaDslPackage.EXPRESSION__ARGS:
        return getArgs();
      case JavaDslPackage.EXPRESSION__DIMENSIONS:
        return getDimensions();
      case JavaDslPackage.EXPRESSION__FIELDS:
        return getFields();
      case JavaDslPackage.EXPRESSION__LITERAL:
        return getLiteral();
      case JavaDslPackage.EXPRESSION__KEYWORD:
        return getKeyword();
      case JavaDslPackage.EXPRESSION__CLASS:
        return getClass_();
      case JavaDslPackage.EXPRESSION__METHOD:
        return getMethod();
      case JavaDslPackage.EXPRESSION__REFERENCE:
        return getReference();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case JavaDslPackage.EXPRESSION__ARGS:
        getArgs().clear();
        getArgs().addAll((Collection<? extends ArgumentList>)newValue);
        return;
      case JavaDslPackage.EXPRESSION__DIMENSIONS:
        getDimensions().clear();
        getDimensions().addAll((Collection<? extends ArrayExpression>)newValue);
        return;
      case JavaDslPackage.EXPRESSION__FIELDS:
        getFields().clear();
        getFields().addAll((Collection<? extends String>)newValue);
        return;
      case JavaDslPackage.EXPRESSION__LITERAL:
        setLiteral((String)newValue);
        return;
      case JavaDslPackage.EXPRESSION__KEYWORD:
        setKeyword((String)newValue);
        return;
      case JavaDslPackage.EXPRESSION__CLASS:
        setClass((ClassInstanceCreationExpression)newValue);
        return;
      case JavaDslPackage.EXPRESSION__METHOD:
        setMethod((String)newValue);
        return;
      case JavaDslPackage.EXPRESSION__REFERENCE:
        setReference((String)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case JavaDslPackage.EXPRESSION__ARGS:
        getArgs().clear();
        return;
      case JavaDslPackage.EXPRESSION__DIMENSIONS:
        getDimensions().clear();
        return;
      case JavaDslPackage.EXPRESSION__FIELDS:
        getFields().clear();
        return;
      case JavaDslPackage.EXPRESSION__LITERAL:
        setLiteral(LITERAL_EDEFAULT);
        return;
      case JavaDslPackage.EXPRESSION__KEYWORD:
        setKeyword(KEYWORD_EDEFAULT);
        return;
      case JavaDslPackage.EXPRESSION__CLASS:
        setClass((ClassInstanceCreationExpression)null);
        return;
      case JavaDslPackage.EXPRESSION__METHOD:
        setMethod(METHOD_EDEFAULT);
        return;
      case JavaDslPackage.EXPRESSION__REFERENCE:
        setReference(REFERENCE_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case JavaDslPackage.EXPRESSION__ARGS:
        return args != null && !args.isEmpty();
      case JavaDslPackage.EXPRESSION__DIMENSIONS:
        return dimensions != null && !dimensions.isEmpty();
      case JavaDslPackage.EXPRESSION__FIELDS:
        return fields != null && !fields.isEmpty();
      case JavaDslPackage.EXPRESSION__LITERAL:
        return LITERAL_EDEFAULT == null ? literal != null : !LITERAL_EDEFAULT.equals(literal);
      case JavaDslPackage.EXPRESSION__KEYWORD:
        return KEYWORD_EDEFAULT == null ? keyword != null : !KEYWORD_EDEFAULT.equals(keyword);
      case JavaDslPackage.EXPRESSION__CLASS:
        return class_ != null;
      case JavaDslPackage.EXPRESSION__METHOD:
        return METHOD_EDEFAULT == null ? method != null : !METHOD_EDEFAULT.equals(method);
      case JavaDslPackage.EXPRESSION__REFERENCE:
        return REFERENCE_EDEFAULT == null ? reference != null : !REFERENCE_EDEFAULT.equals(reference);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public int eBaseStructuralFeatureID(int derivedFeatureID, Class<?> baseClass)
  {
    if (baseClass == Primary.class)
    {
      switch (derivedFeatureID)
      {
        case JavaDslPackage.EXPRESSION__ARGS: return JavaDslPackage.PRIMARY__ARGS;
        case JavaDslPackage.EXPRESSION__DIMENSIONS: return JavaDslPackage.PRIMARY__DIMENSIONS;
        case JavaDslPackage.EXPRESSION__FIELDS: return JavaDslPackage.PRIMARY__FIELDS;
        default: return -1;
      }
    }
    if (baseClass == PrimaryNoNewArray.class)
    {
      switch (derivedFeatureID)
      {
        case JavaDslPackage.EXPRESSION__LITERAL: return JavaDslPackage.PRIMARY_NO_NEW_ARRAY__LITERAL;
        case JavaDslPackage.EXPRESSION__KEYWORD: return JavaDslPackage.PRIMARY_NO_NEW_ARRAY__KEYWORD;
        case JavaDslPackage.EXPRESSION__CLASS: return JavaDslPackage.PRIMARY_NO_NEW_ARRAY__CLASS;
        case JavaDslPackage.EXPRESSION__METHOD: return JavaDslPackage.PRIMARY_NO_NEW_ARRAY__METHOD;
        case JavaDslPackage.EXPRESSION__REFERENCE: return JavaDslPackage.PRIMARY_NO_NEW_ARRAY__REFERENCE;
        default: return -1;
      }
    }
    return super.eBaseStructuralFeatureID(derivedFeatureID, baseClass);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public int eDerivedStructuralFeatureID(int baseFeatureID, Class<?> baseClass)
  {
    if (baseClass == Primary.class)
    {
      switch (baseFeatureID)
      {
        case JavaDslPackage.PRIMARY__ARGS: return JavaDslPackage.EXPRESSION__ARGS;
        case JavaDslPackage.PRIMARY__DIMENSIONS: return JavaDslPackage.EXPRESSION__DIMENSIONS;
        case JavaDslPackage.PRIMARY__FIELDS: return JavaDslPackage.EXPRESSION__FIELDS;
        default: return -1;
      }
    }
    if (baseClass == PrimaryNoNewArray.class)
    {
      switch (baseFeatureID)
      {
        case JavaDslPackage.PRIMARY_NO_NEW_ARRAY__LITERAL: return JavaDslPackage.EXPRESSION__LITERAL;
        case JavaDslPackage.PRIMARY_NO_NEW_ARRAY__KEYWORD: return JavaDslPackage.EXPRESSION__KEYWORD;
        case JavaDslPackage.PRIMARY_NO_NEW_ARRAY__CLASS: return JavaDslPackage.EXPRESSION__CLASS;
        case JavaDslPackage.PRIMARY_NO_NEW_ARRAY__METHOD: return JavaDslPackage.EXPRESSION__METHOD;
        case JavaDslPackage.PRIMARY_NO_NEW_ARRAY__REFERENCE: return JavaDslPackage.EXPRESSION__REFERENCE;
        default: return -1;
      }
    }
    return super.eDerivedStructuralFeatureID(baseFeatureID, baseClass);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (fields: ");
    result.append(fields);
    result.append(", literal: ");
    result.append(literal);
    result.append(", keyword: ");
    result.append(keyword);
    result.append(", method: ");
    result.append(method);
    result.append(", reference: ");
    result.append(reference);
    result.append(')');
    return result.toString();
  }

} //ExpressionImpl
