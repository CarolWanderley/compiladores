/**
 * generated by Xtext 2.13.0-SNAPSHOT
 */
package org.xtext.example.mydsl1.javaDsl.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.xtext.example.mydsl1.javaDsl.ForInit;
import org.xtext.example.mydsl1.javaDsl.JavaDslPackage;
import org.xtext.example.mydsl1.javaDsl.LocalVariableDeclaration;
import org.xtext.example.mydsl1.javaDsl.StatementExpression;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>For Init</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.mydsl1.javaDsl.impl.ForInitImpl#getExpressions <em>Expressions</em>}</li>
 *   <li>{@link org.xtext.example.mydsl1.javaDsl.impl.ForInitImpl#getLocalVariable <em>Local Variable</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ForInitImpl extends MinimalEObjectImpl.Container implements ForInit
{
  /**
   * The cached value of the '{@link #getExpressions() <em>Expressions</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExpressions()
   * @generated
   * @ordered
   */
  protected EList<StatementExpression> expressions;

  /**
   * The cached value of the '{@link #getLocalVariable() <em>Local Variable</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLocalVariable()
   * @generated
   * @ordered
   */
  protected LocalVariableDeclaration localVariable;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ForInitImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return JavaDslPackage.Literals.FOR_INIT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<StatementExpression> getExpressions()
  {
    if (expressions == null)
    {
      expressions = new EObjectContainmentEList<StatementExpression>(StatementExpression.class, this, JavaDslPackage.FOR_INIT__EXPRESSIONS);
    }
    return expressions;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public LocalVariableDeclaration getLocalVariable()
  {
    return localVariable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetLocalVariable(LocalVariableDeclaration newLocalVariable, NotificationChain msgs)
  {
    LocalVariableDeclaration oldLocalVariable = localVariable;
    localVariable = newLocalVariable;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, JavaDslPackage.FOR_INIT__LOCAL_VARIABLE, oldLocalVariable, newLocalVariable);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setLocalVariable(LocalVariableDeclaration newLocalVariable)
  {
    if (newLocalVariable != localVariable)
    {
      NotificationChain msgs = null;
      if (localVariable != null)
        msgs = ((InternalEObject)localVariable).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - JavaDslPackage.FOR_INIT__LOCAL_VARIABLE, null, msgs);
      if (newLocalVariable != null)
        msgs = ((InternalEObject)newLocalVariable).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - JavaDslPackage.FOR_INIT__LOCAL_VARIABLE, null, msgs);
      msgs = basicSetLocalVariable(newLocalVariable, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, JavaDslPackage.FOR_INIT__LOCAL_VARIABLE, newLocalVariable, newLocalVariable));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case JavaDslPackage.FOR_INIT__EXPRESSIONS:
        return ((InternalEList<?>)getExpressions()).basicRemove(otherEnd, msgs);
      case JavaDslPackage.FOR_INIT__LOCAL_VARIABLE:
        return basicSetLocalVariable(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case JavaDslPackage.FOR_INIT__EXPRESSIONS:
        return getExpressions();
      case JavaDslPackage.FOR_INIT__LOCAL_VARIABLE:
        return getLocalVariable();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case JavaDslPackage.FOR_INIT__EXPRESSIONS:
        getExpressions().clear();
        getExpressions().addAll((Collection<? extends StatementExpression>)newValue);
        return;
      case JavaDslPackage.FOR_INIT__LOCAL_VARIABLE:
        setLocalVariable((LocalVariableDeclaration)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case JavaDslPackage.FOR_INIT__EXPRESSIONS:
        getExpressions().clear();
        return;
      case JavaDslPackage.FOR_INIT__LOCAL_VARIABLE:
        setLocalVariable((LocalVariableDeclaration)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case JavaDslPackage.FOR_INIT__EXPRESSIONS:
        return expressions != null && !expressions.isEmpty();
      case JavaDslPackage.FOR_INIT__LOCAL_VARIABLE:
        return localVariable != null;
    }
    return super.eIsSet(featureID);
  }

} //ForInitImpl
