/**
 * generated by Xtext 2.13.0-SNAPSHOT
 */
package org.xtext.example.mydsl1.validation;

import java.util.ArrayList;
import java.util.List;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.validation.Check;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.xtext.example.mydsl1.javaDsl.ClassDeclaration;
import org.xtext.example.mydsl1.javaDsl.CompilationUnit;
import org.xtext.example.mydsl1.javaDsl.FieldDeclaration;
import org.xtext.example.mydsl1.javaDsl.InterfaceDeclaration;
import org.xtext.example.mydsl1.javaDsl.JavaDslPackage;
import org.xtext.example.mydsl1.javaDsl.TypeDeclaration;
import org.xtext.example.mydsl1.javaDsl.VariableDeclarator;
import org.xtext.example.mydsl1.validation.AbstractMyDslValidator;
import org.xtext.example.mydsl1.validation.utils.ClassValidator;
import org.xtext.example.mydsl1.validation.utils.ExtendsValidator;
import org.xtext.example.mydsl1.validation.utils.ValidatorRepository;

/**
 * This class contains custom validation rules.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
@SuppressWarnings("all")
public class MyDslValidator extends AbstractMyDslValidator {
  public ValidatorRepository validator = new ValidatorRepository();
  
  @Check
  public void validateCompilation(final CompilationUnit cmu) {
    try {
      ValidatorRepository _validatorRepository = new ValidatorRepository();
      this.validator = _validatorRepository;
      EList<TypeDeclaration> _typeDeclarations = cmu.getTypeDeclarations();
      for (final TypeDeclaration td : _typeDeclarations) {
        this.mapAndValidateClasses(td);
      }
      EList<TypeDeclaration> _typeDeclarations_1 = cmu.getTypeDeclarations();
      for (final TypeDeclaration td_1 : _typeDeclarations_1) {
        if (((td_1.getName() != null) && (td_1.getName() instanceof ClassDeclaration))) {
          ExtendsValidator extendsValidator = new ExtendsValidator(this.validator);
          EObject _name = td_1.getName();
          ClassDeclaration cd = ((ClassDeclaration) _name);
          extendsValidator.validate(cd);
        }
      }
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  public void mapAndValidateClasses(final TypeDeclaration td) {
    EObject _name = td.getName();
    boolean _tripleEquals = (_name == null);
    if (_tripleEquals) {
      return;
    }
    EObject _name_1 = td.getName();
    boolean isInstance = (_name_1 instanceof ClassDeclaration);
    if (isInstance) {
      EObject _name_2 = td.getName();
      ClassDeclaration cd = ((ClassDeclaration) _name_2);
      this.validateClass(cd);
      this.validator.addClass(cd);
    } else {
      EObject _name_3 = td.getName();
      InterfaceDeclaration id = ((InterfaceDeclaration) _name_3);
      this.validator.addInterface(id);
    }
  }
  
  public void validateClass(final ClassDeclaration cd) {
    try {
      ClassValidator classValidator = new ClassValidator(this.validator);
      classValidator.validate(cd);
    } catch (final Throwable _t) {
      if (_t instanceof Exception) {
        final Exception e = (Exception)_t;
        this.error(e.getMessage(), cd, JavaDslPackage.Literals.CLASS_DECLARATION__CLASS_NAME);
      } else {
        throw Exceptions.sneakyThrow(_t);
      }
    }
  }
  
  public void mapAndValidateAttributes(final ClassDeclaration cd) {
    throw new Error("Unresolved compilation problems:"
      + "\nThe method validateAttributeWithExpression(FieldDeclaration, VariableDeclarator, String) is undefined");
  }
  
  public void validateClassAttributes(final ClassDeclaration cd, final FieldDeclaration fd) {
    if (((this.validator.classAttributes.get(fd.getType()) == null) && (!this.isPrimitive(fd.getType())))) {
      String _type = fd.getType();
      String _plus = ("This object " + _type);
      String _plus_1 = (_plus + " does not exist");
      this.error(_plus_1, fd, JavaDslPackage.Literals.FIELD_DECLARATION__TYPE);
    }
    List<String> variableNames = new ArrayList<String>();
    EList<VariableDeclarator> _variables = fd.getVariables();
    boolean _tripleNotEquals = (_variables != null);
    if (_tripleNotEquals) {
      EList<VariableDeclarator> _variables_1 = fd.getVariables();
      for (final VariableDeclarator vd : _variables_1) {
        {
          if ((this.validator.hasClassAttribute(cd, vd.getName()) || variableNames.contains(vd.getName()))) {
            String _name = vd.getName();
            String _plus_2 = ("Field " + _name);
            String _plus_3 = (_plus_2 + " duplicated.");
            this.error(_plus_3, vd, JavaDslPackage.Literals.VARIABLE_DECLARATOR__NAME);
          }
          variableNames.add(vd.getName());
        }
      }
    }
  }
  
  public boolean isPrimitive(final String type) {
    return ((((((((type.equals("int") || type.equals("boolean")) || type.equals("byte")) || type.equals("char")) || 
      type.equals("short")) || type.equals("float")) || type.equals("double")) || type.equals("long")) || 
      type.equals("void"));
  }
}
